
SlavenP_Reaction_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008600  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  080087d0  080087d0  000187d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a8  080099a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080099b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  200001dc  08009b8c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08009b8c  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5ca  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c4  00000000  00000000  0002d819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  0002fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afd  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023685  00000000  00000000  0003150d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cd3  00000000  00000000  00054b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d27be  00000000  00000000  00067865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ff8  00000000  00000000  0013a024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0013f01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087b8 	.word	0x080087b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080087b8 	.word	0x080087b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <MX_GPIO_Init+0xf4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <MX_GPIO_Init+0xf4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MX_GPIO_Init+0xf4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_GPIO_Init+0xf4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <MX_GPIO_Init+0xf4>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_GPIO_Init+0xf4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	481b      	ldr	r0, [pc, #108]	; (8001128 <MX_GPIO_Init+0xf8>)
 80010bc:	f001 f968 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <MX_GPIO_Init+0xfc>)
 80010c6:	f001 f963 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ca:	2340      	movs	r3, #64	; 0x40
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_GPIO_Init+0xf8>)
 80010e2:	f000 ffa9 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_GPIO_Init+0x100>)
 80010fc:	f000 ff9c 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_GPIO_Init+0xfc>)
 8001118:	f000 ff8e 	bl	8002038 <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020800 	.word	0x40020800
 8001130:	40020400 	.word	0x40020400

08001134 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_I2C1_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_I2C1_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_I2C1_Init+0x50>)
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_I2C1_Init+0x58>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_I2C1_Init+0x50>)
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_I2C1_Init+0x50>)
 8001172:	f001 f927 	bl	80023c4 <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f956 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001f8 	.word	0x200001f8
 8001188:	40005400 	.word	0x40005400
 800118c:	00061a80 	.word	0x00061a80

08001190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_I2C_MspInit+0x84>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12c      	bne.n	800120c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e0:	2304      	movs	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <HAL_I2C_MspInit+0x8c>)
 80011ec:	f000 ff24 	bl	8002038 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_I2C_MspInit+0x88>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005400 	.word	0x40005400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    HAL_Init();
 8001224:	f000 fd8c 	bl	8001d40 <HAL_Init>
    SystemClock_Config();
 8001228:	f000 f8a2 	bl	8001370 <SystemClock_Config>


    MX_GPIO_Init();
 800122c:	f7ff ff00 	bl	8001030 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001230:	f7ff ff80 	bl	8001134 <MX_I2C1_Init>
    MX_TIM2_Init();
 8001234:	f000 fcec 	bl	8001c10 <MX_TIM2_Init>


    SSD1306_Init();
 8001238:	f000 f8fe 	bl	8001438 <SSD1306_Init>

    SSD1306_Clear();
 800123c:	f000 fb1b 	bl	8001876 <SSD1306_Clear>
    SSD1306_UpdateScreen();
 8001240:	f000 f9b8 	bl	80015b4 <SSD1306_UpdateScreen>
       SSD1306_GotoXY(10, 10);
 8001244:	210a      	movs	r1, #10
 8001246:	200a      	movs	r0, #10
 8001248:	f000 fa5a 	bl	8001700 <SSD1306_GotoXY>
       SSD1306_Puts("Press to ", &Font_11x18, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	493d      	ldr	r1, [pc, #244]	; (8001344 <main+0x124>)
 8001250:	483d      	ldr	r0, [pc, #244]	; (8001348 <main+0x128>)
 8001252:	f000 faeb 	bl	800182c <SSD1306_Puts>
       SSD1306_GotoXY (20, 30);
 8001256:	211e      	movs	r1, #30
 8001258:	2014      	movs	r0, #20
 800125a:	f000 fa51 	bl	8001700 <SSD1306_GotoXY>
       SSD1306_Puts ("start", &Font_11x18, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	4938      	ldr	r1, [pc, #224]	; (8001344 <main+0x124>)
 8001262:	483a      	ldr	r0, [pc, #232]	; (800134c <main+0x12c>)
 8001264:	f000 fae2 	bl	800182c <SSD1306_Puts>
       SSD1306_UpdateScreen();
 8001268:	f000 f9a4 	bl	80015b4 <SSD1306_UpdateScreen>


       while (1)
       {

              while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET);
 800126c:	bf00      	nop
 800126e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001272:	4837      	ldr	r0, [pc, #220]	; (8001350 <main+0x130>)
 8001274:	f001 f874 	bl	8002360 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d0f7      	beq.n	800126e <main+0x4e>


              SSD1306_Clear();
 800127e:	f000 fafa 	bl	8001876 <SSD1306_Clear>
              SSD1306_UpdateScreen();
 8001282:	f000 f997 	bl	80015b4 <SSD1306_UpdateScreen>


              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4832      	ldr	r0, [pc, #200]	; (8001354 <main+0x134>)
 800128c:	f001 f880 	bl	8002390 <HAL_GPIO_WritePin>
              HAL_Delay(2000);
 8001290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001294:	f000 fdc6 	bl	8001e24 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	482d      	ldr	r0, [pc, #180]	; (8001354 <main+0x134>)
 800129e:	f001 f877 	bl	8002390 <HAL_GPIO_WritePin>


              HAL_TIM_Base_Start(&htim2);
 80012a2:	482d      	ldr	r0, [pc, #180]	; (8001358 <main+0x138>)
 80012a4:	f002 fba6 	bl	80039f4 <HAL_TIM_Base_Start>


              while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET);
 80012a8:	bf00      	nop
 80012aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ae:	4828      	ldr	r0, [pc, #160]	; (8001350 <main+0x130>)
 80012b0:	f001 f856 	bl	8002360 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d0f7      	beq.n	80012aa <main+0x8a>


              reaction_time = __HAL_TIM_GET_COUNTER(&htim2);
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <main+0x138>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <main+0x13c>)
 80012c2:	6013      	str	r3, [r2, #0]
              HAL_TIM_Base_Stop(&htim2);
 80012c4:	4824      	ldr	r0, [pc, #144]	; (8001358 <main+0x138>)
 80012c6:	f002 fbfd 	bl	8003ac4 <HAL_TIM_Base_Stop>
              __HAL_TIM_SET_COUNTER(&htim2, 0);
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <main+0x138>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24


              SSD1306_Clear();
 80012d2:	f000 fad0 	bl	8001876 <SSD1306_Clear>
              SSD1306_GotoXY(10, 10);
 80012d6:	210a      	movs	r1, #10
 80012d8:	200a      	movs	r0, #10
 80012da:	f000 fa11 	bl	8001700 <SSD1306_GotoXY>
              sprintf(reaction_time_str, "Time: %lu ms", reaction_time);
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <main+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	491e      	ldr	r1, [pc, #120]	; (8001360 <main+0x140>)
 80012e6:	481f      	ldr	r0, [pc, #124]	; (8001364 <main+0x144>)
 80012e8:	f003 fdc8 	bl	8004e7c <siprintf>
              SSD1306_Puts(reaction_time_str, &Font_11x18, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	4915      	ldr	r1, [pc, #84]	; (8001344 <main+0x124>)
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <main+0x144>)
 80012f2:	f000 fa9b 	bl	800182c <SSD1306_Puts>
              SSD1306_GotoXY (10, 30);
 80012f6:	211e      	movs	r1, #30
 80012f8:	200a      	movs	r0, #10
 80012fa:	f000 fa01 	bl	8001700 <SSD1306_GotoXY>
               SSD1306_Puts ("ms", &Font_11x18, 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	4910      	ldr	r1, [pc, #64]	; (8001344 <main+0x124>)
 8001302:	4819      	ldr	r0, [pc, #100]	; (8001368 <main+0x148>)
 8001304:	f000 fa92 	bl	800182c <SSD1306_Puts>
              SSD1306_UpdateScreen();
 8001308:	f000 f954 	bl	80015b4 <SSD1306_UpdateScreen>


              HAL_Delay(2000);
 800130c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001310:	f000 fd88 	bl	8001e24 <HAL_Delay>


              SSD1306_Clear();
 8001314:	f000 faaf 	bl	8001876 <SSD1306_Clear>
              SSD1306_GotoXY(10, 10);
 8001318:	210a      	movs	r1, #10
 800131a:	200a      	movs	r0, #10
 800131c:	f000 f9f0 	bl	8001700 <SSD1306_GotoXY>
              SSD1306_Puts("Press to", &Font_11x18, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <main+0x124>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <main+0x14c>)
 8001326:	f000 fa81 	bl	800182c <SSD1306_Puts>
              SSD1306_GotoXY(10, 30);
 800132a:	211e      	movs	r1, #30
 800132c:	200a      	movs	r0, #10
 800132e:	f000 f9e7 	bl	8001700 <SSD1306_GotoXY>
              SSD1306_Puts("start", &Font_11x18, 1);
 8001332:	2201      	movs	r2, #1
 8001334:	4903      	ldr	r1, [pc, #12]	; (8001344 <main+0x124>)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <main+0x12c>)
 8001338:	f000 fa78 	bl	800182c <SSD1306_Puts>
              SSD1306_UpdateScreen();
 800133c:	f000 f93a 	bl	80015b4 <SSD1306_UpdateScreen>
              while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET);
 8001340:	e794      	b.n	800126c <main+0x4c>
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000
 8001348:	080087d0 	.word	0x080087d0
 800134c:	080087dc 	.word	0x080087dc
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	20000260 	.word	0x20000260
 800135c:	2000024c 	.word	0x2000024c
 8001360:	080087e4 	.word	0x080087e4
 8001364:	20000250 	.word	0x20000250
 8001368:	080087f4 	.word	0x080087f4
 800136c:	080087f8 	.word	0x080087f8

08001370 <SystemClock_Config>:
          }
      }


void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	2234      	movs	r2, #52	; 0x34
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fddf 	bl	8004f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]



  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xb4>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <SystemClock_Config+0xb4>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <SystemClock_Config+0xb4>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <SystemClock_Config+0xb8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <SystemClock_Config+0xb8>)
 80013be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <SystemClock_Config+0xb8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f818 	bl	8003418 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ee:	f000 f81d 	bl	800142c <Error_Handler>
  }



  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f2:	230f      	movs	r3, #15
 80013f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fd53 	bl	8002eb8 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001418:	f000 f808 	bl	800142c <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	; 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800143e:	f000 fa23 	bl	8001888 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001442:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001446:	2201      	movs	r2, #1
 8001448:	213c      	movs	r1, #60	; 0x3c
 800144a:	4858      	ldr	r0, [pc, #352]	; (80015ac <SSD1306_Init+0x174>)
 800144c:	f001 f9fc 	bl	8002848 <HAL_I2C_IsDeviceReady>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001456:	2300      	movs	r3, #0
 8001458:	e0a4      	b.n	80015a4 <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 800145a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800145e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001460:	e002      	b.n	8001468 <SSD1306_Init+0x30>
		p--;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3b01      	subs	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f9      	bne.n	8001462 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800146e:	22ae      	movs	r2, #174	; 0xae
 8001470:	2100      	movs	r1, #0
 8001472:	203c      	movs	r0, #60	; 0x3c
 8001474:	f000 fa84 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001478:	2220      	movs	r2, #32
 800147a:	2100      	movs	r1, #0
 800147c:	203c      	movs	r0, #60	; 0x3c
 800147e:	f000 fa7f 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001482:	2210      	movs	r2, #16
 8001484:	2100      	movs	r1, #0
 8001486:	203c      	movs	r0, #60	; 0x3c
 8001488:	f000 fa7a 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800148c:	22b0      	movs	r2, #176	; 0xb0
 800148e:	2100      	movs	r1, #0
 8001490:	203c      	movs	r0, #60	; 0x3c
 8001492:	f000 fa75 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001496:	22c8      	movs	r2, #200	; 0xc8
 8001498:	2100      	movs	r1, #0
 800149a:	203c      	movs	r0, #60	; 0x3c
 800149c:	f000 fa70 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	203c      	movs	r0, #60	; 0x3c
 80014a6:	f000 fa6b 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014aa:	2210      	movs	r2, #16
 80014ac:	2100      	movs	r1, #0
 80014ae:	203c      	movs	r0, #60	; 0x3c
 80014b0:	f000 fa66 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014b4:	2240      	movs	r2, #64	; 0x40
 80014b6:	2100      	movs	r1, #0
 80014b8:	203c      	movs	r0, #60	; 0x3c
 80014ba:	f000 fa61 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014be:	2281      	movs	r2, #129	; 0x81
 80014c0:	2100      	movs	r1, #0
 80014c2:	203c      	movs	r0, #60	; 0x3c
 80014c4:	f000 fa5c 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	2100      	movs	r1, #0
 80014cc:	203c      	movs	r0, #60	; 0x3c
 80014ce:	f000 fa57 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014d2:	22a1      	movs	r2, #161	; 0xa1
 80014d4:	2100      	movs	r1, #0
 80014d6:	203c      	movs	r0, #60	; 0x3c
 80014d8:	f000 fa52 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014dc:	22a6      	movs	r2, #166	; 0xa6
 80014de:	2100      	movs	r1, #0
 80014e0:	203c      	movs	r0, #60	; 0x3c
 80014e2:	f000 fa4d 	bl	8001980 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80014e6:	22a8      	movs	r2, #168	; 0xa8
 80014e8:	2100      	movs	r1, #0
 80014ea:	203c      	movs	r0, #60	; 0x3c
 80014ec:	f000 fa48 	bl	8001980 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80014f0:	223f      	movs	r2, #63	; 0x3f
 80014f2:	2100      	movs	r1, #0
 80014f4:	203c      	movs	r0, #60	; 0x3c
 80014f6:	f000 fa43 	bl	8001980 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014fa:	22a4      	movs	r2, #164	; 0xa4
 80014fc:	2100      	movs	r1, #0
 80014fe:	203c      	movs	r0, #60	; 0x3c
 8001500:	f000 fa3e 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001504:	22d3      	movs	r2, #211	; 0xd3
 8001506:	2100      	movs	r1, #0
 8001508:	203c      	movs	r0, #60	; 0x3c
 800150a:	f000 fa39 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	203c      	movs	r0, #60	; 0x3c
 8001514:	f000 fa34 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001518:	22d5      	movs	r2, #213	; 0xd5
 800151a:	2100      	movs	r1, #0
 800151c:	203c      	movs	r0, #60	; 0x3c
 800151e:	f000 fa2f 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001522:	22f0      	movs	r2, #240	; 0xf0
 8001524:	2100      	movs	r1, #0
 8001526:	203c      	movs	r0, #60	; 0x3c
 8001528:	f000 fa2a 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800152c:	22d9      	movs	r2, #217	; 0xd9
 800152e:	2100      	movs	r1, #0
 8001530:	203c      	movs	r0, #60	; 0x3c
 8001532:	f000 fa25 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001536:	2222      	movs	r2, #34	; 0x22
 8001538:	2100      	movs	r1, #0
 800153a:	203c      	movs	r0, #60	; 0x3c
 800153c:	f000 fa20 	bl	8001980 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001540:	22da      	movs	r2, #218	; 0xda
 8001542:	2100      	movs	r1, #0
 8001544:	203c      	movs	r0, #60	; 0x3c
 8001546:	f000 fa1b 	bl	8001980 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800154a:	2212      	movs	r2, #18
 800154c:	2100      	movs	r1, #0
 800154e:	203c      	movs	r0, #60	; 0x3c
 8001550:	f000 fa16 	bl	8001980 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001554:	22db      	movs	r2, #219	; 0xdb
 8001556:	2100      	movs	r1, #0
 8001558:	203c      	movs	r0, #60	; 0x3c
 800155a:	f000 fa11 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800155e:	2220      	movs	r2, #32
 8001560:	2100      	movs	r1, #0
 8001562:	203c      	movs	r0, #60	; 0x3c
 8001564:	f000 fa0c 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001568:	228d      	movs	r2, #141	; 0x8d
 800156a:	2100      	movs	r1, #0
 800156c:	203c      	movs	r0, #60	; 0x3c
 800156e:	f000 fa07 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001572:	2214      	movs	r2, #20
 8001574:	2100      	movs	r1, #0
 8001576:	203c      	movs	r0, #60	; 0x3c
 8001578:	f000 fa02 	bl	8001980 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800157c:	22af      	movs	r2, #175	; 0xaf
 800157e:	2100      	movs	r1, #0
 8001580:	203c      	movs	r0, #60	; 0x3c
 8001582:	f000 f9fd 	bl	8001980 <ssd1306_I2C_Write>




	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f842 	bl	8001610 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800158c:	f000 f812 	bl	80015b4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <SSD1306_Init+0x178>)
 8001592:	2200      	movs	r2, #0
 8001594:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SSD1306_Init+0x178>)
 8001598:	2200      	movs	r2, #0
 800159a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SSD1306_Init+0x178>)
 800159e:	2201      	movs	r2, #1
 80015a0:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001f8 	.word	0x200001f8
 80015b0:	200006a8 	.word	0x200006a8

080015b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	e01d      	b.n	80015fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	3b50      	subs	r3, #80	; 0x50
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	2100      	movs	r1, #0
 80015ca:	203c      	movs	r0, #60	; 0x3c
 80015cc:	f000 f9d8 	bl	8001980 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	203c      	movs	r0, #60	; 0x3c
 80015d6:	f000 f9d3 	bl	8001980 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015da:	2210      	movs	r2, #16
 80015dc:	2100      	movs	r1, #0
 80015de:	203c      	movs	r0, #60	; 0x3c
 80015e0:	f000 f9ce 	bl	8001980 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	01db      	lsls	r3, r3, #7
 80015e8:	4a08      	ldr	r2, [pc, #32]	; (800160c <SSD1306_UpdateScreen+0x58>)
 80015ea:	441a      	add	r2, r3
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	2140      	movs	r1, #64	; 0x40
 80015f0:	203c      	movs	r0, #60	; 0x3c
 80015f2:	f000 f95f 	bl	80018b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	3301      	adds	r3, #1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b07      	cmp	r3, #7
 8001600:	d9de      	bls.n	80015c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002a8 	.word	0x200002a8

08001610 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <SSD1306_Fill+0x14>
 8001620:	2300      	movs	r3, #0
 8001622:	e000      	b.n	8001626 <SSD1306_Fill+0x16>
 8001624:	23ff      	movs	r3, #255	; 0xff
 8001626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162a:	4619      	mov	r1, r3
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <SSD1306_Fill+0x2c>)
 800162e:	f003 fc88 	bl	8004f42 <memset>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002a8 	.word	0x200002a8

08001640 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
 800164a:	460b      	mov	r3, r1
 800164c:	80bb      	strh	r3, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	70fb      	strb	r3, [r7, #3]
	if (
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	2b7f      	cmp	r3, #127	; 0x7f
 8001656:	d848      	bhi.n	80016ea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	2b3f      	cmp	r3, #63	; 0x3f
 800165c:	d845      	bhi.n	80016ea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <SSD1306_DrawPixel+0xb8>)
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d11a      	bne.n	80016b0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	88bb      	ldrh	r3, [r7, #4]
 800167e:	08db      	lsrs	r3, r3, #3
 8001680:	b298      	uxth	r0, r3
 8001682:	4603      	mov	r3, r0
 8001684:	01db      	lsls	r3, r3, #7
 8001686:	4413      	add	r3, r2
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <SSD1306_DrawPixel+0xbc>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b259      	sxtb	r1, r3
 80016a0:	88fa      	ldrh	r2, [r7, #6]
 80016a2:	4603      	mov	r3, r0
 80016a4:	01db      	lsls	r3, r3, #7
 80016a6:	4413      	add	r3, r2
 80016a8:	b2c9      	uxtb	r1, r1
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <SSD1306_DrawPixel+0xbc>)
 80016ac:	54d1      	strb	r1, [r2, r3]
 80016ae:	e01d      	b.n	80016ec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016b0:	88fa      	ldrh	r2, [r7, #6]
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	b298      	uxth	r0, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	01db      	lsls	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <SSD1306_DrawPixel+0xbc>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4013      	ands	r3, r2
 80016d8:	b259      	sxtb	r1, r3
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	4603      	mov	r3, r0
 80016de:	01db      	lsls	r3, r3, #7
 80016e0:	4413      	add	r3, r2
 80016e2:	b2c9      	uxtb	r1, r1
 80016e4:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SSD1306_DrawPixel+0xbc>)
 80016e6:	54d1      	strb	r1, [r2, r3]
 80016e8:	e000      	b.n	80016ec <SSD1306_DrawPixel+0xac>
		return;
 80016ea:	bf00      	nop
	}
}
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200006a8 	.word	0x200006a8
 80016fc:	200002a8 	.word	0x200002a8

08001700 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	460a      	mov	r2, r1
 800170a:	80fb      	strh	r3, [r7, #6]
 800170c:	4613      	mov	r3, r2
 800170e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SSD1306_GotoXY+0x28>)
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <SSD1306_GotoXY+0x28>)
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	8053      	strh	r3, [r2, #2]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	200006a8 	.word	0x200006a8

0800172c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800173c:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <SSD1306_Putc+0xfc>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
	if (
 8001748:	2b7f      	cmp	r3, #127	; 0x7f
 800174a:	dc07      	bgt.n	800175c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <SSD1306_Putc+0xfc>)
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	461a      	mov	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	785b      	ldrb	r3, [r3, #1]
 8001756:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001758:	2b3f      	cmp	r3, #63	; 0x3f
 800175a:	dd01      	ble.n	8001760 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800175c:	2300      	movs	r3, #0
 800175e:	e05e      	b.n	800181e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e04b      	b.n	80017fe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	3b20      	subs	r3, #32
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	7849      	ldrb	r1, [r1, #1]
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4619      	mov	r1, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	440b      	add	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	e030      	b.n	80017ec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <SSD1306_Putc+0xfc>)
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	b298      	uxth	r0, r3
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <SSD1306_Putc+0xfc>)
 80017a8:	885a      	ldrh	r2, [r3, #2]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	79ba      	ldrb	r2, [r7, #6]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff ff43 	bl	8001640 <SSD1306_DrawPixel>
 80017ba:	e014      	b.n	80017e6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <SSD1306_Putc+0xfc>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	b298      	uxth	r0, r3
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <SSD1306_Putc+0xfc>)
 80017ca:	885a      	ldrh	r2, [r3, #2]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	b299      	uxth	r1, r3
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	f7ff ff2d 	bl	8001640 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	3301      	adds	r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d3c8      	bcc.n	800178a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	461a      	mov	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4293      	cmp	r3, r2
 8001808:	d3ad      	bcc.n	8001766 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <SSD1306_Putc+0xfc>)
 800180c:	881a      	ldrh	r2, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4413      	add	r3, r2
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <SSD1306_Putc+0xfc>)
 800181a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800181c:	79fb      	ldrb	r3, [r7, #7]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200006a8 	.word	0x200006a8

0800182c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800183a:	e012      	b.n	8001862 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	79fa      	ldrb	r2, [r7, #7]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff71 	bl	800172c <SSD1306_Putc>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d002      	beq.n	800185c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	e008      	b.n	800186e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1e8      	bne.n	800183c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fec8 	bl	8001610 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001880:	f7ff fe98 	bl	80015b4 <SSD1306_UpdateScreen>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <ssd1306_I2C_Init+0x28>)
 8001890:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001892:	e002      	b.n	800189a <ssd1306_I2C_Init+0x12>
		p--;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
	while(p>0)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f9      	bne.n	8001894 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	0003d090 	.word	0x0003d090

080018b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b0c7      	sub	sp, #284	; 0x11c
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	4604      	mov	r4, r0
 80018bc:	4608      	mov	r0, r1
 80018be:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018c2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80018c6:	600a      	str	r2, [r1, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018d2:	4622      	mov	r2, r4
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018da:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80018de:	4602      	mov	r2, r0
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ea:	460a      	mov	r2, r1
 80018ec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018f6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018fa:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001908:	e015      	b.n	8001936 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800190a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800190e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001912:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	441a      	add	r2, r3
 800191a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800191e:	3301      	adds	r3, #1
 8001920:	7811      	ldrb	r1, [r2, #0]
 8001922:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001926:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800192a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800192c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001930:	3301      	adds	r3, #1
 8001932:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001936:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800193a:	b29b      	uxth	r3, r3
 800193c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001940:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d8df      	bhi.n	800190a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800194a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b299      	uxth	r1, r3
 8001956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800195a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	200a      	movs	r0, #10
 800196a:	9000      	str	r0, [sp, #0]
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <ssd1306_I2C_WriteMulti+0xc8>)
 800196e:	f000 fe6d 	bl	800264c <HAL_I2C_Master_Transmit>
}
 8001972:	bf00      	nop
 8001974:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001978:	46bd      	mov	sp, r7
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	200001f8 	.word	0x200001f8

08001980 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	460b      	mov	r3, r1
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	4613      	mov	r3, r2
 8001990:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	b299      	uxth	r1, r3
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	230a      	movs	r3, #10
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2302      	movs	r3, #2
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <ssd1306_I2C_Write+0x38>)
 80019aa:	f000 fe4f 	bl	800264c <HAL_I2C_Master_Transmit>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001f8 	.word	0x200001f8

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_MspInit+0x4c>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f9c4 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_kill>:

int _kill(int pid, int sig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7a:	f003 fab5 	bl	8004fe8 <__errno>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
  return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_exit>:

void _exit (int status)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa2:	e7fe      	b.n	8001aa2 <_exit+0x12>

08001aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e00a      	b.n	8001acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4601      	mov	r1, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf0      	blt.n	8001ab6 <_read+0x12>
  }

  return len;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e009      	b.n	8001b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf1      	blt.n	8001af0 <_write+0x12>
  }
  return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_close>:

int _close(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f003 fa1a 	bl	8004fe8 <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20020000 	.word	0x20020000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	200006b0 	.word	0x200006b0
 8001be8:	20000808 	.word	0x20000808

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <MX_TIM2_Init>:



/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c36:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001c3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c58:	f001 fe7c 	bl	8003954 <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c62:	f7ff fbe3 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c74:	f001 ff4d 	bl	8003b12 <HAL_TIM_ConfigClockSource>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c7e:	f7ff fbd5 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <MX_TIM2_Init+0x98>)
 8001c90:	f002 f940 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c9a:	f7ff fbc7 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000260 	.word	0x20000260

08001cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbc:	d10d      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d16:	f7ff ff69 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f003 f96b 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff fa7f 	bl	8001220 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d30:	080099b0 	.word	0x080099b0
  ldr r2, =_sbss
 8001d34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d38:	20000804 	.word	0x20000804

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_Init+0x40>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_Init+0x40>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_Init+0x40>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f931 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fe22 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f93b 	bl	800201e <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f911 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000010 	.word	0x20000010
 8001de0:	2000000c 	.word	0x2000000c

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000010 	.word	0x20000010
 8001e08:	200006b4 	.word	0x200006b4

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200006b4 	.word	0x200006b4

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000010 	.word	0x20000010

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff47 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff5c 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffb0 	bl	8001f8c <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e165      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8154 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ae 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_GPIO_Init+0x304>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_GPIO_Init+0x308>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_GPIO_Init+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x206>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x202>
 8002236:	2306      	movs	r3, #6
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223a:	2307      	movs	r3, #7
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x304>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_GPIO_Init+0x324>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a31      	ldr	r2, [pc, #196]	; (800235c <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_GPIO_Init+0x324>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_GPIO_Init+0x324>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae96 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e12b      	b.n	800262e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fed0 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2224      	movs	r2, #36	; 0x24
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002428:	f000 fe38 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 800242c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4a81      	ldr	r2, [pc, #516]	; (8002638 <HAL_I2C_Init+0x274>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d807      	bhi.n	8002448 <HAL_I2C_Init+0x84>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4a80      	ldr	r2, [pc, #512]	; (800263c <HAL_I2C_Init+0x278>)
 800243c:	4293      	cmp	r3, r2
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e006      	b.n	8002456 <HAL_I2C_Init+0x92>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a7d      	ldr	r2, [pc, #500]	; (8002640 <HAL_I2C_Init+0x27c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0e7      	b.n	800262e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a78      	ldr	r2, [pc, #480]	; (8002644 <HAL_I2C_Init+0x280>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9b      	lsrs	r3, r3, #18
 8002468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_I2C_Init+0x274>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d802      	bhi.n	8002498 <HAL_I2C_Init+0xd4>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3301      	adds	r3, #1
 8002496:	e009      	b.n	80024ac <HAL_I2C_Init+0xe8>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_I2C_Init+0x284>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	3301      	adds	r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	495c      	ldr	r1, [pc, #368]	; (8002638 <HAL_I2C_Init+0x274>)
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d819      	bhi.n	8002500 <HAL_I2C_Init+0x13c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1e59      	subs	r1, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024da:	1c59      	adds	r1, r3, #1
 80024dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024e0:	400b      	ands	r3, r1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_I2C_Init+0x138>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e59      	subs	r1, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fa:	e051      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e04f      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d111      	bne.n	800252c <HAL_I2C_Init+0x168>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1e58      	subs	r0, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e012      	b.n	8002552 <HAL_I2C_Init+0x18e>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	0099      	lsls	r1, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Init+0x196>
 8002556:	2301      	movs	r3, #1
 8002558:	e022      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10e      	bne.n	8002580 <HAL_I2C_Init+0x1bc>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e58      	subs	r0, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	440b      	add	r3, r1
 8002570:	fbb0 f3f3 	udiv	r3, r0, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257e:	e00f      	b.n	80025a0 <HAL_I2C_Init+0x1dc>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	0099      	lsls	r1, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	fbb0 f3f3 	udiv	r3, r0, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	6809      	ldr	r1, [r1, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6911      	ldr	r1, [r2, #16]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	000186a0 	.word	0x000186a0
 800263c:	001e847f 	.word	0x001e847f
 8002640:	003d08ff 	.word	0x003d08ff
 8002644:	431bde83 	.word	0x431bde83
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	460b      	mov	r3, r1
 800265a:	817b      	strh	r3, [r7, #10]
 800265c:	4613      	mov	r3, r2
 800265e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff fbd4 	bl	8001e0c <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b20      	cmp	r3, #32
 8002670:	f040 80e0 	bne.w	8002834 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2319      	movs	r3, #25
 800267a:	2201      	movs	r2, #1
 800267c:	4970      	ldr	r1, [pc, #448]	; (8002840 <HAL_I2C_Master_Transmit+0x1f4>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa92 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	e0d3      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2C_Master_Transmit+0x50>
 8002698:	2302      	movs	r3, #2
 800269a:	e0cc      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d007      	beq.n	80026c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2221      	movs	r2, #33	; 0x21
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2210      	movs	r2, #16
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	893a      	ldrh	r2, [r7, #8]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a50      	ldr	r2, [pc, #320]	; (8002844 <HAL_I2C_Master_Transmit+0x1f8>)
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f9ca 	bl	8002aa4 <I2C_MasterRequestWrite>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e08d      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002730:	e066      	b.n	8002800 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fb0c 	bl	8002d54 <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d107      	bne.n	800275a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d11b      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x188>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	6a39      	ldr	r1, [r7, #32]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fafc 	bl	8002dd6 <I2C_WaitOnBTFFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d107      	bne.n	80027fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e01a      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	d194      	bne.n	8002732 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	00100002 	.word	0x00100002
 8002844:	ffff0000 	.word	0xffff0000

08002848 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff fad8 	bl	8001e0c <HAL_GetTick>
 800285c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 8111 	bne.w	8002a92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2319      	movs	r3, #25
 8002876:	2201      	movs	r2, #1
 8002878:	4988      	ldr	r1, [pc, #544]	; (8002a9c <HAL_I2C_IsDeviceReady+0x254>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f994 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	e104      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_I2C_IsDeviceReady+0x50>
 8002894:	2302      	movs	r3, #2
 8002896:	e0fd      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d007      	beq.n	80028be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2224      	movs	r2, #36	; 0x24
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a70      	ldr	r2, [pc, #448]	; (8002aa0 <HAL_I2C_IsDeviceReady+0x258>)
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f952 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002918:	d103      	bne.n	8002922 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0b6      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002934:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff fa69 	bl	8001e0c <HAL_GetTick>
 800293a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b02      	cmp	r3, #2
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800296a:	e025      	b.n	80029b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7ff fa4e 	bl	8001e0c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d302      	bcc.n	8002982 <HAL_I2C_IsDeviceReady+0x13a>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	22a0      	movs	r2, #160	; 0xa0
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2ba0      	cmp	r3, #160	; 0xa0
 80029c2:	d005      	beq.n	80029d0 <HAL_I2C_IsDeviceReady+0x188>
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_I2C_IsDeviceReady+0x188>
 80029ca:	7dbb      	ldrb	r3, [r7, #22]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0cd      	beq.n	800296c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d129      	bne.n	8002a3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	4921      	ldr	r1, [pc, #132]	; (8002a9c <HAL_I2C_IsDeviceReady+0x254>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f8c6 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e036      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e02c      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2319      	movs	r3, #25
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	490f      	ldr	r1, [pc, #60]	; (8002a9c <HAL_I2C_IsDeviceReady+0x254>)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f8a2 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e012      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f4ff af32 	bcc.w	80028e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00100002 	.word	0x00100002
 8002aa0:	ffff0000 	.word	0xffff0000

08002aa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d006      	beq.n	8002ace <I2C_MasterRequestWrite+0x2a>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d003      	beq.n	8002ace <I2C_MasterRequestWrite+0x2a>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002acc:	d108      	bne.n	8002ae0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e00b      	b.n	8002af8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	2b12      	cmp	r3, #18
 8002ae6:	d107      	bne.n	8002af8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f84f 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d103      	bne.n	8002b28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e035      	b.n	8002b98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b34:	d108      	bne.n	8002b48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e01b      	b.n	8002b80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b48:	897b      	ldrh	r3, [r7, #10]
 8002b4a:	11db      	asrs	r3, r3, #7
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0306 	and.w	r3, r3, #6
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f063 030f 	orn	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <I2C_MasterRequestWrite+0xfc>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f875 	bl	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e010      	b.n	8002b98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <I2C_MasterRequestWrite+0x100>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f865 	bl	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	00010008 	.word	0x00010008
 8002ba4:	00010002 	.word	0x00010002

08002ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb8:	e025      	b.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d021      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7ff f923 	bl	8001e0c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e023      	b.n	8002c4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10d      	bne.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	e00c      	b.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d0b6      	beq.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c64:	e051      	b.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c74:	d123      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0204 	orr.w	r2, r3, #4
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e046      	b.n	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d021      	beq.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7ff f8a1 	bl	8001e0c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e020      	b.n	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d10c      	bne.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e00b      	b.n	8002d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d18d      	bne.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d60:	e02d      	b.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f878 	bl	8002e58 <I2C_IsAcknowledgeFailed>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02d      	b.n	8002dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d021      	beq.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7ff f847 	bl	8001e0c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	d1ca      	bne.n	8002d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002de2:	e02d      	b.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f837 	bl	8002e58 <I2C_IsAcknowledgeFailed>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e02d      	b.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d021      	beq.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfc:	f7ff f806 	bl	8001e0c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d302      	bcc.n	8002e12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d116      	bne.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e007      	b.n	8002e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d1ca      	bne.n	8002de4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d11b      	bne.n	8002ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cc      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d90c      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d044      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e067      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe ff30 	bl	8001e0c <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7fe ff2c 	bl	8001e0c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 020c 	and.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d20c      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f841 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fe90 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00
 8003074:	40023800 	.word	0x40023800
 8003078:	08009560 	.word	0x08009560
 800307c:	20000008 	.word	0x20000008
 8003080:	2000000c 	.word	0x2000000c

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000008 	.word	0x20000008

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08009570 	.word	0x08009570

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b0a6      	sub	sp, #152	; 0x98
 80030ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ea:	4bc8      	ldr	r3, [pc, #800]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	f200 817e 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x330>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003135 	.word	0x08003135
 8003104:	080033f5 	.word	0x080033f5
 8003108:	080033f5 	.word	0x080033f5
 800310c:	080033f5 	.word	0x080033f5
 8003110:	0800313d 	.word	0x0800313d
 8003114:	080033f5 	.word	0x080033f5
 8003118:	080033f5 	.word	0x080033f5
 800311c:	080033f5 	.word	0x080033f5
 8003120:	08003145 	.word	0x08003145
 8003124:	080033f5 	.word	0x080033f5
 8003128:	080033f5 	.word	0x080033f5
 800312c:	080033f5 	.word	0x080033f5
 8003130:	080032af 	.word	0x080032af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4bb6      	ldr	r3, [pc, #728]	; (8003410 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800313a:	e15f      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313c:	4bb5      	ldr	r3, [pc, #724]	; (8003414 <HAL_RCC_GetSysClockFreq+0x350>)
 800313e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003142:	e15b      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003144:	4bb1      	ldr	r3, [pc, #708]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003150:	4bae      	ldr	r3, [pc, #696]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d031      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4bab      	ldr	r3, [pc, #684]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	2200      	movs	r2, #0
 8003164:	66bb      	str	r3, [r7, #104]	; 0x68
 8003166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	663b      	str	r3, [r7, #96]	; 0x60
 8003170:	2300      	movs	r3, #0
 8003172:	667b      	str	r3, [r7, #100]	; 0x64
 8003174:	4ba7      	ldr	r3, [pc, #668]	; (8003414 <HAL_RCC_GetSysClockFreq+0x350>)
 8003176:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800317a:	462a      	mov	r2, r5
 800317c:	fb03 f202 	mul.w	r2, r3, r2
 8003180:	2300      	movs	r3, #0
 8003182:	4621      	mov	r1, r4
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	4aa2      	ldr	r2, [pc, #648]	; (8003414 <HAL_RCC_GetSysClockFreq+0x350>)
 800318c:	4621      	mov	r1, r4
 800318e:	fba1 1202 	umull	r1, r2, r1, r2
 8003192:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003194:	460a      	mov	r2, r1
 8003196:	67ba      	str	r2, [r7, #120]	; 0x78
 8003198:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800319a:	4413      	add	r3, r2
 800319c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800319e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a2:	2200      	movs	r2, #0
 80031a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031b0:	f7fd fd8a 	bl	8000cc8 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031be:	e064      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	2200      	movs	r2, #0
 80031c8:	653b      	str	r3, [r7, #80]	; 0x50
 80031ca:	657a      	str	r2, [r7, #84]	; 0x54
 80031cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d4:	2300      	movs	r3, #0
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80031dc:	4622      	mov	r2, r4
 80031de:	462b      	mov	r3, r5
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	0159      	lsls	r1, r3, #5
 80031ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ee:	0150      	lsls	r0, r2, #5
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4621      	mov	r1, r4
 80031f6:	1a51      	subs	r1, r2, r1
 80031f8:	6139      	str	r1, [r7, #16]
 80031fa:	4629      	mov	r1, r5
 80031fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800320e:	4659      	mov	r1, fp
 8003210:	018b      	lsls	r3, r1, #6
 8003212:	4651      	mov	r1, sl
 8003214:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003218:	4651      	mov	r1, sl
 800321a:	018a      	lsls	r2, r1, #6
 800321c:	4651      	mov	r1, sl
 800321e:	ebb2 0801 	subs.w	r8, r2, r1
 8003222:	4659      	mov	r1, fp
 8003224:	eb63 0901 	sbc.w	r9, r3, r1
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003234:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003238:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323c:	4690      	mov	r8, r2
 800323e:	4699      	mov	r9, r3
 8003240:	4623      	mov	r3, r4
 8003242:	eb18 0303 	adds.w	r3, r8, r3
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	462b      	mov	r3, r5
 800324a:	eb49 0303 	adc.w	r3, r9, r3
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800325c:	4629      	mov	r1, r5
 800325e:	028b      	lsls	r3, r1, #10
 8003260:	4621      	mov	r1, r4
 8003262:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003266:	4621      	mov	r1, r4
 8003268:	028a      	lsls	r2, r1, #10
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003272:	2200      	movs	r2, #0
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
 8003276:	647a      	str	r2, [r7, #68]	; 0x44
 8003278:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800327c:	f7fd fd24 	bl	8000cc8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800328a:	4b60      	ldr	r3, [pc, #384]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	3301      	adds	r3, #1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800329c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032ac:	e0a6      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ae:	4b57      	ldr	r3, [pc, #348]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ba:	4b54      	ldr	r3, [pc, #336]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02a      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032d8:	2100      	movs	r1, #0
 80032da:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <HAL_RCC_GetSysClockFreq+0x350>)
 80032dc:	fb03 f201 	mul.w	r2, r3, r1
 80032e0:	2300      	movs	r3, #0
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <HAL_RCC_GetSysClockFreq+0x350>)
 80032ea:	fba0 1202 	umull	r1, r2, r0, r2
 80032ee:	677a      	str	r2, [r7, #116]	; 0x74
 80032f0:	460a      	mov	r2, r1
 80032f2:	673a      	str	r2, [r7, #112]	; 0x70
 80032f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032f6:	4413      	add	r3, r2
 80032f8:	677b      	str	r3, [r7, #116]	; 0x74
 80032fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032fe:	2200      	movs	r2, #0
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
 8003302:	637a      	str	r2, [r7, #52]	; 0x34
 8003304:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003308:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800330c:	f7fd fcdc 	bl	8000cc8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800331a:	e05b      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	2200      	movs	r2, #0
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
 8003326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	f04f 0000 	mov.w	r0, #0
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	0159      	lsls	r1, r3, #5
 8003346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800334a:	0150      	lsls	r0, r2, #5
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4641      	mov	r1, r8
 8003352:	ebb2 0a01 	subs.w	sl, r2, r1
 8003356:	4649      	mov	r1, r9
 8003358:	eb63 0b01 	sbc.w	fp, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800336c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003370:	ebb2 040a 	subs.w	r4, r2, sl
 8003374:	eb63 050b 	sbc.w	r5, r3, fp
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	00eb      	lsls	r3, r5, #3
 8003382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003386:	00e2      	lsls	r2, r4, #3
 8003388:	4614      	mov	r4, r2
 800338a:	461d      	mov	r5, r3
 800338c:	4643      	mov	r3, r8
 800338e:	18e3      	adds	r3, r4, r3
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	464b      	mov	r3, r9
 8003394:	eb45 0303 	adc.w	r3, r5, r3
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a6:	4629      	mov	r1, r5
 80033a8:	028b      	lsls	r3, r1, #10
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b0:	4621      	mov	r1, r4
 80033b2:	028a      	lsls	r2, r1, #10
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033bc:	2200      	movs	r2, #0
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	61fa      	str	r2, [r7, #28]
 80033c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c6:	f7fd fc7f 	bl	8000cc8 <__aeabi_uldivmod>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4613      	mov	r3, r2
 80033d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_GetSysClockFreq+0x348>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	0f1b      	lsrs	r3, r3, #28
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80033e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033f2:	e003      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_GetSysClockFreq+0x34c>)
 80033f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003400:	4618      	mov	r0, r3
 8003402:	3798      	adds	r7, #152	; 0x98
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	00f42400 	.word	0x00f42400
 8003414:	017d7840 	.word	0x017d7840

08003418 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e28d      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8083 	beq.w	800353e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003438:	4b94      	ldr	r3, [pc, #592]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b04      	cmp	r3, #4
 8003442:	d019      	beq.n	8003478 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003444:	4b91      	ldr	r3, [pc, #580]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800344c:	2b08      	cmp	r3, #8
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003450:	4b8e      	ldr	r3, [pc, #568]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800345c:	d00c      	beq.n	8003478 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4b8b      	ldr	r3, [pc, #556]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d112      	bne.n	8003490 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b84      	ldr	r3, [pc, #528]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x124>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e25a      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x90>
 800349a:	4b7c      	ldr	r3, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7b      	ldr	r2, [pc, #492]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0xcc>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0xb4>
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a75      	ldr	r2, [pc, #468]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a72      	ldr	r2, [pc, #456]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0xcc>
 80034cc:	4b6f      	ldr	r3, [pc, #444]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a6e      	ldr	r2, [pc, #440]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b6c      	ldr	r3, [pc, #432]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6b      	ldr	r2, [pc, #428]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe fc8e 	bl	8001e0c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fe fc8a 	bl	8001e0c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e21f      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	4b61      	ldr	r3, [pc, #388]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0xdc>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe fc7a 	bl	8001e0c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe fc76 	bl	8001e0c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e20b      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	4b57      	ldr	r3, [pc, #348]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x104>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d06f      	beq.n	800362a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800354a:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003556:	4b4d      	ldr	r3, [pc, #308]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d105      	bne.n	800356e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003562:	4b4a      	ldr	r3, [pc, #296]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d11c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357a:	4b44      	ldr	r3, [pc, #272]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d116      	bne.n	80035b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_RCC_OscConfig+0x186>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e1d3      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4937      	ldr	r1, [pc, #220]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	e03a      	b.n	800362a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x278>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fe fc23 	bl	8001e0c <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fe fc1f 	bl	8001e0c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1b4      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4925      	ldr	r1, [pc, #148]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
 80035fc:	e015      	b.n	800362a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCC_OscConfig+0x278>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe fc02 	bl	8001e0c <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360c:	f7fe fbfe 	bl	8001e0c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e193      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d036      	beq.n	80036a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_RCC_OscConfig+0x27c>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fbe2 	bl	8001e0c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364c:	f7fe fbde 	bl	8001e0c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e173      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x234>
 800366a:	e01b      	b.n	80036a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_OscConfig+0x27c>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fe fbcb 	bl	8001e0c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	e00e      	b.n	8003698 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367a:	f7fe fbc7 	bl	8001e0c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d907      	bls.n	8003698 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e15c      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
 800368c:	40023800 	.word	0x40023800
 8003690:	42470000 	.word	0x42470000
 8003694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ea      	bne.n	800367a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8097 	beq.w	80037e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b6:	4b83      	ldr	r3, [pc, #524]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	4b7f      	ldr	r3, [pc, #508]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a7e      	ldr	r2, [pc, #504]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b79      	ldr	r3, [pc, #484]	; (80038c8 <HAL_RCC_OscConfig+0x4b0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d118      	bne.n	8003720 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCC_OscConfig+0x4b0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a75      	ldr	r2, [pc, #468]	; (80038c8 <HAL_RCC_OscConfig+0x4b0>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fa:	f7fe fb87 	bl	8001e0c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fe fb83 	bl	8001e0c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e118      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <HAL_RCC_OscConfig+0x4b0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x31e>
 8003728:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	e01c      	b.n	8003770 <HAL_RCC_OscConfig+0x358>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b05      	cmp	r3, #5
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0x340>
 800373e:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a60      	ldr	r2, [pc, #384]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
 800374a:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	4a5d      	ldr	r2, [pc, #372]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0x358>
 8003758:	4b5a      	ldr	r3, [pc, #360]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a59      	ldr	r2, [pc, #356]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	4b57      	ldr	r3, [pc, #348]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a56      	ldr	r2, [pc, #344]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	f023 0304 	bic.w	r3, r3, #4
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fe fb48 	bl	8001e0c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fe fb44 	bl	8001e0c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0d7      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ee      	beq.n	8003780 <HAL_RCC_OscConfig+0x368>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe fb32 	bl	8001e0c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe fb2e 	bl	8001e0c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0c1      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ee      	bne.n	80037ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d4:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	4a3a      	ldr	r2, [pc, #232]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80ad 	beq.w	8003944 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ea:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d060      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d145      	bne.n	800388a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCC_OscConfig+0x4b4>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe fb02 	bl	8001e0c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380c:	f7fe fafe 	bl	8001e0c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e093      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	071b      	lsls	r3, r3, #28
 8003856:	491b      	ldr	r1, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x4b4>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003862:	f7fe fad3 	bl	8001e0c <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386a:	f7fe facf 	bl	8001e0c <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e064      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f0      	beq.n	800386a <HAL_RCC_OscConfig+0x452>
 8003888:	e05c      	b.n	8003944 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCC_OscConfig+0x4b4>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe fabc 	bl	8001e0c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe fab8 	bl	8001e0c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04d      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x480>
 80038b6:	e045      	b.n	8003944 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e040      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40007000 	.word	0x40007000
 80038cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <HAL_RCC_OscConfig+0x538>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d030      	beq.n	8003940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d129      	bne.n	8003940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d122      	bne.n	8003940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003908:	4293      	cmp	r3, r2
 800390a:	d119      	bne.n	8003940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	3b01      	subs	r3, #1
 800391a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d10f      	bne.n	8003940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e041      	b.n	80039ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f996 	bl	8001cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 f984 	bl	8003ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d001      	beq.n	8003a0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e046      	b.n	8003a9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <HAL_TIM_Base_Start+0xb4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d01d      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_TIM_Base_Start+0xb8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_TIM_Base_Start+0xbc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_TIM_Base_Start+0xc0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_TIM_Base_Start+0xc4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_TIM_Base_Start+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_Base_Start+0x70>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_TIM_Base_Start+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d111      	bne.n	8003a88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d010      	beq.n	8003a98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	e007      	b.n	8003a98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40010400 	.word	0x40010400
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40001800 	.word	0x40001800

08003ac4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_TIM_Base_Stop+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	f240 4344 	movw	r3, #1092	; 0x444
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d107      	bne.n	8003afc <HAL_TIM_Base_Stop+0x38>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_ConfigClockSource+0x1c>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0b4      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x186>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d03e      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xd4>
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	f200 8087 	bhi.w	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	f000 8086 	beq.w	8003c84 <HAL_TIM_ConfigClockSource+0x172>
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	d87f      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b7e:	2b70      	cmp	r3, #112	; 0x70
 8003b80:	d01a      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xa6>
 8003b82:	2b70      	cmp	r3, #112	; 0x70
 8003b84:	d87b      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b86:	2b60      	cmp	r3, #96	; 0x60
 8003b88:	d050      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x11a>
 8003b8a:	2b60      	cmp	r3, #96	; 0x60
 8003b8c:	d877      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b8e:	2b50      	cmp	r3, #80	; 0x50
 8003b90:	d03c      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0xfa>
 8003b92:	2b50      	cmp	r3, #80	; 0x50
 8003b94:	d873      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d058      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x13a>
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d86f      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d064      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d86b      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d060      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d867      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d05c      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d05a      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003bb6:	e062      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f000 f984 	bl	8003ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e04f      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f000 f96d 	bl	8003ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c08:	609a      	str	r2, [r3, #8]
      break;
 8003c0a:	e03c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 f8e1 	bl	8003de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2150      	movs	r1, #80	; 0x50
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f93a 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e02c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f000 f900 	bl	8003e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2160      	movs	r1, #96	; 0x60
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f92a 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e01c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f000 f8c1 	bl	8003de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	; 0x40
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f91a 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c6a:	e00c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 f911 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e003      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      break;
 8003c82:	e000      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a40      	ldr	r2, [pc, #256]	; (8003db4 <TIM_Base_SetConfig+0x114>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbe:	d00f      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <TIM_Base_SetConfig+0x118>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <TIM_Base_SetConfig+0x11c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3b      	ldr	r2, [pc, #236]	; (8003dc0 <TIM_Base_SetConfig+0x120>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3a      	ldr	r2, [pc, #232]	; (8003dc4 <TIM_Base_SetConfig+0x124>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d108      	bne.n	8003cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <TIM_Base_SetConfig+0x114>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02b      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d027      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2c      	ldr	r2, [pc, #176]	; (8003db8 <TIM_Base_SetConfig+0x118>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d023      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2b      	ldr	r2, [pc, #172]	; (8003dbc <TIM_Base_SetConfig+0x11c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01f      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <TIM_Base_SetConfig+0x120>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01b      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <TIM_Base_SetConfig+0x124>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d017      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <TIM_Base_SetConfig+0x128>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <TIM_Base_SetConfig+0x12c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00f      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <TIM_Base_SetConfig+0x130>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <TIM_Base_SetConfig+0x134>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <TIM_Base_SetConfig+0x138>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <TIM_Base_SetConfig+0x13c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <TIM_Base_SetConfig+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0xf8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <TIM_Base_SetConfig+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d103      	bne.n	8003da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	615a      	str	r2, [r3, #20]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	40010400 	.word	0x40010400
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800
 8003dd4:	40001800 	.word	0x40001800
 8003dd8:	40001c00 	.word	0x40001c00
 8003ddc:	40002000 	.word	0x40002000

08003de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 030a 	bic.w	r3, r3, #10
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b087      	sub	sp, #28
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0210 	bic.w	r2, r3, #16
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f043 0307 	orr.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e05a      	b.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d01d      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40001800 	.word	0x40001800

0800400c <__cvt>:
 800400c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	ec55 4b10 	vmov	r4, r5, d0
 8004014:	2d00      	cmp	r5, #0
 8004016:	460e      	mov	r6, r1
 8004018:	4619      	mov	r1, r3
 800401a:	462b      	mov	r3, r5
 800401c:	bfbb      	ittet	lt
 800401e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004022:	461d      	movlt	r5, r3
 8004024:	2300      	movge	r3, #0
 8004026:	232d      	movlt	r3, #45	; 0x2d
 8004028:	700b      	strb	r3, [r1, #0]
 800402a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800402c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004030:	4691      	mov	r9, r2
 8004032:	f023 0820 	bic.w	r8, r3, #32
 8004036:	bfbc      	itt	lt
 8004038:	4622      	movlt	r2, r4
 800403a:	4614      	movlt	r4, r2
 800403c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004040:	d005      	beq.n	800404e <__cvt+0x42>
 8004042:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004046:	d100      	bne.n	800404a <__cvt+0x3e>
 8004048:	3601      	adds	r6, #1
 800404a:	2102      	movs	r1, #2
 800404c:	e000      	b.n	8004050 <__cvt+0x44>
 800404e:	2103      	movs	r1, #3
 8004050:	ab03      	add	r3, sp, #12
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	ab02      	add	r3, sp, #8
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	ec45 4b10 	vmov	d0, r4, r5
 800405c:	4653      	mov	r3, sl
 800405e:	4632      	mov	r2, r6
 8004060:	f001 f87e 	bl	8005160 <_dtoa_r>
 8004064:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004068:	4607      	mov	r7, r0
 800406a:	d102      	bne.n	8004072 <__cvt+0x66>
 800406c:	f019 0f01 	tst.w	r9, #1
 8004070:	d022      	beq.n	80040b8 <__cvt+0xac>
 8004072:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004076:	eb07 0906 	add.w	r9, r7, r6
 800407a:	d110      	bne.n	800409e <__cvt+0x92>
 800407c:	783b      	ldrb	r3, [r7, #0]
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d10a      	bne.n	8004098 <__cvt+0x8c>
 8004082:	2200      	movs	r2, #0
 8004084:	2300      	movs	r3, #0
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc fd3d 	bl	8000b08 <__aeabi_dcmpeq>
 800408e:	b918      	cbnz	r0, 8004098 <__cvt+0x8c>
 8004090:	f1c6 0601 	rsb	r6, r6, #1
 8004094:	f8ca 6000 	str.w	r6, [sl]
 8004098:	f8da 3000 	ldr.w	r3, [sl]
 800409c:	4499      	add	r9, r3
 800409e:	2200      	movs	r2, #0
 80040a0:	2300      	movs	r3, #0
 80040a2:	4620      	mov	r0, r4
 80040a4:	4629      	mov	r1, r5
 80040a6:	f7fc fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80040aa:	b108      	cbz	r0, 80040b0 <__cvt+0xa4>
 80040ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80040b0:	2230      	movs	r2, #48	; 0x30
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	454b      	cmp	r3, r9
 80040b6:	d307      	bcc.n	80040c8 <__cvt+0xbc>
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040bc:	1bdb      	subs	r3, r3, r7
 80040be:	4638      	mov	r0, r7
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	b004      	add	sp, #16
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	1c59      	adds	r1, r3, #1
 80040ca:	9103      	str	r1, [sp, #12]
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e7f0      	b.n	80040b2 <__cvt+0xa6>

080040d0 <__exponent>:
 80040d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d2:	4603      	mov	r3, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	bfb8      	it	lt
 80040d8:	4249      	neglt	r1, r1
 80040da:	f803 2b02 	strb.w	r2, [r3], #2
 80040de:	bfb4      	ite	lt
 80040e0:	222d      	movlt	r2, #45	; 0x2d
 80040e2:	222b      	movge	r2, #43	; 0x2b
 80040e4:	2909      	cmp	r1, #9
 80040e6:	7042      	strb	r2, [r0, #1]
 80040e8:	dd2a      	ble.n	8004140 <__exponent+0x70>
 80040ea:	f10d 0207 	add.w	r2, sp, #7
 80040ee:	4617      	mov	r7, r2
 80040f0:	260a      	movs	r6, #10
 80040f2:	4694      	mov	ip, r2
 80040f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80040f8:	fb06 1415 	mls	r4, r6, r5, r1
 80040fc:	3430      	adds	r4, #48	; 0x30
 80040fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004102:	460c      	mov	r4, r1
 8004104:	2c63      	cmp	r4, #99	; 0x63
 8004106:	f102 32ff 	add.w	r2, r2, #4294967295
 800410a:	4629      	mov	r1, r5
 800410c:	dcf1      	bgt.n	80040f2 <__exponent+0x22>
 800410e:	3130      	adds	r1, #48	; 0x30
 8004110:	f1ac 0402 	sub.w	r4, ip, #2
 8004114:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004118:	1c41      	adds	r1, r0, #1
 800411a:	4622      	mov	r2, r4
 800411c:	42ba      	cmp	r2, r7
 800411e:	d30a      	bcc.n	8004136 <__exponent+0x66>
 8004120:	f10d 0209 	add.w	r2, sp, #9
 8004124:	eba2 020c 	sub.w	r2, r2, ip
 8004128:	42bc      	cmp	r4, r7
 800412a:	bf88      	it	hi
 800412c:	2200      	movhi	r2, #0
 800412e:	4413      	add	r3, r2
 8004130:	1a18      	subs	r0, r3, r0
 8004132:	b003      	add	sp, #12
 8004134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004136:	f812 5b01 	ldrb.w	r5, [r2], #1
 800413a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800413e:	e7ed      	b.n	800411c <__exponent+0x4c>
 8004140:	2330      	movs	r3, #48	; 0x30
 8004142:	3130      	adds	r1, #48	; 0x30
 8004144:	7083      	strb	r3, [r0, #2]
 8004146:	70c1      	strb	r1, [r0, #3]
 8004148:	1d03      	adds	r3, r0, #4
 800414a:	e7f1      	b.n	8004130 <__exponent+0x60>

0800414c <_printf_float>:
 800414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	ed2d 8b02 	vpush	{d8}
 8004154:	b08d      	sub	sp, #52	; 0x34
 8004156:	460c      	mov	r4, r1
 8004158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800415c:	4616      	mov	r6, r2
 800415e:	461f      	mov	r7, r3
 8004160:	4605      	mov	r5, r0
 8004162:	f000 fef7 	bl	8004f54 <_localeconv_r>
 8004166:	f8d0 a000 	ldr.w	sl, [r0]
 800416a:	4650      	mov	r0, sl
 800416c:	f7fc f8a0 	bl	80002b0 <strlen>
 8004170:	2300      	movs	r3, #0
 8004172:	930a      	str	r3, [sp, #40]	; 0x28
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	f8d8 3000 	ldr.w	r3, [r8]
 800417c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004180:	3307      	adds	r3, #7
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	f103 0208 	add.w	r2, r3, #8
 800418a:	f8c8 2000 	str.w	r2, [r8]
 800418e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004192:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004196:	9307      	str	r3, [sp, #28]
 8004198:	f8cd 8018 	str.w	r8, [sp, #24]
 800419c:	ee08 0a10 	vmov	s16, r0
 80041a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80041a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a8:	4b9e      	ldr	r3, [pc, #632]	; (8004424 <_printf_float+0x2d8>)
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	f7fc fcdd 	bl	8000b6c <__aeabi_dcmpun>
 80041b2:	bb88      	cbnz	r0, 8004218 <_printf_float+0xcc>
 80041b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041b8:	4b9a      	ldr	r3, [pc, #616]	; (8004424 <_printf_float+0x2d8>)
 80041ba:	f04f 32ff 	mov.w	r2, #4294967295
 80041be:	f7fc fcb7 	bl	8000b30 <__aeabi_dcmple>
 80041c2:	bb48      	cbnz	r0, 8004218 <_printf_float+0xcc>
 80041c4:	2200      	movs	r2, #0
 80041c6:	2300      	movs	r3, #0
 80041c8:	4640      	mov	r0, r8
 80041ca:	4649      	mov	r1, r9
 80041cc:	f7fc fca6 	bl	8000b1c <__aeabi_dcmplt>
 80041d0:	b110      	cbz	r0, 80041d8 <_printf_float+0x8c>
 80041d2:	232d      	movs	r3, #45	; 0x2d
 80041d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d8:	4a93      	ldr	r2, [pc, #588]	; (8004428 <_printf_float+0x2dc>)
 80041da:	4b94      	ldr	r3, [pc, #592]	; (800442c <_printf_float+0x2e0>)
 80041dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80041e0:	bf94      	ite	ls
 80041e2:	4690      	movls	r8, r2
 80041e4:	4698      	movhi	r8, r3
 80041e6:	2303      	movs	r3, #3
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	9b05      	ldr	r3, [sp, #20]
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	f04f 0900 	mov.w	r9, #0
 80041f6:	9700      	str	r7, [sp, #0]
 80041f8:	4633      	mov	r3, r6
 80041fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80041fc:	4621      	mov	r1, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 f9da 	bl	80045b8 <_printf_common>
 8004204:	3001      	adds	r0, #1
 8004206:	f040 8090 	bne.w	800432a <_printf_float+0x1de>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295
 800420e:	b00d      	add	sp, #52	; 0x34
 8004210:	ecbd 8b02 	vpop	{d8}
 8004214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	4640      	mov	r0, r8
 800421e:	4649      	mov	r1, r9
 8004220:	f7fc fca4 	bl	8000b6c <__aeabi_dcmpun>
 8004224:	b140      	cbz	r0, 8004238 <_printf_float+0xec>
 8004226:	464b      	mov	r3, r9
 8004228:	2b00      	cmp	r3, #0
 800422a:	bfbc      	itt	lt
 800422c:	232d      	movlt	r3, #45	; 0x2d
 800422e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004232:	4a7f      	ldr	r2, [pc, #508]	; (8004430 <_printf_float+0x2e4>)
 8004234:	4b7f      	ldr	r3, [pc, #508]	; (8004434 <_printf_float+0x2e8>)
 8004236:	e7d1      	b.n	80041dc <_printf_float+0x90>
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800423e:	9206      	str	r2, [sp, #24]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	d13f      	bne.n	80042c4 <_printf_float+0x178>
 8004244:	2306      	movs	r3, #6
 8004246:	6063      	str	r3, [r4, #4]
 8004248:	9b05      	ldr	r3, [sp, #20]
 800424a:	6861      	ldr	r1, [r4, #4]
 800424c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004250:	2300      	movs	r3, #0
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	ab0a      	add	r3, sp, #40	; 0x28
 8004256:	e9cd b301 	strd	fp, r3, [sp, #4]
 800425a:	ab09      	add	r3, sp, #36	; 0x24
 800425c:	ec49 8b10 	vmov	d0, r8, r9
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	6022      	str	r2, [r4, #0]
 8004264:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004268:	4628      	mov	r0, r5
 800426a:	f7ff fecf 	bl	800400c <__cvt>
 800426e:	9b06      	ldr	r3, [sp, #24]
 8004270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004272:	2b47      	cmp	r3, #71	; 0x47
 8004274:	4680      	mov	r8, r0
 8004276:	d108      	bne.n	800428a <_printf_float+0x13e>
 8004278:	1cc8      	adds	r0, r1, #3
 800427a:	db02      	blt.n	8004282 <_printf_float+0x136>
 800427c:	6863      	ldr	r3, [r4, #4]
 800427e:	4299      	cmp	r1, r3
 8004280:	dd41      	ble.n	8004306 <_printf_float+0x1ba>
 8004282:	f1ab 0302 	sub.w	r3, fp, #2
 8004286:	fa5f fb83 	uxtb.w	fp, r3
 800428a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800428e:	d820      	bhi.n	80042d2 <_printf_float+0x186>
 8004290:	3901      	subs	r1, #1
 8004292:	465a      	mov	r2, fp
 8004294:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004298:	9109      	str	r1, [sp, #36]	; 0x24
 800429a:	f7ff ff19 	bl	80040d0 <__exponent>
 800429e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042a0:	1813      	adds	r3, r2, r0
 80042a2:	2a01      	cmp	r2, #1
 80042a4:	4681      	mov	r9, r0
 80042a6:	6123      	str	r3, [r4, #16]
 80042a8:	dc02      	bgt.n	80042b0 <_printf_float+0x164>
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	07d2      	lsls	r2, r2, #31
 80042ae:	d501      	bpl.n	80042b4 <_printf_float+0x168>
 80042b0:	3301      	adds	r3, #1
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d09c      	beq.n	80041f6 <_printf_float+0xaa>
 80042bc:	232d      	movs	r3, #45	; 0x2d
 80042be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c2:	e798      	b.n	80041f6 <_printf_float+0xaa>
 80042c4:	9a06      	ldr	r2, [sp, #24]
 80042c6:	2a47      	cmp	r2, #71	; 0x47
 80042c8:	d1be      	bne.n	8004248 <_printf_float+0xfc>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1bc      	bne.n	8004248 <_printf_float+0xfc>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e7b9      	b.n	8004246 <_printf_float+0xfa>
 80042d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80042d6:	d118      	bne.n	800430a <_printf_float+0x1be>
 80042d8:	2900      	cmp	r1, #0
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	dd0b      	ble.n	80042f6 <_printf_float+0x1aa>
 80042de:	6121      	str	r1, [r4, #16]
 80042e0:	b913      	cbnz	r3, 80042e8 <_printf_float+0x19c>
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	07d0      	lsls	r0, r2, #31
 80042e6:	d502      	bpl.n	80042ee <_printf_float+0x1a2>
 80042e8:	3301      	adds	r3, #1
 80042ea:	440b      	add	r3, r1
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80042f0:	f04f 0900 	mov.w	r9, #0
 80042f4:	e7de      	b.n	80042b4 <_printf_float+0x168>
 80042f6:	b913      	cbnz	r3, 80042fe <_printf_float+0x1b2>
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	07d2      	lsls	r2, r2, #31
 80042fc:	d501      	bpl.n	8004302 <_printf_float+0x1b6>
 80042fe:	3302      	adds	r3, #2
 8004300:	e7f4      	b.n	80042ec <_printf_float+0x1a0>
 8004302:	2301      	movs	r3, #1
 8004304:	e7f2      	b.n	80042ec <_printf_float+0x1a0>
 8004306:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800430a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800430c:	4299      	cmp	r1, r3
 800430e:	db05      	blt.n	800431c <_printf_float+0x1d0>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	6121      	str	r1, [r4, #16]
 8004314:	07d8      	lsls	r0, r3, #31
 8004316:	d5ea      	bpl.n	80042ee <_printf_float+0x1a2>
 8004318:	1c4b      	adds	r3, r1, #1
 800431a:	e7e7      	b.n	80042ec <_printf_float+0x1a0>
 800431c:	2900      	cmp	r1, #0
 800431e:	bfd4      	ite	le
 8004320:	f1c1 0202 	rsble	r2, r1, #2
 8004324:	2201      	movgt	r2, #1
 8004326:	4413      	add	r3, r2
 8004328:	e7e0      	b.n	80042ec <_printf_float+0x1a0>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	055a      	lsls	r2, r3, #21
 800432e:	d407      	bmi.n	8004340 <_printf_float+0x1f4>
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	4642      	mov	r2, r8
 8004334:	4631      	mov	r1, r6
 8004336:	4628      	mov	r0, r5
 8004338:	47b8      	blx	r7
 800433a:	3001      	adds	r0, #1
 800433c:	d12c      	bne.n	8004398 <_printf_float+0x24c>
 800433e:	e764      	b.n	800420a <_printf_float+0xbe>
 8004340:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004344:	f240 80e0 	bls.w	8004508 <_printf_float+0x3bc>
 8004348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800434c:	2200      	movs	r2, #0
 800434e:	2300      	movs	r3, #0
 8004350:	f7fc fbda 	bl	8000b08 <__aeabi_dcmpeq>
 8004354:	2800      	cmp	r0, #0
 8004356:	d034      	beq.n	80043c2 <_printf_float+0x276>
 8004358:	4a37      	ldr	r2, [pc, #220]	; (8004438 <_printf_float+0x2ec>)
 800435a:	2301      	movs	r3, #1
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f af51 	beq.w	800420a <_printf_float+0xbe>
 8004368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800436c:	429a      	cmp	r2, r3
 800436e:	db02      	blt.n	8004376 <_printf_float+0x22a>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	07d8      	lsls	r0, r3, #31
 8004374:	d510      	bpl.n	8004398 <_printf_float+0x24c>
 8004376:	ee18 3a10 	vmov	r3, s16
 800437a:	4652      	mov	r2, sl
 800437c:	4631      	mov	r1, r6
 800437e:	4628      	mov	r0, r5
 8004380:	47b8      	blx	r7
 8004382:	3001      	adds	r0, #1
 8004384:	f43f af41 	beq.w	800420a <_printf_float+0xbe>
 8004388:	f04f 0800 	mov.w	r8, #0
 800438c:	f104 091a 	add.w	r9, r4, #26
 8004390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	4543      	cmp	r3, r8
 8004396:	dc09      	bgt.n	80043ac <_printf_float+0x260>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	079b      	lsls	r3, r3, #30
 800439c:	f100 8107 	bmi.w	80045ae <_printf_float+0x462>
 80043a0:	68e0      	ldr	r0, [r4, #12]
 80043a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043a4:	4298      	cmp	r0, r3
 80043a6:	bfb8      	it	lt
 80043a8:	4618      	movlt	r0, r3
 80043aa:	e730      	b.n	800420e <_printf_float+0xc2>
 80043ac:	2301      	movs	r3, #1
 80043ae:	464a      	mov	r2, r9
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b8      	blx	r7
 80043b6:	3001      	adds	r0, #1
 80043b8:	f43f af27 	beq.w	800420a <_printf_float+0xbe>
 80043bc:	f108 0801 	add.w	r8, r8, #1
 80043c0:	e7e6      	b.n	8004390 <_printf_float+0x244>
 80043c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	dc39      	bgt.n	800443c <_printf_float+0x2f0>
 80043c8:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <_printf_float+0x2ec>)
 80043ca:	2301      	movs	r3, #1
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f af19 	beq.w	800420a <_printf_float+0xbe>
 80043d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80043dc:	4313      	orrs	r3, r2
 80043de:	d102      	bne.n	80043e6 <_printf_float+0x29a>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d5d8      	bpl.n	8004398 <_printf_float+0x24c>
 80043e6:	ee18 3a10 	vmov	r3, s16
 80043ea:	4652      	mov	r2, sl
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b8      	blx	r7
 80043f2:	3001      	adds	r0, #1
 80043f4:	f43f af09 	beq.w	800420a <_printf_float+0xbe>
 80043f8:	f04f 0900 	mov.w	r9, #0
 80043fc:	f104 0a1a 	add.w	sl, r4, #26
 8004400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004402:	425b      	negs	r3, r3
 8004404:	454b      	cmp	r3, r9
 8004406:	dc01      	bgt.n	800440c <_printf_float+0x2c0>
 8004408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800440a:	e792      	b.n	8004332 <_printf_float+0x1e6>
 800440c:	2301      	movs	r3, #1
 800440e:	4652      	mov	r2, sl
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f aef7 	beq.w	800420a <_printf_float+0xbe>
 800441c:	f109 0901 	add.w	r9, r9, #1
 8004420:	e7ee      	b.n	8004400 <_printf_float+0x2b4>
 8004422:	bf00      	nop
 8004424:	7fefffff 	.word	0x7fefffff
 8004428:	08009578 	.word	0x08009578
 800442c:	0800957c 	.word	0x0800957c
 8004430:	08009580 	.word	0x08009580
 8004434:	08009584 	.word	0x08009584
 8004438:	08009588 	.word	0x08009588
 800443c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800443e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004440:	429a      	cmp	r2, r3
 8004442:	bfa8      	it	ge
 8004444:	461a      	movge	r2, r3
 8004446:	2a00      	cmp	r2, #0
 8004448:	4691      	mov	r9, r2
 800444a:	dc37      	bgt.n	80044bc <_printf_float+0x370>
 800444c:	f04f 0b00 	mov.w	fp, #0
 8004450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004454:	f104 021a 	add.w	r2, r4, #26
 8004458:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800445a:	9305      	str	r3, [sp, #20]
 800445c:	eba3 0309 	sub.w	r3, r3, r9
 8004460:	455b      	cmp	r3, fp
 8004462:	dc33      	bgt.n	80044cc <_printf_float+0x380>
 8004464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004468:	429a      	cmp	r2, r3
 800446a:	db3b      	blt.n	80044e4 <_printf_float+0x398>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	07da      	lsls	r2, r3, #31
 8004470:	d438      	bmi.n	80044e4 <_printf_float+0x398>
 8004472:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004476:	eba2 0903 	sub.w	r9, r2, r3
 800447a:	9b05      	ldr	r3, [sp, #20]
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	4591      	cmp	r9, r2
 8004480:	bfa8      	it	ge
 8004482:	4691      	movge	r9, r2
 8004484:	f1b9 0f00 	cmp.w	r9, #0
 8004488:	dc35      	bgt.n	80044f6 <_printf_float+0x3aa>
 800448a:	f04f 0800 	mov.w	r8, #0
 800448e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004492:	f104 0a1a 	add.w	sl, r4, #26
 8004496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	eba3 0309 	sub.w	r3, r3, r9
 80044a0:	4543      	cmp	r3, r8
 80044a2:	f77f af79 	ble.w	8004398 <_printf_float+0x24c>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4652      	mov	r2, sl
 80044aa:	4631      	mov	r1, r6
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b8      	blx	r7
 80044b0:	3001      	adds	r0, #1
 80044b2:	f43f aeaa 	beq.w	800420a <_printf_float+0xbe>
 80044b6:	f108 0801 	add.w	r8, r8, #1
 80044ba:	e7ec      	b.n	8004496 <_printf_float+0x34a>
 80044bc:	4613      	mov	r3, r2
 80044be:	4631      	mov	r1, r6
 80044c0:	4642      	mov	r2, r8
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	d1c0      	bne.n	800444c <_printf_float+0x300>
 80044ca:	e69e      	b.n	800420a <_printf_float+0xbe>
 80044cc:	2301      	movs	r3, #1
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	9205      	str	r2, [sp, #20]
 80044d4:	47b8      	blx	r7
 80044d6:	3001      	adds	r0, #1
 80044d8:	f43f ae97 	beq.w	800420a <_printf_float+0xbe>
 80044dc:	9a05      	ldr	r2, [sp, #20]
 80044de:	f10b 0b01 	add.w	fp, fp, #1
 80044e2:	e7b9      	b.n	8004458 <_printf_float+0x30c>
 80044e4:	ee18 3a10 	vmov	r3, s16
 80044e8:	4652      	mov	r2, sl
 80044ea:	4631      	mov	r1, r6
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b8      	blx	r7
 80044f0:	3001      	adds	r0, #1
 80044f2:	d1be      	bne.n	8004472 <_printf_float+0x326>
 80044f4:	e689      	b.n	800420a <_printf_float+0xbe>
 80044f6:	9a05      	ldr	r2, [sp, #20]
 80044f8:	464b      	mov	r3, r9
 80044fa:	4442      	add	r2, r8
 80044fc:	4631      	mov	r1, r6
 80044fe:	4628      	mov	r0, r5
 8004500:	47b8      	blx	r7
 8004502:	3001      	adds	r0, #1
 8004504:	d1c1      	bne.n	800448a <_printf_float+0x33e>
 8004506:	e680      	b.n	800420a <_printf_float+0xbe>
 8004508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800450a:	2a01      	cmp	r2, #1
 800450c:	dc01      	bgt.n	8004512 <_printf_float+0x3c6>
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d53a      	bpl.n	8004588 <_printf_float+0x43c>
 8004512:	2301      	movs	r3, #1
 8004514:	4642      	mov	r2, r8
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae74 	beq.w	800420a <_printf_float+0xbe>
 8004522:	ee18 3a10 	vmov	r3, s16
 8004526:	4652      	mov	r2, sl
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	f43f ae6b 	beq.w	800420a <_printf_float+0xbe>
 8004534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004540:	f7fc fae2 	bl	8000b08 <__aeabi_dcmpeq>
 8004544:	b9d8      	cbnz	r0, 800457e <_printf_float+0x432>
 8004546:	f10a 33ff 	add.w	r3, sl, #4294967295
 800454a:	f108 0201 	add.w	r2, r8, #1
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	d10e      	bne.n	8004576 <_printf_float+0x42a>
 8004558:	e657      	b.n	800420a <_printf_float+0xbe>
 800455a:	2301      	movs	r3, #1
 800455c:	4652      	mov	r2, sl
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	f43f ae50 	beq.w	800420a <_printf_float+0xbe>
 800456a:	f108 0801 	add.w	r8, r8, #1
 800456e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	4543      	cmp	r3, r8
 8004574:	dcf1      	bgt.n	800455a <_printf_float+0x40e>
 8004576:	464b      	mov	r3, r9
 8004578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800457c:	e6da      	b.n	8004334 <_printf_float+0x1e8>
 800457e:	f04f 0800 	mov.w	r8, #0
 8004582:	f104 0a1a 	add.w	sl, r4, #26
 8004586:	e7f2      	b.n	800456e <_printf_float+0x422>
 8004588:	2301      	movs	r3, #1
 800458a:	4642      	mov	r2, r8
 800458c:	e7df      	b.n	800454e <_printf_float+0x402>
 800458e:	2301      	movs	r3, #1
 8004590:	464a      	mov	r2, r9
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae36 	beq.w	800420a <_printf_float+0xbe>
 800459e:	f108 0801 	add.w	r8, r8, #1
 80045a2:	68e3      	ldr	r3, [r4, #12]
 80045a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a6:	1a5b      	subs	r3, r3, r1
 80045a8:	4543      	cmp	r3, r8
 80045aa:	dcf0      	bgt.n	800458e <_printf_float+0x442>
 80045ac:	e6f8      	b.n	80043a0 <_printf_float+0x254>
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	f104 0919 	add.w	r9, r4, #25
 80045b6:	e7f4      	b.n	80045a2 <_printf_float+0x456>

080045b8 <_printf_common>:
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4616      	mov	r6, r2
 80045be:	4699      	mov	r9, r3
 80045c0:	688a      	ldr	r2, [r1, #8]
 80045c2:	690b      	ldr	r3, [r1, #16]
 80045c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bfb8      	it	lt
 80045cc:	4613      	movlt	r3, r2
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d4:	4607      	mov	r7, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	b10a      	cbz	r2, 80045de <_printf_common+0x26>
 80045da:	3301      	adds	r3, #1
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	6833      	ldrmi	r3, [r6, #0]
 80045e6:	3302      	addmi	r3, #2
 80045e8:	6033      	strmi	r3, [r6, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	f015 0506 	ands.w	r5, r5, #6
 80045f0:	d106      	bne.n	8004600 <_printf_common+0x48>
 80045f2:	f104 0a19 	add.w	sl, r4, #25
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc26      	bgt.n	800464e <_printf_common+0x96>
 8004600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004604:	1e13      	subs	r3, r2, #0
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	bf18      	it	ne
 800460a:	2301      	movne	r3, #1
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d42b      	bmi.n	8004668 <_printf_common+0xb0>
 8004610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004614:	4649      	mov	r1, r9
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	3001      	adds	r0, #1
 800461c:	d01e      	beq.n	800465c <_printf_common+0xa4>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	6922      	ldr	r2, [r4, #16]
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf02      	ittt	eq
 800462a:	68e5      	ldreq	r5, [r4, #12]
 800462c:	6833      	ldreq	r3, [r6, #0]
 800462e:	1aed      	subeq	r5, r5, r3
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	bf0c      	ite	eq
 8004634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004638:	2500      	movne	r5, #0
 800463a:	4293      	cmp	r3, r2
 800463c:	bfc4      	itt	gt
 800463e:	1a9b      	subgt	r3, r3, r2
 8004640:	18ed      	addgt	r5, r5, r3
 8004642:	2600      	movs	r6, #0
 8004644:	341a      	adds	r4, #26
 8004646:	42b5      	cmp	r5, r6
 8004648:	d11a      	bne.n	8004680 <_printf_common+0xc8>
 800464a:	2000      	movs	r0, #0
 800464c:	e008      	b.n	8004660 <_printf_common+0xa8>
 800464e:	2301      	movs	r3, #1
 8004650:	4652      	mov	r2, sl
 8004652:	4649      	mov	r1, r9
 8004654:	4638      	mov	r0, r7
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d103      	bne.n	8004664 <_printf_common+0xac>
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	3501      	adds	r5, #1
 8004666:	e7c6      	b.n	80045f6 <_printf_common+0x3e>
 8004668:	18e1      	adds	r1, r4, r3
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	2030      	movs	r0, #48	; 0x30
 800466e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004672:	4422      	add	r2, r4
 8004674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467c:	3302      	adds	r3, #2
 800467e:	e7c7      	b.n	8004610 <_printf_common+0x58>
 8004680:	2301      	movs	r3, #1
 8004682:	4622      	mov	r2, r4
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d0e6      	beq.n	800465c <_printf_common+0xa4>
 800468e:	3601      	adds	r6, #1
 8004690:	e7d9      	b.n	8004646 <_printf_common+0x8e>
	...

08004694 <_printf_i>:
 8004694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	7e0f      	ldrb	r7, [r1, #24]
 800469a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800469c:	2f78      	cmp	r7, #120	; 0x78
 800469e:	4691      	mov	r9, r2
 80046a0:	4680      	mov	r8, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	469a      	mov	sl, r3
 80046a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046aa:	d807      	bhi.n	80046bc <_printf_i+0x28>
 80046ac:	2f62      	cmp	r7, #98	; 0x62
 80046ae:	d80a      	bhi.n	80046c6 <_printf_i+0x32>
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f000 80d4 	beq.w	800485e <_printf_i+0x1ca>
 80046b6:	2f58      	cmp	r7, #88	; 0x58
 80046b8:	f000 80c0 	beq.w	800483c <_printf_i+0x1a8>
 80046bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c4:	e03a      	b.n	800473c <_printf_i+0xa8>
 80046c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ca:	2b15      	cmp	r3, #21
 80046cc:	d8f6      	bhi.n	80046bc <_printf_i+0x28>
 80046ce:	a101      	add	r1, pc, #4	; (adr r1, 80046d4 <_printf_i+0x40>)
 80046d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	08004741 	.word	0x08004741
 80046dc:	080046bd 	.word	0x080046bd
 80046e0:	080046bd 	.word	0x080046bd
 80046e4:	080046bd 	.word	0x080046bd
 80046e8:	080046bd 	.word	0x080046bd
 80046ec:	08004741 	.word	0x08004741
 80046f0:	080046bd 	.word	0x080046bd
 80046f4:	080046bd 	.word	0x080046bd
 80046f8:	080046bd 	.word	0x080046bd
 80046fc:	080046bd 	.word	0x080046bd
 8004700:	08004845 	.word	0x08004845
 8004704:	0800476d 	.word	0x0800476d
 8004708:	080047ff 	.word	0x080047ff
 800470c:	080046bd 	.word	0x080046bd
 8004710:	080046bd 	.word	0x080046bd
 8004714:	08004867 	.word	0x08004867
 8004718:	080046bd 	.word	0x080046bd
 800471c:	0800476d 	.word	0x0800476d
 8004720:	080046bd 	.word	0x080046bd
 8004724:	080046bd 	.word	0x080046bd
 8004728:	08004807 	.word	0x08004807
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	1d1a      	adds	r2, r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	602a      	str	r2, [r5, #0]
 8004734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800473c:	2301      	movs	r3, #1
 800473e:	e09f      	b.n	8004880 <_printf_i+0x1ec>
 8004740:	6820      	ldr	r0, [r4, #0]
 8004742:	682b      	ldr	r3, [r5, #0]
 8004744:	0607      	lsls	r7, r0, #24
 8004746:	f103 0104 	add.w	r1, r3, #4
 800474a:	6029      	str	r1, [r5, #0]
 800474c:	d501      	bpl.n	8004752 <_printf_i+0xbe>
 800474e:	681e      	ldr	r6, [r3, #0]
 8004750:	e003      	b.n	800475a <_printf_i+0xc6>
 8004752:	0646      	lsls	r6, r0, #25
 8004754:	d5fb      	bpl.n	800474e <_printf_i+0xba>
 8004756:	f9b3 6000 	ldrsh.w	r6, [r3]
 800475a:	2e00      	cmp	r6, #0
 800475c:	da03      	bge.n	8004766 <_printf_i+0xd2>
 800475e:	232d      	movs	r3, #45	; 0x2d
 8004760:	4276      	negs	r6, r6
 8004762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004766:	485a      	ldr	r0, [pc, #360]	; (80048d0 <_printf_i+0x23c>)
 8004768:	230a      	movs	r3, #10
 800476a:	e012      	b.n	8004792 <_printf_i+0xfe>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	1d19      	adds	r1, r3, #4
 8004772:	6029      	str	r1, [r5, #0]
 8004774:	0605      	lsls	r5, r0, #24
 8004776:	d501      	bpl.n	800477c <_printf_i+0xe8>
 8004778:	681e      	ldr	r6, [r3, #0]
 800477a:	e002      	b.n	8004782 <_printf_i+0xee>
 800477c:	0641      	lsls	r1, r0, #25
 800477e:	d5fb      	bpl.n	8004778 <_printf_i+0xe4>
 8004780:	881e      	ldrh	r6, [r3, #0]
 8004782:	4853      	ldr	r0, [pc, #332]	; (80048d0 <_printf_i+0x23c>)
 8004784:	2f6f      	cmp	r7, #111	; 0x6f
 8004786:	bf0c      	ite	eq
 8004788:	2308      	moveq	r3, #8
 800478a:	230a      	movne	r3, #10
 800478c:	2100      	movs	r1, #0
 800478e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004792:	6865      	ldr	r5, [r4, #4]
 8004794:	60a5      	str	r5, [r4, #8]
 8004796:	2d00      	cmp	r5, #0
 8004798:	bfa2      	ittt	ge
 800479a:	6821      	ldrge	r1, [r4, #0]
 800479c:	f021 0104 	bicge.w	r1, r1, #4
 80047a0:	6021      	strge	r1, [r4, #0]
 80047a2:	b90e      	cbnz	r6, 80047a8 <_printf_i+0x114>
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	d04b      	beq.n	8004840 <_printf_i+0x1ac>
 80047a8:	4615      	mov	r5, r2
 80047aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80047ae:	fb03 6711 	mls	r7, r3, r1, r6
 80047b2:	5dc7      	ldrb	r7, [r0, r7]
 80047b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047b8:	4637      	mov	r7, r6
 80047ba:	42bb      	cmp	r3, r7
 80047bc:	460e      	mov	r6, r1
 80047be:	d9f4      	bls.n	80047aa <_printf_i+0x116>
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d10b      	bne.n	80047dc <_printf_i+0x148>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	07de      	lsls	r6, r3, #31
 80047c8:	d508      	bpl.n	80047dc <_printf_i+0x148>
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	6861      	ldr	r1, [r4, #4]
 80047ce:	4299      	cmp	r1, r3
 80047d0:	bfde      	ittt	le
 80047d2:	2330      	movle	r3, #48	; 0x30
 80047d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047dc:	1b52      	subs	r2, r2, r5
 80047de:	6122      	str	r2, [r4, #16]
 80047e0:	f8cd a000 	str.w	sl, [sp]
 80047e4:	464b      	mov	r3, r9
 80047e6:	aa03      	add	r2, sp, #12
 80047e8:	4621      	mov	r1, r4
 80047ea:	4640      	mov	r0, r8
 80047ec:	f7ff fee4 	bl	80045b8 <_printf_common>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d14a      	bne.n	800488a <_printf_i+0x1f6>
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	b004      	add	sp, #16
 80047fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	f043 0320 	orr.w	r3, r3, #32
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	4833      	ldr	r0, [pc, #204]	; (80048d4 <_printf_i+0x240>)
 8004808:	2778      	movs	r7, #120	; 0x78
 800480a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	6829      	ldr	r1, [r5, #0]
 8004812:	061f      	lsls	r7, r3, #24
 8004814:	f851 6b04 	ldr.w	r6, [r1], #4
 8004818:	d402      	bmi.n	8004820 <_printf_i+0x18c>
 800481a:	065f      	lsls	r7, r3, #25
 800481c:	bf48      	it	mi
 800481e:	b2b6      	uxthmi	r6, r6
 8004820:	07df      	lsls	r7, r3, #31
 8004822:	bf48      	it	mi
 8004824:	f043 0320 	orrmi.w	r3, r3, #32
 8004828:	6029      	str	r1, [r5, #0]
 800482a:	bf48      	it	mi
 800482c:	6023      	strmi	r3, [r4, #0]
 800482e:	b91e      	cbnz	r6, 8004838 <_printf_i+0x1a4>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	2310      	movs	r3, #16
 800483a:	e7a7      	b.n	800478c <_printf_i+0xf8>
 800483c:	4824      	ldr	r0, [pc, #144]	; (80048d0 <_printf_i+0x23c>)
 800483e:	e7e4      	b.n	800480a <_printf_i+0x176>
 8004840:	4615      	mov	r5, r2
 8004842:	e7bd      	b.n	80047c0 <_printf_i+0x12c>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	6826      	ldr	r6, [r4, #0]
 8004848:	6961      	ldr	r1, [r4, #20]
 800484a:	1d18      	adds	r0, r3, #4
 800484c:	6028      	str	r0, [r5, #0]
 800484e:	0635      	lsls	r5, r6, #24
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	d501      	bpl.n	8004858 <_printf_i+0x1c4>
 8004854:	6019      	str	r1, [r3, #0]
 8004856:	e002      	b.n	800485e <_printf_i+0x1ca>
 8004858:	0670      	lsls	r0, r6, #25
 800485a:	d5fb      	bpl.n	8004854 <_printf_i+0x1c0>
 800485c:	8019      	strh	r1, [r3, #0]
 800485e:	2300      	movs	r3, #0
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	4615      	mov	r5, r2
 8004864:	e7bc      	b.n	80047e0 <_printf_i+0x14c>
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	1d1a      	adds	r2, r3, #4
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	681d      	ldr	r5, [r3, #0]
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	2100      	movs	r1, #0
 8004872:	4628      	mov	r0, r5
 8004874:	f7fb fccc 	bl	8000210 <memchr>
 8004878:	b108      	cbz	r0, 800487e <_printf_i+0x1ea>
 800487a:	1b40      	subs	r0, r0, r5
 800487c:	6060      	str	r0, [r4, #4]
 800487e:	6863      	ldr	r3, [r4, #4]
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	2300      	movs	r3, #0
 8004884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004888:	e7aa      	b.n	80047e0 <_printf_i+0x14c>
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	462a      	mov	r2, r5
 800488e:	4649      	mov	r1, r9
 8004890:	4640      	mov	r0, r8
 8004892:	47d0      	blx	sl
 8004894:	3001      	adds	r0, #1
 8004896:	d0ad      	beq.n	80047f4 <_printf_i+0x160>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	079b      	lsls	r3, r3, #30
 800489c:	d413      	bmi.n	80048c6 <_printf_i+0x232>
 800489e:	68e0      	ldr	r0, [r4, #12]
 80048a0:	9b03      	ldr	r3, [sp, #12]
 80048a2:	4298      	cmp	r0, r3
 80048a4:	bfb8      	it	lt
 80048a6:	4618      	movlt	r0, r3
 80048a8:	e7a6      	b.n	80047f8 <_printf_i+0x164>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4632      	mov	r2, r6
 80048ae:	4649      	mov	r1, r9
 80048b0:	4640      	mov	r0, r8
 80048b2:	47d0      	blx	sl
 80048b4:	3001      	adds	r0, #1
 80048b6:	d09d      	beq.n	80047f4 <_printf_i+0x160>
 80048b8:	3501      	adds	r5, #1
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	9903      	ldr	r1, [sp, #12]
 80048be:	1a5b      	subs	r3, r3, r1
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	dcf2      	bgt.n	80048aa <_printf_i+0x216>
 80048c4:	e7eb      	b.n	800489e <_printf_i+0x20a>
 80048c6:	2500      	movs	r5, #0
 80048c8:	f104 0619 	add.w	r6, r4, #25
 80048cc:	e7f5      	b.n	80048ba <_printf_i+0x226>
 80048ce:	bf00      	nop
 80048d0:	0800958a 	.word	0x0800958a
 80048d4:	0800959b 	.word	0x0800959b

080048d8 <_scanf_float>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	b087      	sub	sp, #28
 80048de:	4617      	mov	r7, r2
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	688b      	ldr	r3, [r1, #8]
 80048e4:	1e5a      	subs	r2, r3, #1
 80048e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048ea:	bf83      	ittte	hi
 80048ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80048f0:	195b      	addhi	r3, r3, r5
 80048f2:	9302      	strhi	r3, [sp, #8]
 80048f4:	2300      	movls	r3, #0
 80048f6:	bf86      	itte	hi
 80048f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80048fc:	608b      	strhi	r3, [r1, #8]
 80048fe:	9302      	strls	r3, [sp, #8]
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	468b      	mov	fp, r1
 8004904:	2500      	movs	r5, #0
 8004906:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800490a:	f84b 3b1c 	str.w	r3, [fp], #28
 800490e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004912:	4680      	mov	r8, r0
 8004914:	460c      	mov	r4, r1
 8004916:	465e      	mov	r6, fp
 8004918:	46aa      	mov	sl, r5
 800491a:	46a9      	mov	r9, r5
 800491c:	9501      	str	r5, [sp, #4]
 800491e:	68a2      	ldr	r2, [r4, #8]
 8004920:	b152      	cbz	r2, 8004938 <_scanf_float+0x60>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b4e      	cmp	r3, #78	; 0x4e
 8004928:	d864      	bhi.n	80049f4 <_scanf_float+0x11c>
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d83c      	bhi.n	80049a8 <_scanf_float+0xd0>
 800492e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004932:	b2c8      	uxtb	r0, r1
 8004934:	280e      	cmp	r0, #14
 8004936:	d93a      	bls.n	80049ae <_scanf_float+0xd6>
 8004938:	f1b9 0f00 	cmp.w	r9, #0
 800493c:	d003      	beq.n	8004946 <_scanf_float+0x6e>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800494a:	f1ba 0f01 	cmp.w	sl, #1
 800494e:	f200 8113 	bhi.w	8004b78 <_scanf_float+0x2a0>
 8004952:	455e      	cmp	r6, fp
 8004954:	f200 8105 	bhi.w	8004b62 <_scanf_float+0x28a>
 8004958:	2501      	movs	r5, #1
 800495a:	4628      	mov	r0, r5
 800495c:	b007      	add	sp, #28
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004966:	2a0d      	cmp	r2, #13
 8004968:	d8e6      	bhi.n	8004938 <_scanf_float+0x60>
 800496a:	a101      	add	r1, pc, #4	; (adr r1, 8004970 <_scanf_float+0x98>)
 800496c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004970:	08004aaf 	.word	0x08004aaf
 8004974:	08004939 	.word	0x08004939
 8004978:	08004939 	.word	0x08004939
 800497c:	08004939 	.word	0x08004939
 8004980:	08004b0f 	.word	0x08004b0f
 8004984:	08004ae7 	.word	0x08004ae7
 8004988:	08004939 	.word	0x08004939
 800498c:	08004939 	.word	0x08004939
 8004990:	08004abd 	.word	0x08004abd
 8004994:	08004939 	.word	0x08004939
 8004998:	08004939 	.word	0x08004939
 800499c:	08004939 	.word	0x08004939
 80049a0:	08004939 	.word	0x08004939
 80049a4:	08004a75 	.word	0x08004a75
 80049a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80049ac:	e7db      	b.n	8004966 <_scanf_float+0x8e>
 80049ae:	290e      	cmp	r1, #14
 80049b0:	d8c2      	bhi.n	8004938 <_scanf_float+0x60>
 80049b2:	a001      	add	r0, pc, #4	; (adr r0, 80049b8 <_scanf_float+0xe0>)
 80049b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80049b8:	08004a67 	.word	0x08004a67
 80049bc:	08004939 	.word	0x08004939
 80049c0:	08004a67 	.word	0x08004a67
 80049c4:	08004afb 	.word	0x08004afb
 80049c8:	08004939 	.word	0x08004939
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a51 	.word	0x08004a51
 80049d4:	08004a51 	.word	0x08004a51
 80049d8:	08004a51 	.word	0x08004a51
 80049dc:	08004a51 	.word	0x08004a51
 80049e0:	08004a51 	.word	0x08004a51
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004a51 	.word	0x08004a51
 80049ec:	08004a51 	.word	0x08004a51
 80049f0:	08004a51 	.word	0x08004a51
 80049f4:	2b6e      	cmp	r3, #110	; 0x6e
 80049f6:	d809      	bhi.n	8004a0c <_scanf_float+0x134>
 80049f8:	2b60      	cmp	r3, #96	; 0x60
 80049fa:	d8b2      	bhi.n	8004962 <_scanf_float+0x8a>
 80049fc:	2b54      	cmp	r3, #84	; 0x54
 80049fe:	d077      	beq.n	8004af0 <_scanf_float+0x218>
 8004a00:	2b59      	cmp	r3, #89	; 0x59
 8004a02:	d199      	bne.n	8004938 <_scanf_float+0x60>
 8004a04:	2d07      	cmp	r5, #7
 8004a06:	d197      	bne.n	8004938 <_scanf_float+0x60>
 8004a08:	2508      	movs	r5, #8
 8004a0a:	e029      	b.n	8004a60 <_scanf_float+0x188>
 8004a0c:	2b74      	cmp	r3, #116	; 0x74
 8004a0e:	d06f      	beq.n	8004af0 <_scanf_float+0x218>
 8004a10:	2b79      	cmp	r3, #121	; 0x79
 8004a12:	e7f6      	b.n	8004a02 <_scanf_float+0x12a>
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	05c8      	lsls	r0, r1, #23
 8004a18:	d51a      	bpl.n	8004a50 <_scanf_float+0x178>
 8004a1a:	9b02      	ldr	r3, [sp, #8]
 8004a1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a20:	6021      	str	r1, [r4, #0]
 8004a22:	f109 0901 	add.w	r9, r9, #1
 8004a26:	b11b      	cbz	r3, 8004a30 <_scanf_float+0x158>
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	3201      	adds	r2, #1
 8004a2c:	9302      	str	r3, [sp, #8]
 8004a2e:	60a2      	str	r2, [r4, #8]
 8004a30:	68a3      	ldr	r3, [r4, #8]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	f340 8084 	ble.w	8004b50 <_scanf_float+0x278>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	e766      	b.n	800491e <_scanf_float+0x46>
 8004a50:	eb1a 0f05 	cmn.w	sl, r5
 8004a54:	f47f af70 	bne.w	8004938 <_scanf_float+0x60>
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004a5e:	6022      	str	r2, [r4, #0]
 8004a60:	f806 3b01 	strb.w	r3, [r6], #1
 8004a64:	e7e4      	b.n	8004a30 <_scanf_float+0x158>
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	0610      	lsls	r0, r2, #24
 8004a6a:	f57f af65 	bpl.w	8004938 <_scanf_float+0x60>
 8004a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a72:	e7f4      	b.n	8004a5e <_scanf_float+0x186>
 8004a74:	f1ba 0f00 	cmp.w	sl, #0
 8004a78:	d10e      	bne.n	8004a98 <_scanf_float+0x1c0>
 8004a7a:	f1b9 0f00 	cmp.w	r9, #0
 8004a7e:	d10e      	bne.n	8004a9e <_scanf_float+0x1c6>
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a8a:	d108      	bne.n	8004a9e <_scanf_float+0x1c6>
 8004a8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a90:	6022      	str	r2, [r4, #0]
 8004a92:	f04f 0a01 	mov.w	sl, #1
 8004a96:	e7e3      	b.n	8004a60 <_scanf_float+0x188>
 8004a98:	f1ba 0f02 	cmp.w	sl, #2
 8004a9c:	d055      	beq.n	8004b4a <_scanf_float+0x272>
 8004a9e:	2d01      	cmp	r5, #1
 8004aa0:	d002      	beq.n	8004aa8 <_scanf_float+0x1d0>
 8004aa2:	2d04      	cmp	r5, #4
 8004aa4:	f47f af48 	bne.w	8004938 <_scanf_float+0x60>
 8004aa8:	3501      	adds	r5, #1
 8004aaa:	b2ed      	uxtb	r5, r5
 8004aac:	e7d8      	b.n	8004a60 <_scanf_float+0x188>
 8004aae:	f1ba 0f01 	cmp.w	sl, #1
 8004ab2:	f47f af41 	bne.w	8004938 <_scanf_float+0x60>
 8004ab6:	f04f 0a02 	mov.w	sl, #2
 8004aba:	e7d1      	b.n	8004a60 <_scanf_float+0x188>
 8004abc:	b97d      	cbnz	r5, 8004ade <_scanf_float+0x206>
 8004abe:	f1b9 0f00 	cmp.w	r9, #0
 8004ac2:	f47f af3c 	bne.w	800493e <_scanf_float+0x66>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004acc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ad0:	f47f af39 	bne.w	8004946 <_scanf_float+0x6e>
 8004ad4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	2501      	movs	r5, #1
 8004adc:	e7c0      	b.n	8004a60 <_scanf_float+0x188>
 8004ade:	2d03      	cmp	r5, #3
 8004ae0:	d0e2      	beq.n	8004aa8 <_scanf_float+0x1d0>
 8004ae2:	2d05      	cmp	r5, #5
 8004ae4:	e7de      	b.n	8004aa4 <_scanf_float+0x1cc>
 8004ae6:	2d02      	cmp	r5, #2
 8004ae8:	f47f af26 	bne.w	8004938 <_scanf_float+0x60>
 8004aec:	2503      	movs	r5, #3
 8004aee:	e7b7      	b.n	8004a60 <_scanf_float+0x188>
 8004af0:	2d06      	cmp	r5, #6
 8004af2:	f47f af21 	bne.w	8004938 <_scanf_float+0x60>
 8004af6:	2507      	movs	r5, #7
 8004af8:	e7b2      	b.n	8004a60 <_scanf_float+0x188>
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	0591      	lsls	r1, r2, #22
 8004afe:	f57f af1b 	bpl.w	8004938 <_scanf_float+0x60>
 8004b02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b06:	6022      	str	r2, [r4, #0]
 8004b08:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b0c:	e7a8      	b.n	8004a60 <_scanf_float+0x188>
 8004b0e:	6822      	ldr	r2, [r4, #0]
 8004b10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b18:	d006      	beq.n	8004b28 <_scanf_float+0x250>
 8004b1a:	0550      	lsls	r0, r2, #21
 8004b1c:	f57f af0c 	bpl.w	8004938 <_scanf_float+0x60>
 8004b20:	f1b9 0f00 	cmp.w	r9, #0
 8004b24:	f43f af0f 	beq.w	8004946 <_scanf_float+0x6e>
 8004b28:	0591      	lsls	r1, r2, #22
 8004b2a:	bf58      	it	pl
 8004b2c:	9901      	ldrpl	r1, [sp, #4]
 8004b2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b32:	bf58      	it	pl
 8004b34:	eba9 0101 	subpl.w	r1, r9, r1
 8004b38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004b3c:	bf58      	it	pl
 8004b3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b42:	6022      	str	r2, [r4, #0]
 8004b44:	f04f 0900 	mov.w	r9, #0
 8004b48:	e78a      	b.n	8004a60 <_scanf_float+0x188>
 8004b4a:	f04f 0a03 	mov.w	sl, #3
 8004b4e:	e787      	b.n	8004a60 <_scanf_float+0x188>
 8004b50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b54:	4639      	mov	r1, r7
 8004b56:	4640      	mov	r0, r8
 8004b58:	4798      	blx	r3
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	f43f aedf 	beq.w	800491e <_scanf_float+0x46>
 8004b60:	e6ea      	b.n	8004938 <_scanf_float+0x60>
 8004b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	4798      	blx	r3
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	e6ec      	b.n	8004952 <_scanf_float+0x7a>
 8004b78:	1e6b      	subs	r3, r5, #1
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d825      	bhi.n	8004bca <_scanf_float+0x2f2>
 8004b7e:	2d02      	cmp	r5, #2
 8004b80:	d836      	bhi.n	8004bf0 <_scanf_float+0x318>
 8004b82:	455e      	cmp	r6, fp
 8004b84:	f67f aee8 	bls.w	8004958 <_scanf_float+0x80>
 8004b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b90:	463a      	mov	r2, r7
 8004b92:	4640      	mov	r0, r8
 8004b94:	4798      	blx	r3
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	e7f1      	b.n	8004b82 <_scanf_float+0x2aa>
 8004b9e:	9802      	ldr	r0, [sp, #8]
 8004ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ba4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004ba8:	9002      	str	r0, [sp, #8]
 8004baa:	463a      	mov	r2, r7
 8004bac:	4640      	mov	r0, r8
 8004bae:	4798      	blx	r3
 8004bb0:	6923      	ldr	r3, [r4, #16]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	6123      	str	r3, [r4, #16]
 8004bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bba:	fa5f fa8a 	uxtb.w	sl, sl
 8004bbe:	f1ba 0f02 	cmp.w	sl, #2
 8004bc2:	d1ec      	bne.n	8004b9e <_scanf_float+0x2c6>
 8004bc4:	3d03      	subs	r5, #3
 8004bc6:	b2ed      	uxtb	r5, r5
 8004bc8:	1b76      	subs	r6, r6, r5
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	05da      	lsls	r2, r3, #23
 8004bce:	d52f      	bpl.n	8004c30 <_scanf_float+0x358>
 8004bd0:	055b      	lsls	r3, r3, #21
 8004bd2:	d510      	bpl.n	8004bf6 <_scanf_float+0x31e>
 8004bd4:	455e      	cmp	r6, fp
 8004bd6:	f67f aebf 	bls.w	8004958 <_scanf_float+0x80>
 8004bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004be2:	463a      	mov	r2, r7
 8004be4:	4640      	mov	r0, r8
 8004be6:	4798      	blx	r3
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	e7f1      	b.n	8004bd4 <_scanf_float+0x2fc>
 8004bf0:	46aa      	mov	sl, r5
 8004bf2:	9602      	str	r6, [sp, #8]
 8004bf4:	e7df      	b.n	8004bb6 <_scanf_float+0x2de>
 8004bf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bfa:	6923      	ldr	r3, [r4, #16]
 8004bfc:	2965      	cmp	r1, #101	; 0x65
 8004bfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c02:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	d00c      	beq.n	8004c24 <_scanf_float+0x34c>
 8004c0a:	2945      	cmp	r1, #69	; 0x45
 8004c0c:	d00a      	beq.n	8004c24 <_scanf_float+0x34c>
 8004c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c12:	463a      	mov	r2, r7
 8004c14:	4640      	mov	r0, r8
 8004c16:	4798      	blx	r3
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	1eb5      	subs	r5, r6, #2
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c28:	463a      	mov	r2, r7
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	4798      	blx	r3
 8004c2e:	462e      	mov	r6, r5
 8004c30:	6825      	ldr	r5, [r4, #0]
 8004c32:	f015 0510 	ands.w	r5, r5, #16
 8004c36:	d158      	bne.n	8004cea <_scanf_float+0x412>
 8004c38:	7035      	strb	r5, [r6, #0]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c44:	d11c      	bne.n	8004c80 <_scanf_float+0x3a8>
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	454b      	cmp	r3, r9
 8004c4a:	eba3 0209 	sub.w	r2, r3, r9
 8004c4e:	d124      	bne.n	8004c9a <_scanf_float+0x3c2>
 8004c50:	2200      	movs	r2, #0
 8004c52:	4659      	mov	r1, fp
 8004c54:	4640      	mov	r0, r8
 8004c56:	f002 fc2f 	bl	80074b8 <_strtod_r>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	6821      	ldr	r1, [r4, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f011 0f02 	tst.w	r1, #2
 8004c64:	ec57 6b10 	vmov	r6, r7, d0
 8004c68:	f103 0204 	add.w	r2, r3, #4
 8004c6c:	d020      	beq.n	8004cb0 <_scanf_float+0x3d8>
 8004c6e:	9903      	ldr	r1, [sp, #12]
 8004c70:	600a      	str	r2, [r1, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	e9c3 6700 	strd	r6, r7, [r3]
 8004c78:	68e3      	ldr	r3, [r4, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60e3      	str	r3, [r4, #12]
 8004c7e:	e66c      	b.n	800495a <_scanf_float+0x82>
 8004c80:	9b04      	ldr	r3, [sp, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0e4      	beq.n	8004c50 <_scanf_float+0x378>
 8004c86:	9905      	ldr	r1, [sp, #20]
 8004c88:	230a      	movs	r3, #10
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	3101      	adds	r1, #1
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f002 fc9a 	bl	80075c8 <_strtol_r>
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	9e05      	ldr	r6, [sp, #20]
 8004c98:	1ac2      	subs	r2, r0, r3
 8004c9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c9e:	429e      	cmp	r6, r3
 8004ca0:	bf28      	it	cs
 8004ca2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004ca6:	4912      	ldr	r1, [pc, #72]	; (8004cf0 <_scanf_float+0x418>)
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f000 f8e7 	bl	8004e7c <siprintf>
 8004cae:	e7cf      	b.n	8004c50 <_scanf_float+0x378>
 8004cb0:	f011 0f04 	tst.w	r1, #4
 8004cb4:	9903      	ldr	r1, [sp, #12]
 8004cb6:	600a      	str	r2, [r1, #0]
 8004cb8:	d1db      	bne.n	8004c72 <_scanf_float+0x39a>
 8004cba:	f8d3 8000 	ldr.w	r8, [r3]
 8004cbe:	ee10 2a10 	vmov	r2, s0
 8004cc2:	ee10 0a10 	vmov	r0, s0
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	4639      	mov	r1, r7
 8004cca:	f7fb ff4f 	bl	8000b6c <__aeabi_dcmpun>
 8004cce:	b128      	cbz	r0, 8004cdc <_scanf_float+0x404>
 8004cd0:	4808      	ldr	r0, [pc, #32]	; (8004cf4 <_scanf_float+0x41c>)
 8004cd2:	f000 f9b7 	bl	8005044 <nanf>
 8004cd6:	ed88 0a00 	vstr	s0, [r8]
 8004cda:	e7cd      	b.n	8004c78 <_scanf_float+0x3a0>
 8004cdc:	4630      	mov	r0, r6
 8004cde:	4639      	mov	r1, r7
 8004ce0:	f7fb ffa2 	bl	8000c28 <__aeabi_d2f>
 8004ce4:	f8c8 0000 	str.w	r0, [r8]
 8004ce8:	e7c6      	b.n	8004c78 <_scanf_float+0x3a0>
 8004cea:	2500      	movs	r5, #0
 8004cec:	e635      	b.n	800495a <_scanf_float+0x82>
 8004cee:	bf00      	nop
 8004cf0:	080095ac 	.word	0x080095ac
 8004cf4:	0800993d 	.word	0x0800993d

08004cf8 <std>:
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8004d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d06:	6083      	str	r3, [r0, #8]
 8004d08:	8181      	strh	r1, [r0, #12]
 8004d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d0c:	81c2      	strh	r2, [r0, #14]
 8004d0e:	6183      	str	r3, [r0, #24]
 8004d10:	4619      	mov	r1, r3
 8004d12:	2208      	movs	r2, #8
 8004d14:	305c      	adds	r0, #92	; 0x5c
 8004d16:	f000 f914 	bl	8004f42 <memset>
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <std+0x58>)
 8004d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <std+0x5c>)
 8004d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <std+0x60>)
 8004d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <std+0x64>)
 8004d28:	6323      	str	r3, [r4, #48]	; 0x30
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <std+0x68>)
 8004d2c:	6224      	str	r4, [r4, #32]
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d006      	beq.n	8004d40 <std+0x48>
 8004d32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d36:	4294      	cmp	r4, r2
 8004d38:	d002      	beq.n	8004d40 <std+0x48>
 8004d3a:	33d0      	adds	r3, #208	; 0xd0
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d105      	bne.n	8004d4c <std+0x54>
 8004d40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d48:	f000 b978 	b.w	800503c <__retarget_lock_init_recursive>
 8004d4c:	bd10      	pop	{r4, pc}
 8004d4e:	bf00      	nop
 8004d50:	08004ebd 	.word	0x08004ebd
 8004d54:	08004edf 	.word	0x08004edf
 8004d58:	08004f17 	.word	0x08004f17
 8004d5c:	08004f3b 	.word	0x08004f3b
 8004d60:	200006b8 	.word	0x200006b8

08004d64 <stdio_exit_handler>:
 8004d64:	4a02      	ldr	r2, [pc, #8]	; (8004d70 <stdio_exit_handler+0xc>)
 8004d66:	4903      	ldr	r1, [pc, #12]	; (8004d74 <stdio_exit_handler+0x10>)
 8004d68:	4803      	ldr	r0, [pc, #12]	; (8004d78 <stdio_exit_handler+0x14>)
 8004d6a:	f000 b869 	b.w	8004e40 <_fwalk_sglue>
 8004d6e:	bf00      	nop
 8004d70:	20000014 	.word	0x20000014
 8004d74:	08007989 	.word	0x08007989
 8004d78:	20000020 	.word	0x20000020

08004d7c <cleanup_stdio>:
 8004d7c:	6841      	ldr	r1, [r0, #4]
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <cleanup_stdio+0x34>)
 8004d80:	4299      	cmp	r1, r3
 8004d82:	b510      	push	{r4, lr}
 8004d84:	4604      	mov	r4, r0
 8004d86:	d001      	beq.n	8004d8c <cleanup_stdio+0x10>
 8004d88:	f002 fdfe 	bl	8007988 <_fflush_r>
 8004d8c:	68a1      	ldr	r1, [r4, #8]
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <cleanup_stdio+0x38>)
 8004d90:	4299      	cmp	r1, r3
 8004d92:	d002      	beq.n	8004d9a <cleanup_stdio+0x1e>
 8004d94:	4620      	mov	r0, r4
 8004d96:	f002 fdf7 	bl	8007988 <_fflush_r>
 8004d9a:	68e1      	ldr	r1, [r4, #12]
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <cleanup_stdio+0x3c>)
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	d004      	beq.n	8004dac <cleanup_stdio+0x30>
 8004da2:	4620      	mov	r0, r4
 8004da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da8:	f002 bdee 	b.w	8007988 <_fflush_r>
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	bf00      	nop
 8004db0:	200006b8 	.word	0x200006b8
 8004db4:	20000720 	.word	0x20000720
 8004db8:	20000788 	.word	0x20000788

08004dbc <global_stdio_init.part.0>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <global_stdio_init.part.0+0x30>)
 8004dc0:	4c0b      	ldr	r4, [pc, #44]	; (8004df0 <global_stdio_init.part.0+0x34>)
 8004dc2:	4a0c      	ldr	r2, [pc, #48]	; (8004df4 <global_stdio_init.part.0+0x38>)
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2104      	movs	r1, #4
 8004dcc:	f7ff ff94 	bl	8004cf8 <std>
 8004dd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	2109      	movs	r1, #9
 8004dd8:	f7ff ff8e 	bl	8004cf8 <std>
 8004ddc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004de0:	2202      	movs	r2, #2
 8004de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de6:	2112      	movs	r1, #18
 8004de8:	f7ff bf86 	b.w	8004cf8 <std>
 8004dec:	200007f0 	.word	0x200007f0
 8004df0:	200006b8 	.word	0x200006b8
 8004df4:	08004d65 	.word	0x08004d65

08004df8 <__sfp_lock_acquire>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__sfp_lock_acquire+0x8>)
 8004dfa:	f000 b920 	b.w	800503e <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	200007f9 	.word	0x200007f9

08004e04 <__sfp_lock_release>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__sfp_lock_release+0x8>)
 8004e06:	f000 b91b 	b.w	8005040 <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	200007f9 	.word	0x200007f9

08004e10 <__sinit>:
 8004e10:	b510      	push	{r4, lr}
 8004e12:	4604      	mov	r4, r0
 8004e14:	f7ff fff0 	bl	8004df8 <__sfp_lock_acquire>
 8004e18:	6a23      	ldr	r3, [r4, #32]
 8004e1a:	b11b      	cbz	r3, 8004e24 <__sinit+0x14>
 8004e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e20:	f7ff bff0 	b.w	8004e04 <__sfp_lock_release>
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <__sinit+0x28>)
 8004e26:	6223      	str	r3, [r4, #32]
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <__sinit+0x2c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f5      	bne.n	8004e1c <__sinit+0xc>
 8004e30:	f7ff ffc4 	bl	8004dbc <global_stdio_init.part.0>
 8004e34:	e7f2      	b.n	8004e1c <__sinit+0xc>
 8004e36:	bf00      	nop
 8004e38:	08004d7d 	.word	0x08004d7d
 8004e3c:	200007f0 	.word	0x200007f0

08004e40 <_fwalk_sglue>:
 8004e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e44:	4607      	mov	r7, r0
 8004e46:	4688      	mov	r8, r1
 8004e48:	4614      	mov	r4, r2
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e50:	f1b9 0901 	subs.w	r9, r9, #1
 8004e54:	d505      	bpl.n	8004e62 <_fwalk_sglue+0x22>
 8004e56:	6824      	ldr	r4, [r4, #0]
 8004e58:	2c00      	cmp	r4, #0
 8004e5a:	d1f7      	bne.n	8004e4c <_fwalk_sglue+0xc>
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d907      	bls.n	8004e78 <_fwalk_sglue+0x38>
 8004e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	d003      	beq.n	8004e78 <_fwalk_sglue+0x38>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4638      	mov	r0, r7
 8004e74:	47c0      	blx	r8
 8004e76:	4306      	orrs	r6, r0
 8004e78:	3568      	adds	r5, #104	; 0x68
 8004e7a:	e7e9      	b.n	8004e50 <_fwalk_sglue+0x10>

08004e7c <siprintf>:
 8004e7c:	b40e      	push	{r1, r2, r3}
 8004e7e:	b500      	push	{lr}
 8004e80:	b09c      	sub	sp, #112	; 0x70
 8004e82:	ab1d      	add	r3, sp, #116	; 0x74
 8004e84:	9002      	str	r0, [sp, #8]
 8004e86:	9006      	str	r0, [sp, #24]
 8004e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e8c:	4809      	ldr	r0, [pc, #36]	; (8004eb4 <siprintf+0x38>)
 8004e8e:	9107      	str	r1, [sp, #28]
 8004e90:	9104      	str	r1, [sp, #16]
 8004e92:	4909      	ldr	r1, [pc, #36]	; (8004eb8 <siprintf+0x3c>)
 8004e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e98:	9105      	str	r1, [sp, #20]
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	a902      	add	r1, sp, #8
 8004ea0:	f002 fbee 	bl	8007680 <_svfiprintf_r>
 8004ea4:	9b02      	ldr	r3, [sp, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	b01c      	add	sp, #112	; 0x70
 8004eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb0:	b003      	add	sp, #12
 8004eb2:	4770      	bx	lr
 8004eb4:	2000006c 	.word	0x2000006c
 8004eb8:	ffff0208 	.word	0xffff0208

08004ebc <__sread>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	f000 f86c 	bl	8004fa0 <_read_r>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	bfab      	itete	ge
 8004ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ece:	89a3      	ldrhlt	r3, [r4, #12]
 8004ed0:	181b      	addge	r3, r3, r0
 8004ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ed6:	bfac      	ite	ge
 8004ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eda:	81a3      	strhlt	r3, [r4, #12]
 8004edc:	bd10      	pop	{r4, pc}

08004ede <__swrite>:
 8004ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee2:	461f      	mov	r7, r3
 8004ee4:	898b      	ldrh	r3, [r1, #12]
 8004ee6:	05db      	lsls	r3, r3, #23
 8004ee8:	4605      	mov	r5, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	4616      	mov	r6, r2
 8004eee:	d505      	bpl.n	8004efc <__swrite+0x1e>
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f000 f840 	bl	8004f7c <_lseek_r>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	4632      	mov	r2, r6
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	f000 b857 	b.w	8004fc4 <_write_r>

08004f16 <__sseek>:
 8004f16:	b510      	push	{r4, lr}
 8004f18:	460c      	mov	r4, r1
 8004f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1e:	f000 f82d 	bl	8004f7c <_lseek_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	bf15      	itete	ne
 8004f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f32:	81a3      	strheq	r3, [r4, #12]
 8004f34:	bf18      	it	ne
 8004f36:	81a3      	strhne	r3, [r4, #12]
 8004f38:	bd10      	pop	{r4, pc}

08004f3a <__sclose>:
 8004f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3e:	f000 b80d 	b.w	8004f5c <_close_r>

08004f42 <memset>:
 8004f42:	4402      	add	r2, r0
 8004f44:	4603      	mov	r3, r0
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d100      	bne.n	8004f4c <memset+0xa>
 8004f4a:	4770      	bx	lr
 8004f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f50:	e7f9      	b.n	8004f46 <memset+0x4>
	...

08004f54 <_localeconv_r>:
 8004f54:	4800      	ldr	r0, [pc, #0]	; (8004f58 <_localeconv_r+0x4>)
 8004f56:	4770      	bx	lr
 8004f58:	20000160 	.word	0x20000160

08004f5c <_close_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d06      	ldr	r5, [pc, #24]	; (8004f78 <_close_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fc fdd5 	bl	8001b16 <_close>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_close_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_close_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	200007f4 	.word	0x200007f4

08004f7c <_lseek_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4d07      	ldr	r5, [pc, #28]	; (8004f9c <_lseek_r+0x20>)
 8004f80:	4604      	mov	r4, r0
 8004f82:	4608      	mov	r0, r1
 8004f84:	4611      	mov	r1, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f7fc fdea 	bl	8001b64 <_lseek>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_lseek_r+0x1e>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_lseek_r+0x1e>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200007f4 	.word	0x200007f4

08004fa0 <_read_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	; (8004fc0 <_read_r+0x20>)
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	4611      	mov	r1, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f7fc fd78 	bl	8001aa4 <_read>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_read_r+0x1e>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_read_r+0x1e>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	200007f4 	.word	0x200007f4

08004fc4 <_write_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d07      	ldr	r5, [pc, #28]	; (8004fe4 <_write_r+0x20>)
 8004fc8:	4604      	mov	r4, r0
 8004fca:	4608      	mov	r0, r1
 8004fcc:	4611      	mov	r1, r2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	602a      	str	r2, [r5, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f7fc fd83 	bl	8001ade <_write>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_write_r+0x1e>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_write_r+0x1e>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	200007f4 	.word	0x200007f4

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	2000006c 	.word	0x2000006c

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4d0d      	ldr	r5, [pc, #52]	; (800502c <__libc_init_array+0x38>)
 8004ff8:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffa:	1b64      	subs	r4, r4, r5
 8004ffc:	10a4      	asrs	r4, r4, #2
 8004ffe:	2600      	movs	r6, #0
 8005000:	42a6      	cmp	r6, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	4d0b      	ldr	r5, [pc, #44]	; (8005034 <__libc_init_array+0x40>)
 8005006:	4c0c      	ldr	r4, [pc, #48]	; (8005038 <__libc_init_array+0x44>)
 8005008:	f003 fbd6 	bl	80087b8 <_init>
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	2600      	movs	r6, #0
 8005012:	42a6      	cmp	r6, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f855 3b04 	ldr.w	r3, [r5], #4
 800501c:	4798      	blx	r3
 800501e:	3601      	adds	r6, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f855 3b04 	ldr.w	r3, [r5], #4
 8005026:	4798      	blx	r3
 8005028:	3601      	adds	r6, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	080099a8 	.word	0x080099a8
 8005030:	080099a8 	.word	0x080099a8
 8005034:	080099a8 	.word	0x080099a8
 8005038:	080099ac 	.word	0x080099ac

0800503c <__retarget_lock_init_recursive>:
 800503c:	4770      	bx	lr

0800503e <__retarget_lock_acquire_recursive>:
 800503e:	4770      	bx	lr

08005040 <__retarget_lock_release_recursive>:
 8005040:	4770      	bx	lr
	...

08005044 <nanf>:
 8005044:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800504c <nanf+0x8>
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	7fc00000 	.word	0x7fc00000

08005050 <quorem>:
 8005050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	6903      	ldr	r3, [r0, #16]
 8005056:	690c      	ldr	r4, [r1, #16]
 8005058:	42a3      	cmp	r3, r4
 800505a:	4607      	mov	r7, r0
 800505c:	db7e      	blt.n	800515c <quorem+0x10c>
 800505e:	3c01      	subs	r4, #1
 8005060:	f101 0814 	add.w	r8, r1, #20
 8005064:	f100 0514 	add.w	r5, r0, #20
 8005068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005076:	3301      	adds	r3, #1
 8005078:	429a      	cmp	r2, r3
 800507a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800507e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005082:	fbb2 f6f3 	udiv	r6, r2, r3
 8005086:	d331      	bcc.n	80050ec <quorem+0x9c>
 8005088:	f04f 0e00 	mov.w	lr, #0
 800508c:	4640      	mov	r0, r8
 800508e:	46ac      	mov	ip, r5
 8005090:	46f2      	mov	sl, lr
 8005092:	f850 2b04 	ldr.w	r2, [r0], #4
 8005096:	b293      	uxth	r3, r2
 8005098:	fb06 e303 	mla	r3, r6, r3, lr
 800509c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050a0:	0c1a      	lsrs	r2, r3, #16
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	ebaa 0303 	sub.w	r3, sl, r3
 80050a8:	f8dc a000 	ldr.w	sl, [ip]
 80050ac:	fa13 f38a 	uxtah	r3, r3, sl
 80050b0:	fb06 220e 	mla	r2, r6, lr, r2
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	9b00      	ldr	r3, [sp, #0]
 80050b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050bc:	b292      	uxth	r2, r2
 80050be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80050ca:	4581      	cmp	r9, r0
 80050cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050d0:	f84c 3b04 	str.w	r3, [ip], #4
 80050d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050d8:	d2db      	bcs.n	8005092 <quorem+0x42>
 80050da:	f855 300b 	ldr.w	r3, [r5, fp]
 80050de:	b92b      	cbnz	r3, 80050ec <quorem+0x9c>
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	3b04      	subs	r3, #4
 80050e4:	429d      	cmp	r5, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	d32c      	bcc.n	8005144 <quorem+0xf4>
 80050ea:	613c      	str	r4, [r7, #16]
 80050ec:	4638      	mov	r0, r7
 80050ee:	f001 f9ef 	bl	80064d0 <__mcmp>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	db22      	blt.n	800513c <quorem+0xec>
 80050f6:	3601      	adds	r6, #1
 80050f8:	4629      	mov	r1, r5
 80050fa:	2000      	movs	r0, #0
 80050fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005100:	f8d1 c000 	ldr.w	ip, [r1]
 8005104:	b293      	uxth	r3, r2
 8005106:	1ac3      	subs	r3, r0, r3
 8005108:	0c12      	lsrs	r2, r2, #16
 800510a:	fa13 f38c 	uxtah	r3, r3, ip
 800510e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005112:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005116:	b29b      	uxth	r3, r3
 8005118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800511c:	45c1      	cmp	r9, r8
 800511e:	f841 3b04 	str.w	r3, [r1], #4
 8005122:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005126:	d2e9      	bcs.n	80050fc <quorem+0xac>
 8005128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800512c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005130:	b922      	cbnz	r2, 800513c <quorem+0xec>
 8005132:	3b04      	subs	r3, #4
 8005134:	429d      	cmp	r5, r3
 8005136:	461a      	mov	r2, r3
 8005138:	d30a      	bcc.n	8005150 <quorem+0x100>
 800513a:	613c      	str	r4, [r7, #16]
 800513c:	4630      	mov	r0, r6
 800513e:	b003      	add	sp, #12
 8005140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	3b04      	subs	r3, #4
 8005148:	2a00      	cmp	r2, #0
 800514a:	d1ce      	bne.n	80050ea <quorem+0x9a>
 800514c:	3c01      	subs	r4, #1
 800514e:	e7c9      	b.n	80050e4 <quorem+0x94>
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	3b04      	subs	r3, #4
 8005154:	2a00      	cmp	r2, #0
 8005156:	d1f0      	bne.n	800513a <quorem+0xea>
 8005158:	3c01      	subs	r4, #1
 800515a:	e7eb      	b.n	8005134 <quorem+0xe4>
 800515c:	2000      	movs	r0, #0
 800515e:	e7ee      	b.n	800513e <quorem+0xee>

08005160 <_dtoa_r>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	ed2d 8b04 	vpush	{d8-d9}
 8005168:	69c5      	ldr	r5, [r0, #28]
 800516a:	b093      	sub	sp, #76	; 0x4c
 800516c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005170:	ec57 6b10 	vmov	r6, r7, d0
 8005174:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005178:	9107      	str	r1, [sp, #28]
 800517a:	4604      	mov	r4, r0
 800517c:	920a      	str	r2, [sp, #40]	; 0x28
 800517e:	930d      	str	r3, [sp, #52]	; 0x34
 8005180:	b975      	cbnz	r5, 80051a0 <_dtoa_r+0x40>
 8005182:	2010      	movs	r0, #16
 8005184:	f000 fe2a 	bl	8005ddc <malloc>
 8005188:	4602      	mov	r2, r0
 800518a:	61e0      	str	r0, [r4, #28]
 800518c:	b920      	cbnz	r0, 8005198 <_dtoa_r+0x38>
 800518e:	4bae      	ldr	r3, [pc, #696]	; (8005448 <_dtoa_r+0x2e8>)
 8005190:	21ef      	movs	r1, #239	; 0xef
 8005192:	48ae      	ldr	r0, [pc, #696]	; (800544c <_dtoa_r+0x2ec>)
 8005194:	f002 fc74 	bl	8007a80 <__assert_func>
 8005198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800519c:	6005      	str	r5, [r0, #0]
 800519e:	60c5      	str	r5, [r0, #12]
 80051a0:	69e3      	ldr	r3, [r4, #28]
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	b151      	cbz	r1, 80051bc <_dtoa_r+0x5c>
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	604a      	str	r2, [r1, #4]
 80051aa:	2301      	movs	r3, #1
 80051ac:	4093      	lsls	r3, r2
 80051ae:	608b      	str	r3, [r1, #8]
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 ff07 	bl	8005fc4 <_Bfree>
 80051b6:	69e3      	ldr	r3, [r4, #28]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	1e3b      	subs	r3, r7, #0
 80051be:	bfbb      	ittet	lt
 80051c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051c4:	9303      	strlt	r3, [sp, #12]
 80051c6:	2300      	movge	r3, #0
 80051c8:	2201      	movlt	r2, #1
 80051ca:	bfac      	ite	ge
 80051cc:	f8c8 3000 	strge.w	r3, [r8]
 80051d0:	f8c8 2000 	strlt.w	r2, [r8]
 80051d4:	4b9e      	ldr	r3, [pc, #632]	; (8005450 <_dtoa_r+0x2f0>)
 80051d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051da:	ea33 0308 	bics.w	r3, r3, r8
 80051de:	d11b      	bne.n	8005218 <_dtoa_r+0xb8>
 80051e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051ec:	4333      	orrs	r3, r6
 80051ee:	f000 8593 	beq.w	8005d18 <_dtoa_r+0xbb8>
 80051f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051f4:	b963      	cbnz	r3, 8005210 <_dtoa_r+0xb0>
 80051f6:	4b97      	ldr	r3, [pc, #604]	; (8005454 <_dtoa_r+0x2f4>)
 80051f8:	e027      	b.n	800524a <_dtoa_r+0xea>
 80051fa:	4b97      	ldr	r3, [pc, #604]	; (8005458 <_dtoa_r+0x2f8>)
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	9800      	ldr	r0, [sp, #0]
 8005206:	b013      	add	sp, #76	; 0x4c
 8005208:	ecbd 8b04 	vpop	{d8-d9}
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005210:	4b90      	ldr	r3, [pc, #576]	; (8005454 <_dtoa_r+0x2f4>)
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	3303      	adds	r3, #3
 8005216:	e7f3      	b.n	8005200 <_dtoa_r+0xa0>
 8005218:	ed9d 7b02 	vldr	d7, [sp, #8]
 800521c:	2200      	movs	r2, #0
 800521e:	ec51 0b17 	vmov	r0, r1, d7
 8005222:	eeb0 8a47 	vmov.f32	s16, s14
 8005226:	eef0 8a67 	vmov.f32	s17, s15
 800522a:	2300      	movs	r3, #0
 800522c:	f7fb fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 8005230:	4681      	mov	r9, r0
 8005232:	b160      	cbz	r0, 800524e <_dtoa_r+0xee>
 8005234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005236:	2301      	movs	r3, #1
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8568 	beq.w	8005d12 <_dtoa_r+0xbb2>
 8005242:	4b86      	ldr	r3, [pc, #536]	; (800545c <_dtoa_r+0x2fc>)
 8005244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	e7da      	b.n	8005204 <_dtoa_r+0xa4>
 800524e:	aa10      	add	r2, sp, #64	; 0x40
 8005250:	a911      	add	r1, sp, #68	; 0x44
 8005252:	4620      	mov	r0, r4
 8005254:	eeb0 0a48 	vmov.f32	s0, s16
 8005258:	eef0 0a68 	vmov.f32	s1, s17
 800525c:	f001 fa4e 	bl	80066fc <__d2b>
 8005260:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005264:	4682      	mov	sl, r0
 8005266:	2d00      	cmp	r5, #0
 8005268:	d07f      	beq.n	800536a <_dtoa_r+0x20a>
 800526a:	ee18 3a90 	vmov	r3, s17
 800526e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005272:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005276:	ec51 0b18 	vmov	r0, r1, d8
 800527a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800527e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005282:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005286:	4619      	mov	r1, r3
 8005288:	2200      	movs	r2, #0
 800528a:	4b75      	ldr	r3, [pc, #468]	; (8005460 <_dtoa_r+0x300>)
 800528c:	f7fb f81c 	bl	80002c8 <__aeabi_dsub>
 8005290:	a367      	add	r3, pc, #412	; (adr r3, 8005430 <_dtoa_r+0x2d0>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f9cf 	bl	8000638 <__aeabi_dmul>
 800529a:	a367      	add	r3, pc, #412	; (adr r3, 8005438 <_dtoa_r+0x2d8>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb f814 	bl	80002cc <__adddf3>
 80052a4:	4606      	mov	r6, r0
 80052a6:	4628      	mov	r0, r5
 80052a8:	460f      	mov	r7, r1
 80052aa:	f7fb f95b 	bl	8000564 <__aeabi_i2d>
 80052ae:	a364      	add	r3, pc, #400	; (adr r3, 8005440 <_dtoa_r+0x2e0>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fb f9c0 	bl	8000638 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	f7fb f804 	bl	80002cc <__adddf3>
 80052c4:	4606      	mov	r6, r0
 80052c6:	460f      	mov	r7, r1
 80052c8:	f7fb fc66 	bl	8000b98 <__aeabi_d2iz>
 80052cc:	2200      	movs	r2, #0
 80052ce:	4683      	mov	fp, r0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4630      	mov	r0, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	f7fb fc21 	bl	8000b1c <__aeabi_dcmplt>
 80052da:	b148      	cbz	r0, 80052f0 <_dtoa_r+0x190>
 80052dc:	4658      	mov	r0, fp
 80052de:	f7fb f941 	bl	8000564 <__aeabi_i2d>
 80052e2:	4632      	mov	r2, r6
 80052e4:	463b      	mov	r3, r7
 80052e6:	f7fb fc0f 	bl	8000b08 <__aeabi_dcmpeq>
 80052ea:	b908      	cbnz	r0, 80052f0 <_dtoa_r+0x190>
 80052ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052f0:	f1bb 0f16 	cmp.w	fp, #22
 80052f4:	d857      	bhi.n	80053a6 <_dtoa_r+0x246>
 80052f6:	4b5b      	ldr	r3, [pc, #364]	; (8005464 <_dtoa_r+0x304>)
 80052f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	ec51 0b18 	vmov	r0, r1, d8
 8005304:	f7fb fc0a 	bl	8000b1c <__aeabi_dcmplt>
 8005308:	2800      	cmp	r0, #0
 800530a:	d04e      	beq.n	80053aa <_dtoa_r+0x24a>
 800530c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005310:	2300      	movs	r3, #0
 8005312:	930c      	str	r3, [sp, #48]	; 0x30
 8005314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005316:	1b5b      	subs	r3, r3, r5
 8005318:	1e5a      	subs	r2, r3, #1
 800531a:	bf45      	ittet	mi
 800531c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005320:	9305      	strmi	r3, [sp, #20]
 8005322:	2300      	movpl	r3, #0
 8005324:	2300      	movmi	r3, #0
 8005326:	9206      	str	r2, [sp, #24]
 8005328:	bf54      	ite	pl
 800532a:	9305      	strpl	r3, [sp, #20]
 800532c:	9306      	strmi	r3, [sp, #24]
 800532e:	f1bb 0f00 	cmp.w	fp, #0
 8005332:	db3c      	blt.n	80053ae <_dtoa_r+0x24e>
 8005334:	9b06      	ldr	r3, [sp, #24]
 8005336:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800533a:	445b      	add	r3, fp
 800533c:	9306      	str	r3, [sp, #24]
 800533e:	2300      	movs	r3, #0
 8005340:	9308      	str	r3, [sp, #32]
 8005342:	9b07      	ldr	r3, [sp, #28]
 8005344:	2b09      	cmp	r3, #9
 8005346:	d868      	bhi.n	800541a <_dtoa_r+0x2ba>
 8005348:	2b05      	cmp	r3, #5
 800534a:	bfc4      	itt	gt
 800534c:	3b04      	subgt	r3, #4
 800534e:	9307      	strgt	r3, [sp, #28]
 8005350:	9b07      	ldr	r3, [sp, #28]
 8005352:	f1a3 0302 	sub.w	r3, r3, #2
 8005356:	bfcc      	ite	gt
 8005358:	2500      	movgt	r5, #0
 800535a:	2501      	movle	r5, #1
 800535c:	2b03      	cmp	r3, #3
 800535e:	f200 8085 	bhi.w	800546c <_dtoa_r+0x30c>
 8005362:	e8df f003 	tbb	[pc, r3]
 8005366:	3b2e      	.short	0x3b2e
 8005368:	5839      	.short	0x5839
 800536a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800536e:	441d      	add	r5, r3
 8005370:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005374:	2b20      	cmp	r3, #32
 8005376:	bfc1      	itttt	gt
 8005378:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800537c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005380:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005384:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005388:	bfd6      	itet	le
 800538a:	f1c3 0320 	rsble	r3, r3, #32
 800538e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005392:	fa06 f003 	lslle.w	r0, r6, r3
 8005396:	f7fb f8d5 	bl	8000544 <__aeabi_ui2d>
 800539a:	2201      	movs	r2, #1
 800539c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80053a0:	3d01      	subs	r5, #1
 80053a2:	920e      	str	r2, [sp, #56]	; 0x38
 80053a4:	e76f      	b.n	8005286 <_dtoa_r+0x126>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e7b3      	b.n	8005312 <_dtoa_r+0x1b2>
 80053aa:	900c      	str	r0, [sp, #48]	; 0x30
 80053ac:	e7b2      	b.n	8005314 <_dtoa_r+0x1b4>
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	eba3 030b 	sub.w	r3, r3, fp
 80053b4:	9305      	str	r3, [sp, #20]
 80053b6:	f1cb 0300 	rsb	r3, fp, #0
 80053ba:	9308      	str	r3, [sp, #32]
 80053bc:	2300      	movs	r3, #0
 80053be:	930b      	str	r3, [sp, #44]	; 0x2c
 80053c0:	e7bf      	b.n	8005342 <_dtoa_r+0x1e2>
 80053c2:	2300      	movs	r3, #0
 80053c4:	9309      	str	r3, [sp, #36]	; 0x24
 80053c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dc52      	bgt.n	8005472 <_dtoa_r+0x312>
 80053cc:	2301      	movs	r3, #1
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	461a      	mov	r2, r3
 80053d4:	920a      	str	r2, [sp, #40]	; 0x28
 80053d6:	e00b      	b.n	80053f0 <_dtoa_r+0x290>
 80053d8:	2301      	movs	r3, #1
 80053da:	e7f3      	b.n	80053c4 <_dtoa_r+0x264>
 80053dc:	2300      	movs	r3, #0
 80053de:	9309      	str	r3, [sp, #36]	; 0x24
 80053e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e2:	445b      	add	r3, fp
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	3301      	adds	r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	9304      	str	r3, [sp, #16]
 80053ec:	bfb8      	it	lt
 80053ee:	2301      	movlt	r3, #1
 80053f0:	69e0      	ldr	r0, [r4, #28]
 80053f2:	2100      	movs	r1, #0
 80053f4:	2204      	movs	r2, #4
 80053f6:	f102 0614 	add.w	r6, r2, #20
 80053fa:	429e      	cmp	r6, r3
 80053fc:	d93d      	bls.n	800547a <_dtoa_r+0x31a>
 80053fe:	6041      	str	r1, [r0, #4]
 8005400:	4620      	mov	r0, r4
 8005402:	f000 fd9f 	bl	8005f44 <_Balloc>
 8005406:	9000      	str	r0, [sp, #0]
 8005408:	2800      	cmp	r0, #0
 800540a:	d139      	bne.n	8005480 <_dtoa_r+0x320>
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <_dtoa_r+0x308>)
 800540e:	4602      	mov	r2, r0
 8005410:	f240 11af 	movw	r1, #431	; 0x1af
 8005414:	e6bd      	b.n	8005192 <_dtoa_r+0x32>
 8005416:	2301      	movs	r3, #1
 8005418:	e7e1      	b.n	80053de <_dtoa_r+0x27e>
 800541a:	2501      	movs	r5, #1
 800541c:	2300      	movs	r3, #0
 800541e:	9307      	str	r3, [sp, #28]
 8005420:	9509      	str	r5, [sp, #36]	; 0x24
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	2200      	movs	r2, #0
 800542c:	2312      	movs	r3, #18
 800542e:	e7d1      	b.n	80053d4 <_dtoa_r+0x274>
 8005430:	636f4361 	.word	0x636f4361
 8005434:	3fd287a7 	.word	0x3fd287a7
 8005438:	8b60c8b3 	.word	0x8b60c8b3
 800543c:	3fc68a28 	.word	0x3fc68a28
 8005440:	509f79fb 	.word	0x509f79fb
 8005444:	3fd34413 	.word	0x3fd34413
 8005448:	080095be 	.word	0x080095be
 800544c:	080095d5 	.word	0x080095d5
 8005450:	7ff00000 	.word	0x7ff00000
 8005454:	080095ba 	.word	0x080095ba
 8005458:	080095b1 	.word	0x080095b1
 800545c:	08009589 	.word	0x08009589
 8005460:	3ff80000 	.word	0x3ff80000
 8005464:	080096c0 	.word	0x080096c0
 8005468:	0800962d 	.word	0x0800962d
 800546c:	2301      	movs	r3, #1
 800546e:	9309      	str	r3, [sp, #36]	; 0x24
 8005470:	e7d7      	b.n	8005422 <_dtoa_r+0x2c2>
 8005472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	e7ba      	b.n	80053f0 <_dtoa_r+0x290>
 800547a:	3101      	adds	r1, #1
 800547c:	0052      	lsls	r2, r2, #1
 800547e:	e7ba      	b.n	80053f6 <_dtoa_r+0x296>
 8005480:	69e3      	ldr	r3, [r4, #28]
 8005482:	9a00      	ldr	r2, [sp, #0]
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	9b04      	ldr	r3, [sp, #16]
 8005488:	2b0e      	cmp	r3, #14
 800548a:	f200 80a8 	bhi.w	80055de <_dtoa_r+0x47e>
 800548e:	2d00      	cmp	r5, #0
 8005490:	f000 80a5 	beq.w	80055de <_dtoa_r+0x47e>
 8005494:	f1bb 0f00 	cmp.w	fp, #0
 8005498:	dd38      	ble.n	800550c <_dtoa_r+0x3ac>
 800549a:	4bc0      	ldr	r3, [pc, #768]	; (800579c <_dtoa_r+0x63c>)
 800549c:	f00b 020f 	and.w	r2, fp, #15
 80054a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80054a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80054ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80054b0:	d019      	beq.n	80054e6 <_dtoa_r+0x386>
 80054b2:	4bbb      	ldr	r3, [pc, #748]	; (80057a0 <_dtoa_r+0x640>)
 80054b4:	ec51 0b18 	vmov	r0, r1, d8
 80054b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054bc:	f7fb f9e6 	bl	800088c <__aeabi_ddiv>
 80054c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c4:	f008 080f 	and.w	r8, r8, #15
 80054c8:	2503      	movs	r5, #3
 80054ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80057a0 <_dtoa_r+0x640>
 80054ce:	f1b8 0f00 	cmp.w	r8, #0
 80054d2:	d10a      	bne.n	80054ea <_dtoa_r+0x38a>
 80054d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d8:	4632      	mov	r2, r6
 80054da:	463b      	mov	r3, r7
 80054dc:	f7fb f9d6 	bl	800088c <__aeabi_ddiv>
 80054e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054e4:	e02b      	b.n	800553e <_dtoa_r+0x3de>
 80054e6:	2502      	movs	r5, #2
 80054e8:	e7ef      	b.n	80054ca <_dtoa_r+0x36a>
 80054ea:	f018 0f01 	tst.w	r8, #1
 80054ee:	d008      	beq.n	8005502 <_dtoa_r+0x3a2>
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80054f8:	f7fb f89e 	bl	8000638 <__aeabi_dmul>
 80054fc:	3501      	adds	r5, #1
 80054fe:	4606      	mov	r6, r0
 8005500:	460f      	mov	r7, r1
 8005502:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005506:	f109 0908 	add.w	r9, r9, #8
 800550a:	e7e0      	b.n	80054ce <_dtoa_r+0x36e>
 800550c:	f000 809f 	beq.w	800564e <_dtoa_r+0x4ee>
 8005510:	f1cb 0600 	rsb	r6, fp, #0
 8005514:	4ba1      	ldr	r3, [pc, #644]	; (800579c <_dtoa_r+0x63c>)
 8005516:	4fa2      	ldr	r7, [pc, #648]	; (80057a0 <_dtoa_r+0x640>)
 8005518:	f006 020f 	and.w	r2, r6, #15
 800551c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	ec51 0b18 	vmov	r0, r1, d8
 8005528:	f7fb f886 	bl	8000638 <__aeabi_dmul>
 800552c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005530:	1136      	asrs	r6, r6, #4
 8005532:	2300      	movs	r3, #0
 8005534:	2502      	movs	r5, #2
 8005536:	2e00      	cmp	r6, #0
 8005538:	d17e      	bne.n	8005638 <_dtoa_r+0x4d8>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1d0      	bne.n	80054e0 <_dtoa_r+0x380>
 800553e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005540:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8084 	beq.w	8005652 <_dtoa_r+0x4f2>
 800554a:	4b96      	ldr	r3, [pc, #600]	; (80057a4 <_dtoa_r+0x644>)
 800554c:	2200      	movs	r2, #0
 800554e:	4640      	mov	r0, r8
 8005550:	4649      	mov	r1, r9
 8005552:	f7fb fae3 	bl	8000b1c <__aeabi_dcmplt>
 8005556:	2800      	cmp	r0, #0
 8005558:	d07b      	beq.n	8005652 <_dtoa_r+0x4f2>
 800555a:	9b04      	ldr	r3, [sp, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d078      	beq.n	8005652 <_dtoa_r+0x4f2>
 8005560:	9b01      	ldr	r3, [sp, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	dd39      	ble.n	80055da <_dtoa_r+0x47a>
 8005566:	4b90      	ldr	r3, [pc, #576]	; (80057a8 <_dtoa_r+0x648>)
 8005568:	2200      	movs	r2, #0
 800556a:	4640      	mov	r0, r8
 800556c:	4649      	mov	r1, r9
 800556e:	f7fb f863 	bl	8000638 <__aeabi_dmul>
 8005572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005576:	9e01      	ldr	r6, [sp, #4]
 8005578:	f10b 37ff 	add.w	r7, fp, #4294967295
 800557c:	3501      	adds	r5, #1
 800557e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005582:	4628      	mov	r0, r5
 8005584:	f7fa ffee 	bl	8000564 <__aeabi_i2d>
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	f7fb f854 	bl	8000638 <__aeabi_dmul>
 8005590:	4b86      	ldr	r3, [pc, #536]	; (80057ac <_dtoa_r+0x64c>)
 8005592:	2200      	movs	r2, #0
 8005594:	f7fa fe9a 	bl	80002cc <__adddf3>
 8005598:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800559c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055a0:	9303      	str	r3, [sp, #12]
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	d158      	bne.n	8005658 <_dtoa_r+0x4f8>
 80055a6:	4b82      	ldr	r3, [pc, #520]	; (80057b0 <_dtoa_r+0x650>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fa fe8b 	bl	80002c8 <__aeabi_dsub>
 80055b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b6:	4680      	mov	r8, r0
 80055b8:	4689      	mov	r9, r1
 80055ba:	f7fb facd 	bl	8000b58 <__aeabi_dcmpgt>
 80055be:	2800      	cmp	r0, #0
 80055c0:	f040 8296 	bne.w	8005af0 <_dtoa_r+0x990>
 80055c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055c8:	4640      	mov	r0, r8
 80055ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ce:	4649      	mov	r1, r9
 80055d0:	f7fb faa4 	bl	8000b1c <__aeabi_dcmplt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f040 8289 	bne.w	8005aec <_dtoa_r+0x98c>
 80055da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80055de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f2c0 814e 	blt.w	8005882 <_dtoa_r+0x722>
 80055e6:	f1bb 0f0e 	cmp.w	fp, #14
 80055ea:	f300 814a 	bgt.w	8005882 <_dtoa_r+0x722>
 80055ee:	4b6b      	ldr	r3, [pc, #428]	; (800579c <_dtoa_r+0x63c>)
 80055f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f280 80dc 	bge.w	80057b8 <_dtoa_r+0x658>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f300 80d8 	bgt.w	80057b8 <_dtoa_r+0x658>
 8005608:	f040 826f 	bne.w	8005aea <_dtoa_r+0x98a>
 800560c:	4b68      	ldr	r3, [pc, #416]	; (80057b0 <_dtoa_r+0x650>)
 800560e:	2200      	movs	r2, #0
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	f7fb f810 	bl	8000638 <__aeabi_dmul>
 8005618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561c:	f7fb fa92 	bl	8000b44 <__aeabi_dcmpge>
 8005620:	9e04      	ldr	r6, [sp, #16]
 8005622:	4637      	mov	r7, r6
 8005624:	2800      	cmp	r0, #0
 8005626:	f040 8245 	bne.w	8005ab4 <_dtoa_r+0x954>
 800562a:	9d00      	ldr	r5, [sp, #0]
 800562c:	2331      	movs	r3, #49	; 0x31
 800562e:	f805 3b01 	strb.w	r3, [r5], #1
 8005632:	f10b 0b01 	add.w	fp, fp, #1
 8005636:	e241      	b.n	8005abc <_dtoa_r+0x95c>
 8005638:	07f2      	lsls	r2, r6, #31
 800563a:	d505      	bpl.n	8005648 <_dtoa_r+0x4e8>
 800563c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005640:	f7fa fffa 	bl	8000638 <__aeabi_dmul>
 8005644:	3501      	adds	r5, #1
 8005646:	2301      	movs	r3, #1
 8005648:	1076      	asrs	r6, r6, #1
 800564a:	3708      	adds	r7, #8
 800564c:	e773      	b.n	8005536 <_dtoa_r+0x3d6>
 800564e:	2502      	movs	r5, #2
 8005650:	e775      	b.n	800553e <_dtoa_r+0x3de>
 8005652:	9e04      	ldr	r6, [sp, #16]
 8005654:	465f      	mov	r7, fp
 8005656:	e792      	b.n	800557e <_dtoa_r+0x41e>
 8005658:	9900      	ldr	r1, [sp, #0]
 800565a:	4b50      	ldr	r3, [pc, #320]	; (800579c <_dtoa_r+0x63c>)
 800565c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005660:	4431      	add	r1, r6
 8005662:	9102      	str	r1, [sp, #8]
 8005664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005666:	eeb0 9a47 	vmov.f32	s18, s14
 800566a:	eef0 9a67 	vmov.f32	s19, s15
 800566e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005676:	2900      	cmp	r1, #0
 8005678:	d044      	beq.n	8005704 <_dtoa_r+0x5a4>
 800567a:	494e      	ldr	r1, [pc, #312]	; (80057b4 <_dtoa_r+0x654>)
 800567c:	2000      	movs	r0, #0
 800567e:	f7fb f905 	bl	800088c <__aeabi_ddiv>
 8005682:	ec53 2b19 	vmov	r2, r3, d9
 8005686:	f7fa fe1f 	bl	80002c8 <__aeabi_dsub>
 800568a:	9d00      	ldr	r5, [sp, #0]
 800568c:	ec41 0b19 	vmov	d9, r0, r1
 8005690:	4649      	mov	r1, r9
 8005692:	4640      	mov	r0, r8
 8005694:	f7fb fa80 	bl	8000b98 <__aeabi_d2iz>
 8005698:	4606      	mov	r6, r0
 800569a:	f7fa ff63 	bl	8000564 <__aeabi_i2d>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4640      	mov	r0, r8
 80056a4:	4649      	mov	r1, r9
 80056a6:	f7fa fe0f 	bl	80002c8 <__aeabi_dsub>
 80056aa:	3630      	adds	r6, #48	; 0x30
 80056ac:	f805 6b01 	strb.w	r6, [r5], #1
 80056b0:	ec53 2b19 	vmov	r2, r3, d9
 80056b4:	4680      	mov	r8, r0
 80056b6:	4689      	mov	r9, r1
 80056b8:	f7fb fa30 	bl	8000b1c <__aeabi_dcmplt>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d164      	bne.n	800578a <_dtoa_r+0x62a>
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	4937      	ldr	r1, [pc, #220]	; (80057a4 <_dtoa_r+0x644>)
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7fa fdfe 	bl	80002c8 <__aeabi_dsub>
 80056cc:	ec53 2b19 	vmov	r2, r3, d9
 80056d0:	f7fb fa24 	bl	8000b1c <__aeabi_dcmplt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f040 80b6 	bne.w	8005846 <_dtoa_r+0x6e6>
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	429d      	cmp	r5, r3
 80056de:	f43f af7c 	beq.w	80055da <_dtoa_r+0x47a>
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <_dtoa_r+0x648>)
 80056e4:	ec51 0b19 	vmov	r0, r1, d9
 80056e8:	2200      	movs	r2, #0
 80056ea:	f7fa ffa5 	bl	8000638 <__aeabi_dmul>
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <_dtoa_r+0x648>)
 80056f0:	ec41 0b19 	vmov	d9, r0, r1
 80056f4:	2200      	movs	r2, #0
 80056f6:	4640      	mov	r0, r8
 80056f8:	4649      	mov	r1, r9
 80056fa:	f7fa ff9d 	bl	8000638 <__aeabi_dmul>
 80056fe:	4680      	mov	r8, r0
 8005700:	4689      	mov	r9, r1
 8005702:	e7c5      	b.n	8005690 <_dtoa_r+0x530>
 8005704:	ec51 0b17 	vmov	r0, r1, d7
 8005708:	f7fa ff96 	bl	8000638 <__aeabi_dmul>
 800570c:	9b02      	ldr	r3, [sp, #8]
 800570e:	9d00      	ldr	r5, [sp, #0]
 8005710:	930f      	str	r3, [sp, #60]	; 0x3c
 8005712:	ec41 0b19 	vmov	d9, r0, r1
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	f7fb fa3d 	bl	8000b98 <__aeabi_d2iz>
 800571e:	4606      	mov	r6, r0
 8005720:	f7fa ff20 	bl	8000564 <__aeabi_i2d>
 8005724:	3630      	adds	r6, #48	; 0x30
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4640      	mov	r0, r8
 800572c:	4649      	mov	r1, r9
 800572e:	f7fa fdcb 	bl	80002c8 <__aeabi_dsub>
 8005732:	f805 6b01 	strb.w	r6, [r5], #1
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	429d      	cmp	r5, r3
 800573a:	4680      	mov	r8, r0
 800573c:	4689      	mov	r9, r1
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	d124      	bne.n	800578e <_dtoa_r+0x62e>
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <_dtoa_r+0x654>)
 8005746:	ec51 0b19 	vmov	r0, r1, d9
 800574a:	f7fa fdbf 	bl	80002cc <__adddf3>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4640      	mov	r0, r8
 8005754:	4649      	mov	r1, r9
 8005756:	f7fb f9ff 	bl	8000b58 <__aeabi_dcmpgt>
 800575a:	2800      	cmp	r0, #0
 800575c:	d173      	bne.n	8005846 <_dtoa_r+0x6e6>
 800575e:	ec53 2b19 	vmov	r2, r3, d9
 8005762:	4914      	ldr	r1, [pc, #80]	; (80057b4 <_dtoa_r+0x654>)
 8005764:	2000      	movs	r0, #0
 8005766:	f7fa fdaf 	bl	80002c8 <__aeabi_dsub>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4640      	mov	r0, r8
 8005770:	4649      	mov	r1, r9
 8005772:	f7fb f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8005776:	2800      	cmp	r0, #0
 8005778:	f43f af2f 	beq.w	80055da <_dtoa_r+0x47a>
 800577c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800577e:	1e6b      	subs	r3, r5, #1
 8005780:	930f      	str	r3, [sp, #60]	; 0x3c
 8005782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005786:	2b30      	cmp	r3, #48	; 0x30
 8005788:	d0f8      	beq.n	800577c <_dtoa_r+0x61c>
 800578a:	46bb      	mov	fp, r7
 800578c:	e04a      	b.n	8005824 <_dtoa_r+0x6c4>
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <_dtoa_r+0x648>)
 8005790:	f7fa ff52 	bl	8000638 <__aeabi_dmul>
 8005794:	4680      	mov	r8, r0
 8005796:	4689      	mov	r9, r1
 8005798:	e7bd      	b.n	8005716 <_dtoa_r+0x5b6>
 800579a:	bf00      	nop
 800579c:	080096c0 	.word	0x080096c0
 80057a0:	08009698 	.word	0x08009698
 80057a4:	3ff00000 	.word	0x3ff00000
 80057a8:	40240000 	.word	0x40240000
 80057ac:	401c0000 	.word	0x401c0000
 80057b0:	40140000 	.word	0x40140000
 80057b4:	3fe00000 	.word	0x3fe00000
 80057b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057bc:	9d00      	ldr	r5, [sp, #0]
 80057be:	4642      	mov	r2, r8
 80057c0:	464b      	mov	r3, r9
 80057c2:	4630      	mov	r0, r6
 80057c4:	4639      	mov	r1, r7
 80057c6:	f7fb f861 	bl	800088c <__aeabi_ddiv>
 80057ca:	f7fb f9e5 	bl	8000b98 <__aeabi_d2iz>
 80057ce:	9001      	str	r0, [sp, #4]
 80057d0:	f7fa fec8 	bl	8000564 <__aeabi_i2d>
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	f7fa ff2e 	bl	8000638 <__aeabi_dmul>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4630      	mov	r0, r6
 80057e2:	4639      	mov	r1, r7
 80057e4:	f7fa fd70 	bl	80002c8 <__aeabi_dsub>
 80057e8:	9e01      	ldr	r6, [sp, #4]
 80057ea:	9f04      	ldr	r7, [sp, #16]
 80057ec:	3630      	adds	r6, #48	; 0x30
 80057ee:	f805 6b01 	strb.w	r6, [r5], #1
 80057f2:	9e00      	ldr	r6, [sp, #0]
 80057f4:	1bae      	subs	r6, r5, r6
 80057f6:	42b7      	cmp	r7, r6
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	d134      	bne.n	8005868 <_dtoa_r+0x708>
 80057fe:	f7fa fd65 	bl	80002cc <__adddf3>
 8005802:	4642      	mov	r2, r8
 8005804:	464b      	mov	r3, r9
 8005806:	4606      	mov	r6, r0
 8005808:	460f      	mov	r7, r1
 800580a:	f7fb f9a5 	bl	8000b58 <__aeabi_dcmpgt>
 800580e:	b9c8      	cbnz	r0, 8005844 <_dtoa_r+0x6e4>
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	4630      	mov	r0, r6
 8005816:	4639      	mov	r1, r7
 8005818:	f7fb f976 	bl	8000b08 <__aeabi_dcmpeq>
 800581c:	b110      	cbz	r0, 8005824 <_dtoa_r+0x6c4>
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	07db      	lsls	r3, r3, #31
 8005822:	d40f      	bmi.n	8005844 <_dtoa_r+0x6e4>
 8005824:	4651      	mov	r1, sl
 8005826:	4620      	mov	r0, r4
 8005828:	f000 fbcc 	bl	8005fc4 <_Bfree>
 800582c:	2300      	movs	r3, #0
 800582e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005830:	702b      	strb	r3, [r5, #0]
 8005832:	f10b 0301 	add.w	r3, fp, #1
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800583a:	2b00      	cmp	r3, #0
 800583c:	f43f ace2 	beq.w	8005204 <_dtoa_r+0xa4>
 8005840:	601d      	str	r5, [r3, #0]
 8005842:	e4df      	b.n	8005204 <_dtoa_r+0xa4>
 8005844:	465f      	mov	r7, fp
 8005846:	462b      	mov	r3, r5
 8005848:	461d      	mov	r5, r3
 800584a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800584e:	2a39      	cmp	r2, #57	; 0x39
 8005850:	d106      	bne.n	8005860 <_dtoa_r+0x700>
 8005852:	9a00      	ldr	r2, [sp, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d1f7      	bne.n	8005848 <_dtoa_r+0x6e8>
 8005858:	9900      	ldr	r1, [sp, #0]
 800585a:	2230      	movs	r2, #48	; 0x30
 800585c:	3701      	adds	r7, #1
 800585e:	700a      	strb	r2, [r1, #0]
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	3201      	adds	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e790      	b.n	800578a <_dtoa_r+0x62a>
 8005868:	4ba3      	ldr	r3, [pc, #652]	; (8005af8 <_dtoa_r+0x998>)
 800586a:	2200      	movs	r2, #0
 800586c:	f7fa fee4 	bl	8000638 <__aeabi_dmul>
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	4606      	mov	r6, r0
 8005876:	460f      	mov	r7, r1
 8005878:	f7fb f946 	bl	8000b08 <__aeabi_dcmpeq>
 800587c:	2800      	cmp	r0, #0
 800587e:	d09e      	beq.n	80057be <_dtoa_r+0x65e>
 8005880:	e7d0      	b.n	8005824 <_dtoa_r+0x6c4>
 8005882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005884:	2a00      	cmp	r2, #0
 8005886:	f000 80ca 	beq.w	8005a1e <_dtoa_r+0x8be>
 800588a:	9a07      	ldr	r2, [sp, #28]
 800588c:	2a01      	cmp	r2, #1
 800588e:	f300 80ad 	bgt.w	80059ec <_dtoa_r+0x88c>
 8005892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 80a5 	beq.w	80059e4 <_dtoa_r+0x884>
 800589a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800589e:	9e08      	ldr	r6, [sp, #32]
 80058a0:	9d05      	ldr	r5, [sp, #20]
 80058a2:	9a05      	ldr	r2, [sp, #20]
 80058a4:	441a      	add	r2, r3
 80058a6:	9205      	str	r2, [sp, #20]
 80058a8:	9a06      	ldr	r2, [sp, #24]
 80058aa:	2101      	movs	r1, #1
 80058ac:	441a      	add	r2, r3
 80058ae:	4620      	mov	r0, r4
 80058b0:	9206      	str	r2, [sp, #24]
 80058b2:	f000 fc87 	bl	80061c4 <__i2b>
 80058b6:	4607      	mov	r7, r0
 80058b8:	b165      	cbz	r5, 80058d4 <_dtoa_r+0x774>
 80058ba:	9b06      	ldr	r3, [sp, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dd09      	ble.n	80058d4 <_dtoa_r+0x774>
 80058c0:	42ab      	cmp	r3, r5
 80058c2:	9a05      	ldr	r2, [sp, #20]
 80058c4:	bfa8      	it	ge
 80058c6:	462b      	movge	r3, r5
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	9205      	str	r2, [sp, #20]
 80058cc:	9a06      	ldr	r2, [sp, #24]
 80058ce:	1aed      	subs	r5, r5, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	9306      	str	r3, [sp, #24]
 80058d4:	9b08      	ldr	r3, [sp, #32]
 80058d6:	b1f3      	cbz	r3, 8005916 <_dtoa_r+0x7b6>
 80058d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80a3 	beq.w	8005a26 <_dtoa_r+0x8c6>
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	dd10      	ble.n	8005906 <_dtoa_r+0x7a6>
 80058e4:	4639      	mov	r1, r7
 80058e6:	4632      	mov	r2, r6
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fd2b 	bl	8006344 <__pow5mult>
 80058ee:	4652      	mov	r2, sl
 80058f0:	4601      	mov	r1, r0
 80058f2:	4607      	mov	r7, r0
 80058f4:	4620      	mov	r0, r4
 80058f6:	f000 fc7b 	bl	80061f0 <__multiply>
 80058fa:	4651      	mov	r1, sl
 80058fc:	4680      	mov	r8, r0
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fb60 	bl	8005fc4 <_Bfree>
 8005904:	46c2      	mov	sl, r8
 8005906:	9b08      	ldr	r3, [sp, #32]
 8005908:	1b9a      	subs	r2, r3, r6
 800590a:	d004      	beq.n	8005916 <_dtoa_r+0x7b6>
 800590c:	4651      	mov	r1, sl
 800590e:	4620      	mov	r0, r4
 8005910:	f000 fd18 	bl	8006344 <__pow5mult>
 8005914:	4682      	mov	sl, r0
 8005916:	2101      	movs	r1, #1
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fc53 	bl	80061c4 <__i2b>
 800591e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005920:	2b00      	cmp	r3, #0
 8005922:	4606      	mov	r6, r0
 8005924:	f340 8081 	ble.w	8005a2a <_dtoa_r+0x8ca>
 8005928:	461a      	mov	r2, r3
 800592a:	4601      	mov	r1, r0
 800592c:	4620      	mov	r0, r4
 800592e:	f000 fd09 	bl	8006344 <__pow5mult>
 8005932:	9b07      	ldr	r3, [sp, #28]
 8005934:	2b01      	cmp	r3, #1
 8005936:	4606      	mov	r6, r0
 8005938:	dd7a      	ble.n	8005a30 <_dtoa_r+0x8d0>
 800593a:	f04f 0800 	mov.w	r8, #0
 800593e:	6933      	ldr	r3, [r6, #16]
 8005940:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005944:	6918      	ldr	r0, [r3, #16]
 8005946:	f000 fbef 	bl	8006128 <__hi0bits>
 800594a:	f1c0 0020 	rsb	r0, r0, #32
 800594e:	9b06      	ldr	r3, [sp, #24]
 8005950:	4418      	add	r0, r3
 8005952:	f010 001f 	ands.w	r0, r0, #31
 8005956:	f000 8094 	beq.w	8005a82 <_dtoa_r+0x922>
 800595a:	f1c0 0320 	rsb	r3, r0, #32
 800595e:	2b04      	cmp	r3, #4
 8005960:	f340 8085 	ble.w	8005a6e <_dtoa_r+0x90e>
 8005964:	9b05      	ldr	r3, [sp, #20]
 8005966:	f1c0 001c 	rsb	r0, r0, #28
 800596a:	4403      	add	r3, r0
 800596c:	9305      	str	r3, [sp, #20]
 800596e:	9b06      	ldr	r3, [sp, #24]
 8005970:	4403      	add	r3, r0
 8005972:	4405      	add	r5, r0
 8005974:	9306      	str	r3, [sp, #24]
 8005976:	9b05      	ldr	r3, [sp, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dd05      	ble.n	8005988 <_dtoa_r+0x828>
 800597c:	4651      	mov	r1, sl
 800597e:	461a      	mov	r2, r3
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fd39 	bl	80063f8 <__lshift>
 8005986:	4682      	mov	sl, r0
 8005988:	9b06      	ldr	r3, [sp, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dd05      	ble.n	800599a <_dtoa_r+0x83a>
 800598e:	4631      	mov	r1, r6
 8005990:	461a      	mov	r2, r3
 8005992:	4620      	mov	r0, r4
 8005994:	f000 fd30 	bl	80063f8 <__lshift>
 8005998:	4606      	mov	r6, r0
 800599a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800599c:	2b00      	cmp	r3, #0
 800599e:	d072      	beq.n	8005a86 <_dtoa_r+0x926>
 80059a0:	4631      	mov	r1, r6
 80059a2:	4650      	mov	r0, sl
 80059a4:	f000 fd94 	bl	80064d0 <__mcmp>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	da6c      	bge.n	8005a86 <_dtoa_r+0x926>
 80059ac:	2300      	movs	r3, #0
 80059ae:	4651      	mov	r1, sl
 80059b0:	220a      	movs	r2, #10
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fb28 	bl	8006008 <__multadd>
 80059b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059be:	4682      	mov	sl, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 81b0 	beq.w	8005d26 <_dtoa_r+0xbc6>
 80059c6:	2300      	movs	r3, #0
 80059c8:	4639      	mov	r1, r7
 80059ca:	220a      	movs	r2, #10
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 fb1b 	bl	8006008 <__multadd>
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	4607      	mov	r7, r0
 80059d8:	f300 8096 	bgt.w	8005b08 <_dtoa_r+0x9a8>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	dc59      	bgt.n	8005a96 <_dtoa_r+0x936>
 80059e2:	e091      	b.n	8005b08 <_dtoa_r+0x9a8>
 80059e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ea:	e758      	b.n	800589e <_dtoa_r+0x73e>
 80059ec:	9b04      	ldr	r3, [sp, #16]
 80059ee:	1e5e      	subs	r6, r3, #1
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	42b3      	cmp	r3, r6
 80059f4:	bfbf      	itttt	lt
 80059f6:	9b08      	ldrlt	r3, [sp, #32]
 80059f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80059fa:	9608      	strlt	r6, [sp, #32]
 80059fc:	1af3      	sublt	r3, r6, r3
 80059fe:	bfb4      	ite	lt
 8005a00:	18d2      	addlt	r2, r2, r3
 8005a02:	1b9e      	subge	r6, r3, r6
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	bfbc      	itt	lt
 8005a08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005a0a:	2600      	movlt	r6, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfb7      	itett	lt
 8005a10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005a14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005a18:	1a9d      	sublt	r5, r3, r2
 8005a1a:	2300      	movlt	r3, #0
 8005a1c:	e741      	b.n	80058a2 <_dtoa_r+0x742>
 8005a1e:	9e08      	ldr	r6, [sp, #32]
 8005a20:	9d05      	ldr	r5, [sp, #20]
 8005a22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a24:	e748      	b.n	80058b8 <_dtoa_r+0x758>
 8005a26:	9a08      	ldr	r2, [sp, #32]
 8005a28:	e770      	b.n	800590c <_dtoa_r+0x7ac>
 8005a2a:	9b07      	ldr	r3, [sp, #28]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	dc19      	bgt.n	8005a64 <_dtoa_r+0x904>
 8005a30:	9b02      	ldr	r3, [sp, #8]
 8005a32:	b9bb      	cbnz	r3, 8005a64 <_dtoa_r+0x904>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a3a:	b99b      	cbnz	r3, 8005a64 <_dtoa_r+0x904>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a42:	0d1b      	lsrs	r3, r3, #20
 8005a44:	051b      	lsls	r3, r3, #20
 8005a46:	b183      	cbz	r3, 8005a6a <_dtoa_r+0x90a>
 8005a48:	9b05      	ldr	r3, [sp, #20]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	9305      	str	r3, [sp, #20]
 8005a4e:	9b06      	ldr	r3, [sp, #24]
 8005a50:	3301      	adds	r3, #1
 8005a52:	9306      	str	r3, [sp, #24]
 8005a54:	f04f 0801 	mov.w	r8, #1
 8005a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f47f af6f 	bne.w	800593e <_dtoa_r+0x7de>
 8005a60:	2001      	movs	r0, #1
 8005a62:	e774      	b.n	800594e <_dtoa_r+0x7ee>
 8005a64:	f04f 0800 	mov.w	r8, #0
 8005a68:	e7f6      	b.n	8005a58 <_dtoa_r+0x8f8>
 8005a6a:	4698      	mov	r8, r3
 8005a6c:	e7f4      	b.n	8005a58 <_dtoa_r+0x8f8>
 8005a6e:	d082      	beq.n	8005976 <_dtoa_r+0x816>
 8005a70:	9a05      	ldr	r2, [sp, #20]
 8005a72:	331c      	adds	r3, #28
 8005a74:	441a      	add	r2, r3
 8005a76:	9205      	str	r2, [sp, #20]
 8005a78:	9a06      	ldr	r2, [sp, #24]
 8005a7a:	441a      	add	r2, r3
 8005a7c:	441d      	add	r5, r3
 8005a7e:	9206      	str	r2, [sp, #24]
 8005a80:	e779      	b.n	8005976 <_dtoa_r+0x816>
 8005a82:	4603      	mov	r3, r0
 8005a84:	e7f4      	b.n	8005a70 <_dtoa_r+0x910>
 8005a86:	9b04      	ldr	r3, [sp, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc37      	bgt.n	8005afc <_dtoa_r+0x99c>
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	dd34      	ble.n	8005afc <_dtoa_r+0x99c>
 8005a92:	9b04      	ldr	r3, [sp, #16]
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	b963      	cbnz	r3, 8005ab4 <_dtoa_r+0x954>
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	2205      	movs	r2, #5
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 fab2 	bl	8006008 <__multadd>
 8005aa4:	4601      	mov	r1, r0
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	f000 fd11 	bl	80064d0 <__mcmp>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f73f adbb 	bgt.w	800562a <_dtoa_r+0x4ca>
 8005ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab6:	9d00      	ldr	r5, [sp, #0]
 8005ab8:	ea6f 0b03 	mvn.w	fp, r3
 8005abc:	f04f 0800 	mov.w	r8, #0
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fa7e 	bl	8005fc4 <_Bfree>
 8005ac8:	2f00      	cmp	r7, #0
 8005aca:	f43f aeab 	beq.w	8005824 <_dtoa_r+0x6c4>
 8005ace:	f1b8 0f00 	cmp.w	r8, #0
 8005ad2:	d005      	beq.n	8005ae0 <_dtoa_r+0x980>
 8005ad4:	45b8      	cmp	r8, r7
 8005ad6:	d003      	beq.n	8005ae0 <_dtoa_r+0x980>
 8005ad8:	4641      	mov	r1, r8
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 fa72 	bl	8005fc4 <_Bfree>
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fa6e 	bl	8005fc4 <_Bfree>
 8005ae8:	e69c      	b.n	8005824 <_dtoa_r+0x6c4>
 8005aea:	2600      	movs	r6, #0
 8005aec:	4637      	mov	r7, r6
 8005aee:	e7e1      	b.n	8005ab4 <_dtoa_r+0x954>
 8005af0:	46bb      	mov	fp, r7
 8005af2:	4637      	mov	r7, r6
 8005af4:	e599      	b.n	800562a <_dtoa_r+0x4ca>
 8005af6:	bf00      	nop
 8005af8:	40240000 	.word	0x40240000
 8005afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80c8 	beq.w	8005c94 <_dtoa_r+0xb34>
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	dd05      	ble.n	8005b18 <_dtoa_r+0x9b8>
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 fc71 	bl	80063f8 <__lshift>
 8005b16:	4607      	mov	r7, r0
 8005b18:	f1b8 0f00 	cmp.w	r8, #0
 8005b1c:	d05b      	beq.n	8005bd6 <_dtoa_r+0xa76>
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fa0f 	bl	8005f44 <_Balloc>
 8005b26:	4605      	mov	r5, r0
 8005b28:	b928      	cbnz	r0, 8005b36 <_dtoa_r+0x9d6>
 8005b2a:	4b83      	ldr	r3, [pc, #524]	; (8005d38 <_dtoa_r+0xbd8>)
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b32:	f7ff bb2e 	b.w	8005192 <_dtoa_r+0x32>
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	3202      	adds	r2, #2
 8005b3a:	0092      	lsls	r2, r2, #2
 8005b3c:	f107 010c 	add.w	r1, r7, #12
 8005b40:	300c      	adds	r0, #12
 8005b42:	f001 ff85 	bl	8007a50 <memcpy>
 8005b46:	2201      	movs	r2, #1
 8005b48:	4629      	mov	r1, r5
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fc54 	bl	80063f8 <__lshift>
 8005b50:	9b00      	ldr	r3, [sp, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	9304      	str	r3, [sp, #16]
 8005b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	9b02      	ldr	r3, [sp, #8]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	46b8      	mov	r8, r7
 8005b66:	9306      	str	r3, [sp, #24]
 8005b68:	4607      	mov	r7, r0
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4650      	mov	r0, sl
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f7ff fa6c 	bl	8005050 <quorem>
 8005b78:	4641      	mov	r1, r8
 8005b7a:	9002      	str	r0, [sp, #8]
 8005b7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b80:	4650      	mov	r0, sl
 8005b82:	f000 fca5 	bl	80064d0 <__mcmp>
 8005b86:	463a      	mov	r2, r7
 8005b88:	9005      	str	r0, [sp, #20]
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 fcbb 	bl	8006508 <__mdiff>
 8005b92:	68c2      	ldr	r2, [r0, #12]
 8005b94:	4605      	mov	r5, r0
 8005b96:	bb02      	cbnz	r2, 8005bda <_dtoa_r+0xa7a>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f000 fc98 	bl	80064d0 <__mcmp>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba8:	f000 fa0c 	bl	8005fc4 <_Bfree>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb0:	9d04      	ldr	r5, [sp, #16]
 8005bb2:	ea43 0102 	orr.w	r1, r3, r2
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	4319      	orrs	r1, r3
 8005bba:	d110      	bne.n	8005bde <_dtoa_r+0xa7e>
 8005bbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bc0:	d029      	beq.n	8005c16 <_dtoa_r+0xab6>
 8005bc2:	9b05      	ldr	r3, [sp, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dd02      	ble.n	8005bce <_dtoa_r+0xa6e>
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	f883 9000 	strb.w	r9, [r3]
 8005bd4:	e774      	b.n	8005ac0 <_dtoa_r+0x960>
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	e7ba      	b.n	8005b50 <_dtoa_r+0x9f0>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	e7e1      	b.n	8005ba2 <_dtoa_r+0xa42>
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	db04      	blt.n	8005bee <_dtoa_r+0xa8e>
 8005be4:	9907      	ldr	r1, [sp, #28]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	9906      	ldr	r1, [sp, #24]
 8005bea:	430b      	orrs	r3, r1
 8005bec:	d120      	bne.n	8005c30 <_dtoa_r+0xad0>
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	dded      	ble.n	8005bce <_dtoa_r+0xa6e>
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 fbfe 	bl	80063f8 <__lshift>
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4682      	mov	sl, r0
 8005c00:	f000 fc66 	bl	80064d0 <__mcmp>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dc03      	bgt.n	8005c10 <_dtoa_r+0xab0>
 8005c08:	d1e1      	bne.n	8005bce <_dtoa_r+0xa6e>
 8005c0a:	f019 0f01 	tst.w	r9, #1
 8005c0e:	d0de      	beq.n	8005bce <_dtoa_r+0xa6e>
 8005c10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c14:	d1d8      	bne.n	8005bc8 <_dtoa_r+0xa68>
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	2339      	movs	r3, #57	; 0x39
 8005c1a:	7013      	strb	r3, [r2, #0]
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	461d      	mov	r5, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c26:	2a39      	cmp	r2, #57	; 0x39
 8005c28:	d06c      	beq.n	8005d04 <_dtoa_r+0xba4>
 8005c2a:	3201      	adds	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e747      	b.n	8005ac0 <_dtoa_r+0x960>
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	dd07      	ble.n	8005c44 <_dtoa_r+0xae4>
 8005c34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c38:	d0ed      	beq.n	8005c16 <_dtoa_r+0xab6>
 8005c3a:	9a01      	ldr	r2, [sp, #4]
 8005c3c:	f109 0301 	add.w	r3, r9, #1
 8005c40:	7013      	strb	r3, [r2, #0]
 8005c42:	e73d      	b.n	8005ac0 <_dtoa_r+0x960>
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	9a08      	ldr	r2, [sp, #32]
 8005c48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d043      	beq.n	8005cd8 <_dtoa_r+0xb78>
 8005c50:	4651      	mov	r1, sl
 8005c52:	2300      	movs	r3, #0
 8005c54:	220a      	movs	r2, #10
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f9d6 	bl	8006008 <__multadd>
 8005c5c:	45b8      	cmp	r8, r7
 8005c5e:	4682      	mov	sl, r0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	f04f 020a 	mov.w	r2, #10
 8005c68:	4641      	mov	r1, r8
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	d107      	bne.n	8005c7e <_dtoa_r+0xb1e>
 8005c6e:	f000 f9cb 	bl	8006008 <__multadd>
 8005c72:	4680      	mov	r8, r0
 8005c74:	4607      	mov	r7, r0
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	e775      	b.n	8005b6a <_dtoa_r+0xa0a>
 8005c7e:	f000 f9c3 	bl	8006008 <__multadd>
 8005c82:	4639      	mov	r1, r7
 8005c84:	4680      	mov	r8, r0
 8005c86:	2300      	movs	r3, #0
 8005c88:	220a      	movs	r2, #10
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 f9bc 	bl	8006008 <__multadd>
 8005c90:	4607      	mov	r7, r0
 8005c92:	e7f0      	b.n	8005c76 <_dtoa_r+0xb16>
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	9d00      	ldr	r5, [sp, #0]
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	f7ff f9d7 	bl	8005050 <quorem>
 8005ca2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	f805 9b01 	strb.w	r9, [r5], #1
 8005cac:	1aea      	subs	r2, r5, r3
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	dd07      	ble.n	8005cc4 <_dtoa_r+0xb64>
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 f9a4 	bl	8006008 <__multadd>
 8005cc0:	4682      	mov	sl, r0
 8005cc2:	e7ea      	b.n	8005c9a <_dtoa_r+0xb3a>
 8005cc4:	9b01      	ldr	r3, [sp, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfc8      	it	gt
 8005cca:	461d      	movgt	r5, r3
 8005ccc:	9b00      	ldr	r3, [sp, #0]
 8005cce:	bfd8      	it	le
 8005cd0:	2501      	movle	r5, #1
 8005cd2:	441d      	add	r5, r3
 8005cd4:	f04f 0800 	mov.w	r8, #0
 8005cd8:	4651      	mov	r1, sl
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fb8b 	bl	80063f8 <__lshift>
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	f000 fbf3 	bl	80064d0 <__mcmp>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	dc96      	bgt.n	8005c1c <_dtoa_r+0xabc>
 8005cee:	d102      	bne.n	8005cf6 <_dtoa_r+0xb96>
 8005cf0:	f019 0f01 	tst.w	r9, #1
 8005cf4:	d192      	bne.n	8005c1c <_dtoa_r+0xabc>
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cfe:	2a30      	cmp	r2, #48	; 0x30
 8005d00:	d0fa      	beq.n	8005cf8 <_dtoa_r+0xb98>
 8005d02:	e6dd      	b.n	8005ac0 <_dtoa_r+0x960>
 8005d04:	9a00      	ldr	r2, [sp, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d189      	bne.n	8005c1e <_dtoa_r+0xabe>
 8005d0a:	f10b 0b01 	add.w	fp, fp, #1
 8005d0e:	2331      	movs	r3, #49	; 0x31
 8005d10:	e796      	b.n	8005c40 <_dtoa_r+0xae0>
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <_dtoa_r+0xbdc>)
 8005d14:	f7ff ba99 	b.w	800524a <_dtoa_r+0xea>
 8005d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f47f aa6d 	bne.w	80051fa <_dtoa_r+0x9a>
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <_dtoa_r+0xbe0>)
 8005d22:	f7ff ba92 	b.w	800524a <_dtoa_r+0xea>
 8005d26:	9b01      	ldr	r3, [sp, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	dcb5      	bgt.n	8005c98 <_dtoa_r+0xb38>
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	f73f aeb1 	bgt.w	8005a96 <_dtoa_r+0x936>
 8005d34:	e7b0      	b.n	8005c98 <_dtoa_r+0xb38>
 8005d36:	bf00      	nop
 8005d38:	0800962d 	.word	0x0800962d
 8005d3c:	08009588 	.word	0x08009588
 8005d40:	080095b1 	.word	0x080095b1

08005d44 <_free_r>:
 8005d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d46:	2900      	cmp	r1, #0
 8005d48:	d044      	beq.n	8005dd4 <_free_r+0x90>
 8005d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4e:	9001      	str	r0, [sp, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f1a1 0404 	sub.w	r4, r1, #4
 8005d56:	bfb8      	it	lt
 8005d58:	18e4      	addlt	r4, r4, r3
 8005d5a:	f000 f8e7 	bl	8005f2c <__malloc_lock>
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <_free_r+0x94>)
 8005d60:	9801      	ldr	r0, [sp, #4]
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	b933      	cbnz	r3, 8005d74 <_free_r+0x30>
 8005d66:	6063      	str	r3, [r4, #4]
 8005d68:	6014      	str	r4, [r2, #0]
 8005d6a:	b003      	add	sp, #12
 8005d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d70:	f000 b8e2 	b.w	8005f38 <__malloc_unlock>
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	d908      	bls.n	8005d8a <_free_r+0x46>
 8005d78:	6825      	ldr	r5, [r4, #0]
 8005d7a:	1961      	adds	r1, r4, r5
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	bf01      	itttt	eq
 8005d80:	6819      	ldreq	r1, [r3, #0]
 8005d82:	685b      	ldreq	r3, [r3, #4]
 8005d84:	1949      	addeq	r1, r1, r5
 8005d86:	6021      	streq	r1, [r4, #0]
 8005d88:	e7ed      	b.n	8005d66 <_free_r+0x22>
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	b10b      	cbz	r3, 8005d94 <_free_r+0x50>
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d9fa      	bls.n	8005d8a <_free_r+0x46>
 8005d94:	6811      	ldr	r1, [r2, #0]
 8005d96:	1855      	adds	r5, r2, r1
 8005d98:	42a5      	cmp	r5, r4
 8005d9a:	d10b      	bne.n	8005db4 <_free_r+0x70>
 8005d9c:	6824      	ldr	r4, [r4, #0]
 8005d9e:	4421      	add	r1, r4
 8005da0:	1854      	adds	r4, r2, r1
 8005da2:	42a3      	cmp	r3, r4
 8005da4:	6011      	str	r1, [r2, #0]
 8005da6:	d1e0      	bne.n	8005d6a <_free_r+0x26>
 8005da8:	681c      	ldr	r4, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	6053      	str	r3, [r2, #4]
 8005dae:	440c      	add	r4, r1
 8005db0:	6014      	str	r4, [r2, #0]
 8005db2:	e7da      	b.n	8005d6a <_free_r+0x26>
 8005db4:	d902      	bls.n	8005dbc <_free_r+0x78>
 8005db6:	230c      	movs	r3, #12
 8005db8:	6003      	str	r3, [r0, #0]
 8005dba:	e7d6      	b.n	8005d6a <_free_r+0x26>
 8005dbc:	6825      	ldr	r5, [r4, #0]
 8005dbe:	1961      	adds	r1, r4, r5
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	bf04      	itt	eq
 8005dc4:	6819      	ldreq	r1, [r3, #0]
 8005dc6:	685b      	ldreq	r3, [r3, #4]
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	bf04      	itt	eq
 8005dcc:	1949      	addeq	r1, r1, r5
 8005dce:	6021      	streq	r1, [r4, #0]
 8005dd0:	6054      	str	r4, [r2, #4]
 8005dd2:	e7ca      	b.n	8005d6a <_free_r+0x26>
 8005dd4:	b003      	add	sp, #12
 8005dd6:	bd30      	pop	{r4, r5, pc}
 8005dd8:	200007fc 	.word	0x200007fc

08005ddc <malloc>:
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <malloc+0xc>)
 8005dde:	4601      	mov	r1, r0
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f000 b823 	b.w	8005e2c <_malloc_r>
 8005de6:	bf00      	nop
 8005de8:	2000006c 	.word	0x2000006c

08005dec <sbrk_aligned>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4e0e      	ldr	r6, [pc, #56]	; (8005e28 <sbrk_aligned+0x3c>)
 8005df0:	460c      	mov	r4, r1
 8005df2:	6831      	ldr	r1, [r6, #0]
 8005df4:	4605      	mov	r5, r0
 8005df6:	b911      	cbnz	r1, 8005dfe <sbrk_aligned+0x12>
 8005df8:	f001 fe1a 	bl	8007a30 <_sbrk_r>
 8005dfc:	6030      	str	r0, [r6, #0]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f001 fe15 	bl	8007a30 <_sbrk_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d00a      	beq.n	8005e20 <sbrk_aligned+0x34>
 8005e0a:	1cc4      	adds	r4, r0, #3
 8005e0c:	f024 0403 	bic.w	r4, r4, #3
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d007      	beq.n	8005e24 <sbrk_aligned+0x38>
 8005e14:	1a21      	subs	r1, r4, r0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f001 fe0a 	bl	8007a30 <_sbrk_r>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d101      	bne.n	8005e24 <sbrk_aligned+0x38>
 8005e20:	f04f 34ff 	mov.w	r4, #4294967295
 8005e24:	4620      	mov	r0, r4
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	20000800 	.word	0x20000800

08005e2c <_malloc_r>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	1ccd      	adds	r5, r1, #3
 8005e32:	f025 0503 	bic.w	r5, r5, #3
 8005e36:	3508      	adds	r5, #8
 8005e38:	2d0c      	cmp	r5, #12
 8005e3a:	bf38      	it	cc
 8005e3c:	250c      	movcc	r5, #12
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	4607      	mov	r7, r0
 8005e42:	db01      	blt.n	8005e48 <_malloc_r+0x1c>
 8005e44:	42a9      	cmp	r1, r5
 8005e46:	d905      	bls.n	8005e54 <_malloc_r+0x28>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	4630      	mov	r0, r6
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f28 <_malloc_r+0xfc>
 8005e58:	f000 f868 	bl	8005f2c <__malloc_lock>
 8005e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e60:	461c      	mov	r4, r3
 8005e62:	bb5c      	cbnz	r4, 8005ebc <_malloc_r+0x90>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4638      	mov	r0, r7
 8005e68:	f7ff ffc0 	bl	8005dec <sbrk_aligned>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	4604      	mov	r4, r0
 8005e70:	d155      	bne.n	8005f1e <_malloc_r+0xf2>
 8005e72:	f8d8 4000 	ldr.w	r4, [r8]
 8005e76:	4626      	mov	r6, r4
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d145      	bne.n	8005f08 <_malloc_r+0xdc>
 8005e7c:	2c00      	cmp	r4, #0
 8005e7e:	d048      	beq.n	8005f12 <_malloc_r+0xe6>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	4631      	mov	r1, r6
 8005e84:	4638      	mov	r0, r7
 8005e86:	eb04 0903 	add.w	r9, r4, r3
 8005e8a:	f001 fdd1 	bl	8007a30 <_sbrk_r>
 8005e8e:	4581      	cmp	r9, r0
 8005e90:	d13f      	bne.n	8005f12 <_malloc_r+0xe6>
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	1a6d      	subs	r5, r5, r1
 8005e96:	4629      	mov	r1, r5
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa7 	bl	8005dec <sbrk_aligned>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d037      	beq.n	8005f12 <_malloc_r+0xe6>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	442b      	add	r3, r5
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d038      	beq.n	8005f22 <_malloc_r+0xf6>
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	42a2      	cmp	r2, r4
 8005eb4:	d12b      	bne.n	8005f0e <_malloc_r+0xe2>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	e00f      	b.n	8005edc <_malloc_r+0xb0>
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	1b52      	subs	r2, r2, r5
 8005ec0:	d41f      	bmi.n	8005f02 <_malloc_r+0xd6>
 8005ec2:	2a0b      	cmp	r2, #11
 8005ec4:	d917      	bls.n	8005ef6 <_malloc_r+0xca>
 8005ec6:	1961      	adds	r1, r4, r5
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	6025      	str	r5, [r4, #0]
 8005ecc:	bf18      	it	ne
 8005ece:	6059      	strne	r1, [r3, #4]
 8005ed0:	6863      	ldr	r3, [r4, #4]
 8005ed2:	bf08      	it	eq
 8005ed4:	f8c8 1000 	streq.w	r1, [r8]
 8005ed8:	5162      	str	r2, [r4, r5]
 8005eda:	604b      	str	r3, [r1, #4]
 8005edc:	4638      	mov	r0, r7
 8005ede:	f104 060b 	add.w	r6, r4, #11
 8005ee2:	f000 f829 	bl	8005f38 <__malloc_unlock>
 8005ee6:	f026 0607 	bic.w	r6, r6, #7
 8005eea:	1d23      	adds	r3, r4, #4
 8005eec:	1af2      	subs	r2, r6, r3
 8005eee:	d0ae      	beq.n	8005e4e <_malloc_r+0x22>
 8005ef0:	1b9b      	subs	r3, r3, r6
 8005ef2:	50a3      	str	r3, [r4, r2]
 8005ef4:	e7ab      	b.n	8005e4e <_malloc_r+0x22>
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	d1dd      	bne.n	8005eb8 <_malloc_r+0x8c>
 8005efc:	f8c8 2000 	str.w	r2, [r8]
 8005f00:	e7ec      	b.n	8005edc <_malloc_r+0xb0>
 8005f02:	4623      	mov	r3, r4
 8005f04:	6864      	ldr	r4, [r4, #4]
 8005f06:	e7ac      	b.n	8005e62 <_malloc_r+0x36>
 8005f08:	4634      	mov	r4, r6
 8005f0a:	6876      	ldr	r6, [r6, #4]
 8005f0c:	e7b4      	b.n	8005e78 <_malloc_r+0x4c>
 8005f0e:	4613      	mov	r3, r2
 8005f10:	e7cc      	b.n	8005eac <_malloc_r+0x80>
 8005f12:	230c      	movs	r3, #12
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4638      	mov	r0, r7
 8005f18:	f000 f80e 	bl	8005f38 <__malloc_unlock>
 8005f1c:	e797      	b.n	8005e4e <_malloc_r+0x22>
 8005f1e:	6025      	str	r5, [r4, #0]
 8005f20:	e7dc      	b.n	8005edc <_malloc_r+0xb0>
 8005f22:	605b      	str	r3, [r3, #4]
 8005f24:	deff      	udf	#255	; 0xff
 8005f26:	bf00      	nop
 8005f28:	200007fc 	.word	0x200007fc

08005f2c <__malloc_lock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__malloc_lock+0x8>)
 8005f2e:	f7ff b886 	b.w	800503e <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	200007f8 	.word	0x200007f8

08005f38 <__malloc_unlock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__malloc_unlock+0x8>)
 8005f3a:	f7ff b881 	b.w	8005040 <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	200007f8 	.word	0x200007f8

08005f44 <_Balloc>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	69c6      	ldr	r6, [r0, #28]
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	b976      	cbnz	r6, 8005f6c <_Balloc+0x28>
 8005f4e:	2010      	movs	r0, #16
 8005f50:	f7ff ff44 	bl	8005ddc <malloc>
 8005f54:	4602      	mov	r2, r0
 8005f56:	61e0      	str	r0, [r4, #28]
 8005f58:	b920      	cbnz	r0, 8005f64 <_Balloc+0x20>
 8005f5a:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <_Balloc+0x78>)
 8005f5c:	4818      	ldr	r0, [pc, #96]	; (8005fc0 <_Balloc+0x7c>)
 8005f5e:	216b      	movs	r1, #107	; 0x6b
 8005f60:	f001 fd8e 	bl	8007a80 <__assert_func>
 8005f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f68:	6006      	str	r6, [r0, #0]
 8005f6a:	60c6      	str	r6, [r0, #12]
 8005f6c:	69e6      	ldr	r6, [r4, #28]
 8005f6e:	68f3      	ldr	r3, [r6, #12]
 8005f70:	b183      	cbz	r3, 8005f94 <_Balloc+0x50>
 8005f72:	69e3      	ldr	r3, [r4, #28]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f7a:	b9b8      	cbnz	r0, 8005fac <_Balloc+0x68>
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f82:	1d72      	adds	r2, r6, #5
 8005f84:	0092      	lsls	r2, r2, #2
 8005f86:	4620      	mov	r0, r4
 8005f88:	f001 fd98 	bl	8007abc <_calloc_r>
 8005f8c:	b160      	cbz	r0, 8005fa8 <_Balloc+0x64>
 8005f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f92:	e00e      	b.n	8005fb2 <_Balloc+0x6e>
 8005f94:	2221      	movs	r2, #33	; 0x21
 8005f96:	2104      	movs	r1, #4
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f001 fd8f 	bl	8007abc <_calloc_r>
 8005f9e:	69e3      	ldr	r3, [r4, #28]
 8005fa0:	60f0      	str	r0, [r6, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e4      	bne.n	8005f72 <_Balloc+0x2e>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	6802      	ldr	r2, [r0, #0]
 8005fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fb8:	e7f7      	b.n	8005faa <_Balloc+0x66>
 8005fba:	bf00      	nop
 8005fbc:	080095be 	.word	0x080095be
 8005fc0:	0800963e 	.word	0x0800963e

08005fc4 <_Bfree>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	69c6      	ldr	r6, [r0, #28]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b976      	cbnz	r6, 8005fec <_Bfree+0x28>
 8005fce:	2010      	movs	r0, #16
 8005fd0:	f7ff ff04 	bl	8005ddc <malloc>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	61e8      	str	r0, [r5, #28]
 8005fd8:	b920      	cbnz	r0, 8005fe4 <_Bfree+0x20>
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <_Bfree+0x3c>)
 8005fdc:	4809      	ldr	r0, [pc, #36]	; (8006004 <_Bfree+0x40>)
 8005fde:	218f      	movs	r1, #143	; 0x8f
 8005fe0:	f001 fd4e 	bl	8007a80 <__assert_func>
 8005fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fe8:	6006      	str	r6, [r0, #0]
 8005fea:	60c6      	str	r6, [r0, #12]
 8005fec:	b13c      	cbz	r4, 8005ffe <_Bfree+0x3a>
 8005fee:	69eb      	ldr	r3, [r5, #28]
 8005ff0:	6862      	ldr	r2, [r4, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ff8:	6021      	str	r1, [r4, #0]
 8005ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	080095be 	.word	0x080095be
 8006004:	0800963e 	.word	0x0800963e

08006008 <__multadd>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	690d      	ldr	r5, [r1, #16]
 800600e:	4607      	mov	r7, r0
 8006010:	460c      	mov	r4, r1
 8006012:	461e      	mov	r6, r3
 8006014:	f101 0c14 	add.w	ip, r1, #20
 8006018:	2000      	movs	r0, #0
 800601a:	f8dc 3000 	ldr.w	r3, [ip]
 800601e:	b299      	uxth	r1, r3
 8006020:	fb02 6101 	mla	r1, r2, r1, r6
 8006024:	0c1e      	lsrs	r6, r3, #16
 8006026:	0c0b      	lsrs	r3, r1, #16
 8006028:	fb02 3306 	mla	r3, r2, r6, r3
 800602c:	b289      	uxth	r1, r1
 800602e:	3001      	adds	r0, #1
 8006030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006034:	4285      	cmp	r5, r0
 8006036:	f84c 1b04 	str.w	r1, [ip], #4
 800603a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800603e:	dcec      	bgt.n	800601a <__multadd+0x12>
 8006040:	b30e      	cbz	r6, 8006086 <__multadd+0x7e>
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	42ab      	cmp	r3, r5
 8006046:	dc19      	bgt.n	800607c <__multadd+0x74>
 8006048:	6861      	ldr	r1, [r4, #4]
 800604a:	4638      	mov	r0, r7
 800604c:	3101      	adds	r1, #1
 800604e:	f7ff ff79 	bl	8005f44 <_Balloc>
 8006052:	4680      	mov	r8, r0
 8006054:	b928      	cbnz	r0, 8006062 <__multadd+0x5a>
 8006056:	4602      	mov	r2, r0
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <__multadd+0x84>)
 800605a:	480d      	ldr	r0, [pc, #52]	; (8006090 <__multadd+0x88>)
 800605c:	21ba      	movs	r1, #186	; 0xba
 800605e:	f001 fd0f 	bl	8007a80 <__assert_func>
 8006062:	6922      	ldr	r2, [r4, #16]
 8006064:	3202      	adds	r2, #2
 8006066:	f104 010c 	add.w	r1, r4, #12
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	300c      	adds	r0, #12
 800606e:	f001 fcef 	bl	8007a50 <memcpy>
 8006072:	4621      	mov	r1, r4
 8006074:	4638      	mov	r0, r7
 8006076:	f7ff ffa5 	bl	8005fc4 <_Bfree>
 800607a:	4644      	mov	r4, r8
 800607c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006080:	3501      	adds	r5, #1
 8006082:	615e      	str	r6, [r3, #20]
 8006084:	6125      	str	r5, [r4, #16]
 8006086:	4620      	mov	r0, r4
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	0800962d 	.word	0x0800962d
 8006090:	0800963e 	.word	0x0800963e

08006094 <__s2b>:
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	460c      	mov	r4, r1
 800609a:	4615      	mov	r5, r2
 800609c:	461f      	mov	r7, r3
 800609e:	2209      	movs	r2, #9
 80060a0:	3308      	adds	r3, #8
 80060a2:	4606      	mov	r6, r0
 80060a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80060a8:	2100      	movs	r1, #0
 80060aa:	2201      	movs	r2, #1
 80060ac:	429a      	cmp	r2, r3
 80060ae:	db09      	blt.n	80060c4 <__s2b+0x30>
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff ff47 	bl	8005f44 <_Balloc>
 80060b6:	b940      	cbnz	r0, 80060ca <__s2b+0x36>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <__s2b+0x8c>)
 80060bc:	4819      	ldr	r0, [pc, #100]	; (8006124 <__s2b+0x90>)
 80060be:	21d3      	movs	r1, #211	; 0xd3
 80060c0:	f001 fcde 	bl	8007a80 <__assert_func>
 80060c4:	0052      	lsls	r2, r2, #1
 80060c6:	3101      	adds	r1, #1
 80060c8:	e7f0      	b.n	80060ac <__s2b+0x18>
 80060ca:	9b08      	ldr	r3, [sp, #32]
 80060cc:	6143      	str	r3, [r0, #20]
 80060ce:	2d09      	cmp	r5, #9
 80060d0:	f04f 0301 	mov.w	r3, #1
 80060d4:	6103      	str	r3, [r0, #16]
 80060d6:	dd16      	ble.n	8006106 <__s2b+0x72>
 80060d8:	f104 0909 	add.w	r9, r4, #9
 80060dc:	46c8      	mov	r8, r9
 80060de:	442c      	add	r4, r5
 80060e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060e4:	4601      	mov	r1, r0
 80060e6:	3b30      	subs	r3, #48	; 0x30
 80060e8:	220a      	movs	r2, #10
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ff8c 	bl	8006008 <__multadd>
 80060f0:	45a0      	cmp	r8, r4
 80060f2:	d1f5      	bne.n	80060e0 <__s2b+0x4c>
 80060f4:	f1a5 0408 	sub.w	r4, r5, #8
 80060f8:	444c      	add	r4, r9
 80060fa:	1b2d      	subs	r5, r5, r4
 80060fc:	1963      	adds	r3, r4, r5
 80060fe:	42bb      	cmp	r3, r7
 8006100:	db04      	blt.n	800610c <__s2b+0x78>
 8006102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006106:	340a      	adds	r4, #10
 8006108:	2509      	movs	r5, #9
 800610a:	e7f6      	b.n	80060fa <__s2b+0x66>
 800610c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006110:	4601      	mov	r1, r0
 8006112:	3b30      	subs	r3, #48	; 0x30
 8006114:	220a      	movs	r2, #10
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ff76 	bl	8006008 <__multadd>
 800611c:	e7ee      	b.n	80060fc <__s2b+0x68>
 800611e:	bf00      	nop
 8006120:	0800962d 	.word	0x0800962d
 8006124:	0800963e 	.word	0x0800963e

08006128 <__hi0bits>:
 8006128:	0c03      	lsrs	r3, r0, #16
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	b9d3      	cbnz	r3, 8006164 <__hi0bits+0x3c>
 800612e:	0400      	lsls	r0, r0, #16
 8006130:	2310      	movs	r3, #16
 8006132:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006136:	bf04      	itt	eq
 8006138:	0200      	lsleq	r0, r0, #8
 800613a:	3308      	addeq	r3, #8
 800613c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006140:	bf04      	itt	eq
 8006142:	0100      	lsleq	r0, r0, #4
 8006144:	3304      	addeq	r3, #4
 8006146:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800614a:	bf04      	itt	eq
 800614c:	0080      	lsleq	r0, r0, #2
 800614e:	3302      	addeq	r3, #2
 8006150:	2800      	cmp	r0, #0
 8006152:	db05      	blt.n	8006160 <__hi0bits+0x38>
 8006154:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006158:	f103 0301 	add.w	r3, r3, #1
 800615c:	bf08      	it	eq
 800615e:	2320      	moveq	r3, #32
 8006160:	4618      	mov	r0, r3
 8006162:	4770      	bx	lr
 8006164:	2300      	movs	r3, #0
 8006166:	e7e4      	b.n	8006132 <__hi0bits+0xa>

08006168 <__lo0bits>:
 8006168:	6803      	ldr	r3, [r0, #0]
 800616a:	f013 0207 	ands.w	r2, r3, #7
 800616e:	d00c      	beq.n	800618a <__lo0bits+0x22>
 8006170:	07d9      	lsls	r1, r3, #31
 8006172:	d422      	bmi.n	80061ba <__lo0bits+0x52>
 8006174:	079a      	lsls	r2, r3, #30
 8006176:	bf49      	itett	mi
 8006178:	085b      	lsrmi	r3, r3, #1
 800617a:	089b      	lsrpl	r3, r3, #2
 800617c:	6003      	strmi	r3, [r0, #0]
 800617e:	2201      	movmi	r2, #1
 8006180:	bf5c      	itt	pl
 8006182:	6003      	strpl	r3, [r0, #0]
 8006184:	2202      	movpl	r2, #2
 8006186:	4610      	mov	r0, r2
 8006188:	4770      	bx	lr
 800618a:	b299      	uxth	r1, r3
 800618c:	b909      	cbnz	r1, 8006192 <__lo0bits+0x2a>
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	2210      	movs	r2, #16
 8006192:	b2d9      	uxtb	r1, r3
 8006194:	b909      	cbnz	r1, 800619a <__lo0bits+0x32>
 8006196:	3208      	adds	r2, #8
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	0719      	lsls	r1, r3, #28
 800619c:	bf04      	itt	eq
 800619e:	091b      	lsreq	r3, r3, #4
 80061a0:	3204      	addeq	r2, #4
 80061a2:	0799      	lsls	r1, r3, #30
 80061a4:	bf04      	itt	eq
 80061a6:	089b      	lsreq	r3, r3, #2
 80061a8:	3202      	addeq	r2, #2
 80061aa:	07d9      	lsls	r1, r3, #31
 80061ac:	d403      	bmi.n	80061b6 <__lo0bits+0x4e>
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	f102 0201 	add.w	r2, r2, #1
 80061b4:	d003      	beq.n	80061be <__lo0bits+0x56>
 80061b6:	6003      	str	r3, [r0, #0]
 80061b8:	e7e5      	b.n	8006186 <__lo0bits+0x1e>
 80061ba:	2200      	movs	r2, #0
 80061bc:	e7e3      	b.n	8006186 <__lo0bits+0x1e>
 80061be:	2220      	movs	r2, #32
 80061c0:	e7e1      	b.n	8006186 <__lo0bits+0x1e>
	...

080061c4 <__i2b>:
 80061c4:	b510      	push	{r4, lr}
 80061c6:	460c      	mov	r4, r1
 80061c8:	2101      	movs	r1, #1
 80061ca:	f7ff febb 	bl	8005f44 <_Balloc>
 80061ce:	4602      	mov	r2, r0
 80061d0:	b928      	cbnz	r0, 80061de <__i2b+0x1a>
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <__i2b+0x24>)
 80061d4:	4805      	ldr	r0, [pc, #20]	; (80061ec <__i2b+0x28>)
 80061d6:	f240 1145 	movw	r1, #325	; 0x145
 80061da:	f001 fc51 	bl	8007a80 <__assert_func>
 80061de:	2301      	movs	r3, #1
 80061e0:	6144      	str	r4, [r0, #20]
 80061e2:	6103      	str	r3, [r0, #16]
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	bf00      	nop
 80061e8:	0800962d 	.word	0x0800962d
 80061ec:	0800963e 	.word	0x0800963e

080061f0 <__multiply>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	4691      	mov	r9, r2
 80061f6:	690a      	ldr	r2, [r1, #16]
 80061f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	bfb8      	it	lt
 8006200:	460b      	movlt	r3, r1
 8006202:	460c      	mov	r4, r1
 8006204:	bfbc      	itt	lt
 8006206:	464c      	movlt	r4, r9
 8006208:	4699      	movlt	r9, r3
 800620a:	6927      	ldr	r7, [r4, #16]
 800620c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	6861      	ldr	r1, [r4, #4]
 8006214:	eb07 060a 	add.w	r6, r7, sl
 8006218:	42b3      	cmp	r3, r6
 800621a:	b085      	sub	sp, #20
 800621c:	bfb8      	it	lt
 800621e:	3101      	addlt	r1, #1
 8006220:	f7ff fe90 	bl	8005f44 <_Balloc>
 8006224:	b930      	cbnz	r0, 8006234 <__multiply+0x44>
 8006226:	4602      	mov	r2, r0
 8006228:	4b44      	ldr	r3, [pc, #272]	; (800633c <__multiply+0x14c>)
 800622a:	4845      	ldr	r0, [pc, #276]	; (8006340 <__multiply+0x150>)
 800622c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006230:	f001 fc26 	bl	8007a80 <__assert_func>
 8006234:	f100 0514 	add.w	r5, r0, #20
 8006238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800623c:	462b      	mov	r3, r5
 800623e:	2200      	movs	r2, #0
 8006240:	4543      	cmp	r3, r8
 8006242:	d321      	bcc.n	8006288 <__multiply+0x98>
 8006244:	f104 0314 	add.w	r3, r4, #20
 8006248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800624c:	f109 0314 	add.w	r3, r9, #20
 8006250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006254:	9202      	str	r2, [sp, #8]
 8006256:	1b3a      	subs	r2, r7, r4
 8006258:	3a15      	subs	r2, #21
 800625a:	f022 0203 	bic.w	r2, r2, #3
 800625e:	3204      	adds	r2, #4
 8006260:	f104 0115 	add.w	r1, r4, #21
 8006264:	428f      	cmp	r7, r1
 8006266:	bf38      	it	cc
 8006268:	2204      	movcc	r2, #4
 800626a:	9201      	str	r2, [sp, #4]
 800626c:	9a02      	ldr	r2, [sp, #8]
 800626e:	9303      	str	r3, [sp, #12]
 8006270:	429a      	cmp	r2, r3
 8006272:	d80c      	bhi.n	800628e <__multiply+0x9e>
 8006274:	2e00      	cmp	r6, #0
 8006276:	dd03      	ble.n	8006280 <__multiply+0x90>
 8006278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800627c:	2b00      	cmp	r3, #0
 800627e:	d05b      	beq.n	8006338 <__multiply+0x148>
 8006280:	6106      	str	r6, [r0, #16]
 8006282:	b005      	add	sp, #20
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	f843 2b04 	str.w	r2, [r3], #4
 800628c:	e7d8      	b.n	8006240 <__multiply+0x50>
 800628e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006292:	f1ba 0f00 	cmp.w	sl, #0
 8006296:	d024      	beq.n	80062e2 <__multiply+0xf2>
 8006298:	f104 0e14 	add.w	lr, r4, #20
 800629c:	46a9      	mov	r9, r5
 800629e:	f04f 0c00 	mov.w	ip, #0
 80062a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062a6:	f8d9 1000 	ldr.w	r1, [r9]
 80062aa:	fa1f fb82 	uxth.w	fp, r2
 80062ae:	b289      	uxth	r1, r1
 80062b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80062b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80062b8:	f8d9 2000 	ldr.w	r2, [r9]
 80062bc:	4461      	add	r1, ip
 80062be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80062c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062ca:	b289      	uxth	r1, r1
 80062cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062d0:	4577      	cmp	r7, lr
 80062d2:	f849 1b04 	str.w	r1, [r9], #4
 80062d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062da:	d8e2      	bhi.n	80062a2 <__multiply+0xb2>
 80062dc:	9a01      	ldr	r2, [sp, #4]
 80062de:	f845 c002 	str.w	ip, [r5, r2]
 80062e2:	9a03      	ldr	r2, [sp, #12]
 80062e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062e8:	3304      	adds	r3, #4
 80062ea:	f1b9 0f00 	cmp.w	r9, #0
 80062ee:	d021      	beq.n	8006334 <__multiply+0x144>
 80062f0:	6829      	ldr	r1, [r5, #0]
 80062f2:	f104 0c14 	add.w	ip, r4, #20
 80062f6:	46ae      	mov	lr, r5
 80062f8:	f04f 0a00 	mov.w	sl, #0
 80062fc:	f8bc b000 	ldrh.w	fp, [ip]
 8006300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006304:	fb09 220b 	mla	r2, r9, fp, r2
 8006308:	4452      	add	r2, sl
 800630a:	b289      	uxth	r1, r1
 800630c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006310:	f84e 1b04 	str.w	r1, [lr], #4
 8006314:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006318:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800631c:	f8be 1000 	ldrh.w	r1, [lr]
 8006320:	fb09 110a 	mla	r1, r9, sl, r1
 8006324:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006328:	4567      	cmp	r7, ip
 800632a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800632e:	d8e5      	bhi.n	80062fc <__multiply+0x10c>
 8006330:	9a01      	ldr	r2, [sp, #4]
 8006332:	50a9      	str	r1, [r5, r2]
 8006334:	3504      	adds	r5, #4
 8006336:	e799      	b.n	800626c <__multiply+0x7c>
 8006338:	3e01      	subs	r6, #1
 800633a:	e79b      	b.n	8006274 <__multiply+0x84>
 800633c:	0800962d 	.word	0x0800962d
 8006340:	0800963e 	.word	0x0800963e

08006344 <__pow5mult>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	4615      	mov	r5, r2
 800634a:	f012 0203 	ands.w	r2, r2, #3
 800634e:	4606      	mov	r6, r0
 8006350:	460f      	mov	r7, r1
 8006352:	d007      	beq.n	8006364 <__pow5mult+0x20>
 8006354:	4c25      	ldr	r4, [pc, #148]	; (80063ec <__pow5mult+0xa8>)
 8006356:	3a01      	subs	r2, #1
 8006358:	2300      	movs	r3, #0
 800635a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800635e:	f7ff fe53 	bl	8006008 <__multadd>
 8006362:	4607      	mov	r7, r0
 8006364:	10ad      	asrs	r5, r5, #2
 8006366:	d03d      	beq.n	80063e4 <__pow5mult+0xa0>
 8006368:	69f4      	ldr	r4, [r6, #28]
 800636a:	b97c      	cbnz	r4, 800638c <__pow5mult+0x48>
 800636c:	2010      	movs	r0, #16
 800636e:	f7ff fd35 	bl	8005ddc <malloc>
 8006372:	4602      	mov	r2, r0
 8006374:	61f0      	str	r0, [r6, #28]
 8006376:	b928      	cbnz	r0, 8006384 <__pow5mult+0x40>
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <__pow5mult+0xac>)
 800637a:	481e      	ldr	r0, [pc, #120]	; (80063f4 <__pow5mult+0xb0>)
 800637c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006380:	f001 fb7e 	bl	8007a80 <__assert_func>
 8006384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006388:	6004      	str	r4, [r0, #0]
 800638a:	60c4      	str	r4, [r0, #12]
 800638c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006394:	b94c      	cbnz	r4, 80063aa <__pow5mult+0x66>
 8006396:	f240 2171 	movw	r1, #625	; 0x271
 800639a:	4630      	mov	r0, r6
 800639c:	f7ff ff12 	bl	80061c4 <__i2b>
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80063a6:	4604      	mov	r4, r0
 80063a8:	6003      	str	r3, [r0, #0]
 80063aa:	f04f 0900 	mov.w	r9, #0
 80063ae:	07eb      	lsls	r3, r5, #31
 80063b0:	d50a      	bpl.n	80063c8 <__pow5mult+0x84>
 80063b2:	4639      	mov	r1, r7
 80063b4:	4622      	mov	r2, r4
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ff1a 	bl	80061f0 <__multiply>
 80063bc:	4639      	mov	r1, r7
 80063be:	4680      	mov	r8, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7ff fdff 	bl	8005fc4 <_Bfree>
 80063c6:	4647      	mov	r7, r8
 80063c8:	106d      	asrs	r5, r5, #1
 80063ca:	d00b      	beq.n	80063e4 <__pow5mult+0xa0>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	b938      	cbnz	r0, 80063e0 <__pow5mult+0x9c>
 80063d0:	4622      	mov	r2, r4
 80063d2:	4621      	mov	r1, r4
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff ff0b 	bl	80061f0 <__multiply>
 80063da:	6020      	str	r0, [r4, #0]
 80063dc:	f8c0 9000 	str.w	r9, [r0]
 80063e0:	4604      	mov	r4, r0
 80063e2:	e7e4      	b.n	80063ae <__pow5mult+0x6a>
 80063e4:	4638      	mov	r0, r7
 80063e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ea:	bf00      	nop
 80063ec:	08009788 	.word	0x08009788
 80063f0:	080095be 	.word	0x080095be
 80063f4:	0800963e 	.word	0x0800963e

080063f8 <__lshift>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	460c      	mov	r4, r1
 80063fe:	6849      	ldr	r1, [r1, #4]
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	4607      	mov	r7, r0
 800640a:	4691      	mov	r9, r2
 800640c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006410:	f108 0601 	add.w	r6, r8, #1
 8006414:	42b3      	cmp	r3, r6
 8006416:	db0b      	blt.n	8006430 <__lshift+0x38>
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff fd93 	bl	8005f44 <_Balloc>
 800641e:	4605      	mov	r5, r0
 8006420:	b948      	cbnz	r0, 8006436 <__lshift+0x3e>
 8006422:	4602      	mov	r2, r0
 8006424:	4b28      	ldr	r3, [pc, #160]	; (80064c8 <__lshift+0xd0>)
 8006426:	4829      	ldr	r0, [pc, #164]	; (80064cc <__lshift+0xd4>)
 8006428:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800642c:	f001 fb28 	bl	8007a80 <__assert_func>
 8006430:	3101      	adds	r1, #1
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	e7ee      	b.n	8006414 <__lshift+0x1c>
 8006436:	2300      	movs	r3, #0
 8006438:	f100 0114 	add.w	r1, r0, #20
 800643c:	f100 0210 	add.w	r2, r0, #16
 8006440:	4618      	mov	r0, r3
 8006442:	4553      	cmp	r3, sl
 8006444:	db33      	blt.n	80064ae <__lshift+0xb6>
 8006446:	6920      	ldr	r0, [r4, #16]
 8006448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800644c:	f104 0314 	add.w	r3, r4, #20
 8006450:	f019 091f 	ands.w	r9, r9, #31
 8006454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006458:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800645c:	d02b      	beq.n	80064b6 <__lshift+0xbe>
 800645e:	f1c9 0e20 	rsb	lr, r9, #32
 8006462:	468a      	mov	sl, r1
 8006464:	2200      	movs	r2, #0
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	fa00 f009 	lsl.w	r0, r0, r9
 800646c:	4310      	orrs	r0, r2
 800646e:	f84a 0b04 	str.w	r0, [sl], #4
 8006472:	f853 2b04 	ldr.w	r2, [r3], #4
 8006476:	459c      	cmp	ip, r3
 8006478:	fa22 f20e 	lsr.w	r2, r2, lr
 800647c:	d8f3      	bhi.n	8006466 <__lshift+0x6e>
 800647e:	ebac 0304 	sub.w	r3, ip, r4
 8006482:	3b15      	subs	r3, #21
 8006484:	f023 0303 	bic.w	r3, r3, #3
 8006488:	3304      	adds	r3, #4
 800648a:	f104 0015 	add.w	r0, r4, #21
 800648e:	4584      	cmp	ip, r0
 8006490:	bf38      	it	cc
 8006492:	2304      	movcc	r3, #4
 8006494:	50ca      	str	r2, [r1, r3]
 8006496:	b10a      	cbz	r2, 800649c <__lshift+0xa4>
 8006498:	f108 0602 	add.w	r6, r8, #2
 800649c:	3e01      	subs	r6, #1
 800649e:	4638      	mov	r0, r7
 80064a0:	612e      	str	r6, [r5, #16]
 80064a2:	4621      	mov	r1, r4
 80064a4:	f7ff fd8e 	bl	8005fc4 <_Bfree>
 80064a8:	4628      	mov	r0, r5
 80064aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80064b2:	3301      	adds	r3, #1
 80064b4:	e7c5      	b.n	8006442 <__lshift+0x4a>
 80064b6:	3904      	subs	r1, #4
 80064b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80064c0:	459c      	cmp	ip, r3
 80064c2:	d8f9      	bhi.n	80064b8 <__lshift+0xc0>
 80064c4:	e7ea      	b.n	800649c <__lshift+0xa4>
 80064c6:	bf00      	nop
 80064c8:	0800962d 	.word	0x0800962d
 80064cc:	0800963e 	.word	0x0800963e

080064d0 <__mcmp>:
 80064d0:	b530      	push	{r4, r5, lr}
 80064d2:	6902      	ldr	r2, [r0, #16]
 80064d4:	690c      	ldr	r4, [r1, #16]
 80064d6:	1b12      	subs	r2, r2, r4
 80064d8:	d10e      	bne.n	80064f8 <__mcmp+0x28>
 80064da:	f100 0314 	add.w	r3, r0, #20
 80064de:	3114      	adds	r1, #20
 80064e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064f0:	42a5      	cmp	r5, r4
 80064f2:	d003      	beq.n	80064fc <__mcmp+0x2c>
 80064f4:	d305      	bcc.n	8006502 <__mcmp+0x32>
 80064f6:	2201      	movs	r2, #1
 80064f8:	4610      	mov	r0, r2
 80064fa:	bd30      	pop	{r4, r5, pc}
 80064fc:	4283      	cmp	r3, r0
 80064fe:	d3f3      	bcc.n	80064e8 <__mcmp+0x18>
 8006500:	e7fa      	b.n	80064f8 <__mcmp+0x28>
 8006502:	f04f 32ff 	mov.w	r2, #4294967295
 8006506:	e7f7      	b.n	80064f8 <__mcmp+0x28>

08006508 <__mdiff>:
 8006508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	4606      	mov	r6, r0
 8006510:	4611      	mov	r1, r2
 8006512:	4620      	mov	r0, r4
 8006514:	4690      	mov	r8, r2
 8006516:	f7ff ffdb 	bl	80064d0 <__mcmp>
 800651a:	1e05      	subs	r5, r0, #0
 800651c:	d110      	bne.n	8006540 <__mdiff+0x38>
 800651e:	4629      	mov	r1, r5
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff fd0f 	bl	8005f44 <_Balloc>
 8006526:	b930      	cbnz	r0, 8006536 <__mdiff+0x2e>
 8006528:	4b3a      	ldr	r3, [pc, #232]	; (8006614 <__mdiff+0x10c>)
 800652a:	4602      	mov	r2, r0
 800652c:	f240 2137 	movw	r1, #567	; 0x237
 8006530:	4839      	ldr	r0, [pc, #228]	; (8006618 <__mdiff+0x110>)
 8006532:	f001 faa5 	bl	8007a80 <__assert_func>
 8006536:	2301      	movs	r3, #1
 8006538:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800653c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006540:	bfa4      	itt	ge
 8006542:	4643      	movge	r3, r8
 8006544:	46a0      	movge	r8, r4
 8006546:	4630      	mov	r0, r6
 8006548:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800654c:	bfa6      	itte	ge
 800654e:	461c      	movge	r4, r3
 8006550:	2500      	movge	r5, #0
 8006552:	2501      	movlt	r5, #1
 8006554:	f7ff fcf6 	bl	8005f44 <_Balloc>
 8006558:	b920      	cbnz	r0, 8006564 <__mdiff+0x5c>
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <__mdiff+0x10c>)
 800655c:	4602      	mov	r2, r0
 800655e:	f240 2145 	movw	r1, #581	; 0x245
 8006562:	e7e5      	b.n	8006530 <__mdiff+0x28>
 8006564:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006568:	6926      	ldr	r6, [r4, #16]
 800656a:	60c5      	str	r5, [r0, #12]
 800656c:	f104 0914 	add.w	r9, r4, #20
 8006570:	f108 0514 	add.w	r5, r8, #20
 8006574:	f100 0e14 	add.w	lr, r0, #20
 8006578:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800657c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006580:	f108 0210 	add.w	r2, r8, #16
 8006584:	46f2      	mov	sl, lr
 8006586:	2100      	movs	r1, #0
 8006588:	f859 3b04 	ldr.w	r3, [r9], #4
 800658c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006590:	fa11 f88b 	uxtah	r8, r1, fp
 8006594:	b299      	uxth	r1, r3
 8006596:	0c1b      	lsrs	r3, r3, #16
 8006598:	eba8 0801 	sub.w	r8, r8, r1
 800659c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80065a4:	fa1f f888 	uxth.w	r8, r8
 80065a8:	1419      	asrs	r1, r3, #16
 80065aa:	454e      	cmp	r6, r9
 80065ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80065b0:	f84a 3b04 	str.w	r3, [sl], #4
 80065b4:	d8e8      	bhi.n	8006588 <__mdiff+0x80>
 80065b6:	1b33      	subs	r3, r6, r4
 80065b8:	3b15      	subs	r3, #21
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	3304      	adds	r3, #4
 80065c0:	3415      	adds	r4, #21
 80065c2:	42a6      	cmp	r6, r4
 80065c4:	bf38      	it	cc
 80065c6:	2304      	movcc	r3, #4
 80065c8:	441d      	add	r5, r3
 80065ca:	4473      	add	r3, lr
 80065cc:	469e      	mov	lr, r3
 80065ce:	462e      	mov	r6, r5
 80065d0:	4566      	cmp	r6, ip
 80065d2:	d30e      	bcc.n	80065f2 <__mdiff+0xea>
 80065d4:	f10c 0203 	add.w	r2, ip, #3
 80065d8:	1b52      	subs	r2, r2, r5
 80065da:	f022 0203 	bic.w	r2, r2, #3
 80065de:	3d03      	subs	r5, #3
 80065e0:	45ac      	cmp	ip, r5
 80065e2:	bf38      	it	cc
 80065e4:	2200      	movcc	r2, #0
 80065e6:	4413      	add	r3, r2
 80065e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80065ec:	b17a      	cbz	r2, 800660e <__mdiff+0x106>
 80065ee:	6107      	str	r7, [r0, #16]
 80065f0:	e7a4      	b.n	800653c <__mdiff+0x34>
 80065f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80065f6:	fa11 f288 	uxtah	r2, r1, r8
 80065fa:	1414      	asrs	r4, r2, #16
 80065fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006600:	b292      	uxth	r2, r2
 8006602:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006606:	f84e 2b04 	str.w	r2, [lr], #4
 800660a:	1421      	asrs	r1, r4, #16
 800660c:	e7e0      	b.n	80065d0 <__mdiff+0xc8>
 800660e:	3f01      	subs	r7, #1
 8006610:	e7ea      	b.n	80065e8 <__mdiff+0xe0>
 8006612:	bf00      	nop
 8006614:	0800962d 	.word	0x0800962d
 8006618:	0800963e 	.word	0x0800963e

0800661c <__ulp>:
 800661c:	b082      	sub	sp, #8
 800661e:	ed8d 0b00 	vstr	d0, [sp]
 8006622:	9a01      	ldr	r2, [sp, #4]
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <__ulp+0x48>)
 8006626:	4013      	ands	r3, r2
 8006628:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800662c:	2b00      	cmp	r3, #0
 800662e:	dc08      	bgt.n	8006642 <__ulp+0x26>
 8006630:	425b      	negs	r3, r3
 8006632:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006636:	ea4f 5223 	mov.w	r2, r3, asr #20
 800663a:	da04      	bge.n	8006646 <__ulp+0x2a>
 800663c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006640:	4113      	asrs	r3, r2
 8006642:	2200      	movs	r2, #0
 8006644:	e008      	b.n	8006658 <__ulp+0x3c>
 8006646:	f1a2 0314 	sub.w	r3, r2, #20
 800664a:	2b1e      	cmp	r3, #30
 800664c:	bfda      	itte	le
 800664e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006652:	40da      	lsrle	r2, r3
 8006654:	2201      	movgt	r2, #1
 8006656:	2300      	movs	r3, #0
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	ec41 0b10 	vmov	d0, r0, r1
 8006660:	b002      	add	sp, #8
 8006662:	4770      	bx	lr
 8006664:	7ff00000 	.word	0x7ff00000

08006668 <__b2d>:
 8006668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666c:	6906      	ldr	r6, [r0, #16]
 800666e:	f100 0814 	add.w	r8, r0, #20
 8006672:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006676:	1f37      	subs	r7, r6, #4
 8006678:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800667c:	4610      	mov	r0, r2
 800667e:	f7ff fd53 	bl	8006128 <__hi0bits>
 8006682:	f1c0 0320 	rsb	r3, r0, #32
 8006686:	280a      	cmp	r0, #10
 8006688:	600b      	str	r3, [r1, #0]
 800668a:	491b      	ldr	r1, [pc, #108]	; (80066f8 <__b2d+0x90>)
 800668c:	dc15      	bgt.n	80066ba <__b2d+0x52>
 800668e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006692:	fa22 f30c 	lsr.w	r3, r2, ip
 8006696:	45b8      	cmp	r8, r7
 8006698:	ea43 0501 	orr.w	r5, r3, r1
 800669c:	bf34      	ite	cc
 800669e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80066a2:	2300      	movcs	r3, #0
 80066a4:	3015      	adds	r0, #21
 80066a6:	fa02 f000 	lsl.w	r0, r2, r0
 80066aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80066ae:	4303      	orrs	r3, r0
 80066b0:	461c      	mov	r4, r3
 80066b2:	ec45 4b10 	vmov	d0, r4, r5
 80066b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ba:	45b8      	cmp	r8, r7
 80066bc:	bf3a      	itte	cc
 80066be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80066c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80066c6:	2300      	movcs	r3, #0
 80066c8:	380b      	subs	r0, #11
 80066ca:	d012      	beq.n	80066f2 <__b2d+0x8a>
 80066cc:	f1c0 0120 	rsb	r1, r0, #32
 80066d0:	fa23 f401 	lsr.w	r4, r3, r1
 80066d4:	4082      	lsls	r2, r0
 80066d6:	4322      	orrs	r2, r4
 80066d8:	4547      	cmp	r7, r8
 80066da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80066de:	bf8c      	ite	hi
 80066e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80066e4:	2200      	movls	r2, #0
 80066e6:	4083      	lsls	r3, r0
 80066e8:	40ca      	lsrs	r2, r1
 80066ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80066ee:	4313      	orrs	r3, r2
 80066f0:	e7de      	b.n	80066b0 <__b2d+0x48>
 80066f2:	ea42 0501 	orr.w	r5, r2, r1
 80066f6:	e7db      	b.n	80066b0 <__b2d+0x48>
 80066f8:	3ff00000 	.word	0x3ff00000

080066fc <__d2b>:
 80066fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006700:	460f      	mov	r7, r1
 8006702:	2101      	movs	r1, #1
 8006704:	ec59 8b10 	vmov	r8, r9, d0
 8006708:	4616      	mov	r6, r2
 800670a:	f7ff fc1b 	bl	8005f44 <_Balloc>
 800670e:	4604      	mov	r4, r0
 8006710:	b930      	cbnz	r0, 8006720 <__d2b+0x24>
 8006712:	4602      	mov	r2, r0
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <__d2b+0xac>)
 8006716:	4825      	ldr	r0, [pc, #148]	; (80067ac <__d2b+0xb0>)
 8006718:	f240 310f 	movw	r1, #783	; 0x30f
 800671c:	f001 f9b0 	bl	8007a80 <__assert_func>
 8006720:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006724:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006728:	bb2d      	cbnz	r5, 8006776 <__d2b+0x7a>
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	f1b8 0300 	subs.w	r3, r8, #0
 8006730:	d026      	beq.n	8006780 <__d2b+0x84>
 8006732:	4668      	mov	r0, sp
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	f7ff fd17 	bl	8006168 <__lo0bits>
 800673a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800673e:	b1e8      	cbz	r0, 800677c <__d2b+0x80>
 8006740:	f1c0 0320 	rsb	r3, r0, #32
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	430b      	orrs	r3, r1
 800674a:	40c2      	lsrs	r2, r0
 800674c:	6163      	str	r3, [r4, #20]
 800674e:	9201      	str	r2, [sp, #4]
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	61a3      	str	r3, [r4, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	bf14      	ite	ne
 8006758:	2202      	movne	r2, #2
 800675a:	2201      	moveq	r2, #1
 800675c:	6122      	str	r2, [r4, #16]
 800675e:	b1bd      	cbz	r5, 8006790 <__d2b+0x94>
 8006760:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006764:	4405      	add	r5, r0
 8006766:	603d      	str	r5, [r7, #0]
 8006768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800676c:	6030      	str	r0, [r6, #0]
 800676e:	4620      	mov	r0, r4
 8006770:	b003      	add	sp, #12
 8006772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800677a:	e7d6      	b.n	800672a <__d2b+0x2e>
 800677c:	6161      	str	r1, [r4, #20]
 800677e:	e7e7      	b.n	8006750 <__d2b+0x54>
 8006780:	a801      	add	r0, sp, #4
 8006782:	f7ff fcf1 	bl	8006168 <__lo0bits>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	6163      	str	r3, [r4, #20]
 800678a:	3020      	adds	r0, #32
 800678c:	2201      	movs	r2, #1
 800678e:	e7e5      	b.n	800675c <__d2b+0x60>
 8006790:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006794:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006798:	6038      	str	r0, [r7, #0]
 800679a:	6918      	ldr	r0, [r3, #16]
 800679c:	f7ff fcc4 	bl	8006128 <__hi0bits>
 80067a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067a4:	e7e2      	b.n	800676c <__d2b+0x70>
 80067a6:	bf00      	nop
 80067a8:	0800962d 	.word	0x0800962d
 80067ac:	0800963e 	.word	0x0800963e

080067b0 <__ratio>:
 80067b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4688      	mov	r8, r1
 80067b6:	4669      	mov	r1, sp
 80067b8:	4681      	mov	r9, r0
 80067ba:	f7ff ff55 	bl	8006668 <__b2d>
 80067be:	a901      	add	r1, sp, #4
 80067c0:	4640      	mov	r0, r8
 80067c2:	ec55 4b10 	vmov	r4, r5, d0
 80067c6:	f7ff ff4f 	bl	8006668 <__b2d>
 80067ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80067d2:	eba3 0c02 	sub.w	ip, r3, r2
 80067d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80067e0:	ec51 0b10 	vmov	r0, r1, d0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bfd6      	itet	le
 80067e8:	460a      	movle	r2, r1
 80067ea:	462a      	movgt	r2, r5
 80067ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067f0:	468b      	mov	fp, r1
 80067f2:	462f      	mov	r7, r5
 80067f4:	bfd4      	ite	le
 80067f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80067fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80067fe:	4620      	mov	r0, r4
 8006800:	ee10 2a10 	vmov	r2, s0
 8006804:	465b      	mov	r3, fp
 8006806:	4639      	mov	r1, r7
 8006808:	f7fa f840 	bl	800088c <__aeabi_ddiv>
 800680c:	ec41 0b10 	vmov	d0, r0, r1
 8006810:	b003      	add	sp, #12
 8006812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006816 <__copybits>:
 8006816:	3901      	subs	r1, #1
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	1149      	asrs	r1, r1, #5
 800681c:	6914      	ldr	r4, [r2, #16]
 800681e:	3101      	adds	r1, #1
 8006820:	f102 0314 	add.w	r3, r2, #20
 8006824:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006828:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800682c:	1f05      	subs	r5, r0, #4
 800682e:	42a3      	cmp	r3, r4
 8006830:	d30c      	bcc.n	800684c <__copybits+0x36>
 8006832:	1aa3      	subs	r3, r4, r2
 8006834:	3b11      	subs	r3, #17
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	3211      	adds	r2, #17
 800683c:	42a2      	cmp	r2, r4
 800683e:	bf88      	it	hi
 8006840:	2300      	movhi	r3, #0
 8006842:	4418      	add	r0, r3
 8006844:	2300      	movs	r3, #0
 8006846:	4288      	cmp	r0, r1
 8006848:	d305      	bcc.n	8006856 <__copybits+0x40>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006850:	f845 6f04 	str.w	r6, [r5, #4]!
 8006854:	e7eb      	b.n	800682e <__copybits+0x18>
 8006856:	f840 3b04 	str.w	r3, [r0], #4
 800685a:	e7f4      	b.n	8006846 <__copybits+0x30>

0800685c <__any_on>:
 800685c:	f100 0214 	add.w	r2, r0, #20
 8006860:	6900      	ldr	r0, [r0, #16]
 8006862:	114b      	asrs	r3, r1, #5
 8006864:	4298      	cmp	r0, r3
 8006866:	b510      	push	{r4, lr}
 8006868:	db11      	blt.n	800688e <__any_on+0x32>
 800686a:	dd0a      	ble.n	8006882 <__any_on+0x26>
 800686c:	f011 011f 	ands.w	r1, r1, #31
 8006870:	d007      	beq.n	8006882 <__any_on+0x26>
 8006872:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006876:	fa24 f001 	lsr.w	r0, r4, r1
 800687a:	fa00 f101 	lsl.w	r1, r0, r1
 800687e:	428c      	cmp	r4, r1
 8006880:	d10b      	bne.n	800689a <__any_on+0x3e>
 8006882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006886:	4293      	cmp	r3, r2
 8006888:	d803      	bhi.n	8006892 <__any_on+0x36>
 800688a:	2000      	movs	r0, #0
 800688c:	bd10      	pop	{r4, pc}
 800688e:	4603      	mov	r3, r0
 8006890:	e7f7      	b.n	8006882 <__any_on+0x26>
 8006892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006896:	2900      	cmp	r1, #0
 8006898:	d0f5      	beq.n	8006886 <__any_on+0x2a>
 800689a:	2001      	movs	r0, #1
 800689c:	e7f6      	b.n	800688c <__any_on+0x30>

0800689e <sulp>:
 800689e:	b570      	push	{r4, r5, r6, lr}
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	ec45 4b10 	vmov	d0, r4, r5
 80068a8:	4616      	mov	r6, r2
 80068aa:	f7ff feb7 	bl	800661c <__ulp>
 80068ae:	ec51 0b10 	vmov	r0, r1, d0
 80068b2:	b17e      	cbz	r6, 80068d4 <sulp+0x36>
 80068b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dd09      	ble.n	80068d4 <sulp+0x36>
 80068c0:	051b      	lsls	r3, r3, #20
 80068c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068c6:	2400      	movs	r4, #0
 80068c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068cc:	4622      	mov	r2, r4
 80068ce:	462b      	mov	r3, r5
 80068d0:	f7f9 feb2 	bl	8000638 <__aeabi_dmul>
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080068d8 <_strtod_l>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	ed2d 8b02 	vpush	{d8}
 80068e0:	b09b      	sub	sp, #108	; 0x6c
 80068e2:	4604      	mov	r4, r0
 80068e4:	9213      	str	r2, [sp, #76]	; 0x4c
 80068e6:	2200      	movs	r2, #0
 80068e8:	9216      	str	r2, [sp, #88]	; 0x58
 80068ea:	460d      	mov	r5, r1
 80068ec:	f04f 0800 	mov.w	r8, #0
 80068f0:	f04f 0900 	mov.w	r9, #0
 80068f4:	460a      	mov	r2, r1
 80068f6:	9215      	str	r2, [sp, #84]	; 0x54
 80068f8:	7811      	ldrb	r1, [r2, #0]
 80068fa:	292b      	cmp	r1, #43	; 0x2b
 80068fc:	d04c      	beq.n	8006998 <_strtod_l+0xc0>
 80068fe:	d83a      	bhi.n	8006976 <_strtod_l+0x9e>
 8006900:	290d      	cmp	r1, #13
 8006902:	d834      	bhi.n	800696e <_strtod_l+0x96>
 8006904:	2908      	cmp	r1, #8
 8006906:	d834      	bhi.n	8006972 <_strtod_l+0x9a>
 8006908:	2900      	cmp	r1, #0
 800690a:	d03d      	beq.n	8006988 <_strtod_l+0xb0>
 800690c:	2200      	movs	r2, #0
 800690e:	920a      	str	r2, [sp, #40]	; 0x28
 8006910:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006912:	7832      	ldrb	r2, [r6, #0]
 8006914:	2a30      	cmp	r2, #48	; 0x30
 8006916:	f040 80b4 	bne.w	8006a82 <_strtod_l+0x1aa>
 800691a:	7872      	ldrb	r2, [r6, #1]
 800691c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006920:	2a58      	cmp	r2, #88	; 0x58
 8006922:	d170      	bne.n	8006a06 <_strtod_l+0x12e>
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	ab16      	add	r3, sp, #88	; 0x58
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	4a8e      	ldr	r2, [pc, #568]	; (8006b68 <_strtod_l+0x290>)
 8006930:	ab17      	add	r3, sp, #92	; 0x5c
 8006932:	a915      	add	r1, sp, #84	; 0x54
 8006934:	4620      	mov	r0, r4
 8006936:	f001 f93f 	bl	8007bb8 <__gethex>
 800693a:	f010 070f 	ands.w	r7, r0, #15
 800693e:	4605      	mov	r5, r0
 8006940:	d005      	beq.n	800694e <_strtod_l+0x76>
 8006942:	2f06      	cmp	r7, #6
 8006944:	d12a      	bne.n	800699c <_strtod_l+0xc4>
 8006946:	3601      	adds	r6, #1
 8006948:	2300      	movs	r3, #0
 800694a:	9615      	str	r6, [sp, #84]	; 0x54
 800694c:	930a      	str	r3, [sp, #40]	; 0x28
 800694e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 857f 	bne.w	8007454 <_strtod_l+0xb7c>
 8006956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006958:	b1db      	cbz	r3, 8006992 <_strtod_l+0xba>
 800695a:	4642      	mov	r2, r8
 800695c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006960:	ec43 2b10 	vmov	d0, r2, r3
 8006964:	b01b      	add	sp, #108	; 0x6c
 8006966:	ecbd 8b02 	vpop	{d8}
 800696a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696e:	2920      	cmp	r1, #32
 8006970:	d1cc      	bne.n	800690c <_strtod_l+0x34>
 8006972:	3201      	adds	r2, #1
 8006974:	e7bf      	b.n	80068f6 <_strtod_l+0x1e>
 8006976:	292d      	cmp	r1, #45	; 0x2d
 8006978:	d1c8      	bne.n	800690c <_strtod_l+0x34>
 800697a:	2101      	movs	r1, #1
 800697c:	910a      	str	r1, [sp, #40]	; 0x28
 800697e:	1c51      	adds	r1, r2, #1
 8006980:	9115      	str	r1, [sp, #84]	; 0x54
 8006982:	7852      	ldrb	r2, [r2, #1]
 8006984:	2a00      	cmp	r2, #0
 8006986:	d1c3      	bne.n	8006910 <_strtod_l+0x38>
 8006988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800698a:	9515      	str	r5, [sp, #84]	; 0x54
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 855f 	bne.w	8007450 <_strtod_l+0xb78>
 8006992:	4642      	mov	r2, r8
 8006994:	464b      	mov	r3, r9
 8006996:	e7e3      	b.n	8006960 <_strtod_l+0x88>
 8006998:	2100      	movs	r1, #0
 800699a:	e7ef      	b.n	800697c <_strtod_l+0xa4>
 800699c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800699e:	b13a      	cbz	r2, 80069b0 <_strtod_l+0xd8>
 80069a0:	2135      	movs	r1, #53	; 0x35
 80069a2:	a818      	add	r0, sp, #96	; 0x60
 80069a4:	f7ff ff37 	bl	8006816 <__copybits>
 80069a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7ff fb0a 	bl	8005fc4 <_Bfree>
 80069b0:	3f01      	subs	r7, #1
 80069b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069b4:	2f04      	cmp	r7, #4
 80069b6:	d806      	bhi.n	80069c6 <_strtod_l+0xee>
 80069b8:	e8df f007 	tbb	[pc, r7]
 80069bc:	201d0314 	.word	0x201d0314
 80069c0:	14          	.byte	0x14
 80069c1:	00          	.byte	0x00
 80069c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80069c6:	05e9      	lsls	r1, r5, #23
 80069c8:	bf48      	it	mi
 80069ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80069ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069d2:	0d1b      	lsrs	r3, r3, #20
 80069d4:	051b      	lsls	r3, r3, #20
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1b9      	bne.n	800694e <_strtod_l+0x76>
 80069da:	f7fe fb05 	bl	8004fe8 <__errno>
 80069de:	2322      	movs	r3, #34	; 0x22
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	e7b4      	b.n	800694e <_strtod_l+0x76>
 80069e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80069e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80069f4:	e7e7      	b.n	80069c6 <_strtod_l+0xee>
 80069f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b70 <_strtod_l+0x298>
 80069fa:	e7e4      	b.n	80069c6 <_strtod_l+0xee>
 80069fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006a00:	f04f 38ff 	mov.w	r8, #4294967295
 8006a04:	e7df      	b.n	80069c6 <_strtod_l+0xee>
 8006a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	9215      	str	r2, [sp, #84]	; 0x54
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b30      	cmp	r3, #48	; 0x30
 8006a10:	d0f9      	beq.n	8006a06 <_strtod_l+0x12e>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d09b      	beq.n	800694e <_strtod_l+0x76>
 8006a16:	2301      	movs	r3, #1
 8006a18:	f04f 0a00 	mov.w	sl, #0
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a20:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006a26:	46d3      	mov	fp, sl
 8006a28:	220a      	movs	r2, #10
 8006a2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006a2c:	7806      	ldrb	r6, [r0, #0]
 8006a2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a32:	b2d9      	uxtb	r1, r3
 8006a34:	2909      	cmp	r1, #9
 8006a36:	d926      	bls.n	8006a86 <_strtod_l+0x1ae>
 8006a38:	494c      	ldr	r1, [pc, #304]	; (8006b6c <_strtod_l+0x294>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f000 ffe6 	bl	8007a0c <strncmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d030      	beq.n	8006aa6 <_strtod_l+0x1ce>
 8006a44:	2000      	movs	r0, #0
 8006a46:	4632      	mov	r2, r6
 8006a48:	9005      	str	r0, [sp, #20]
 8006a4a:	465e      	mov	r6, fp
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2a65      	cmp	r2, #101	; 0x65
 8006a50:	d001      	beq.n	8006a56 <_strtod_l+0x17e>
 8006a52:	2a45      	cmp	r2, #69	; 0x45
 8006a54:	d113      	bne.n	8006a7e <_strtod_l+0x1a6>
 8006a56:	b91e      	cbnz	r6, 8006a60 <_strtod_l+0x188>
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	4302      	orrs	r2, r0
 8006a5c:	d094      	beq.n	8006988 <_strtod_l+0xb0>
 8006a5e:	2600      	movs	r6, #0
 8006a60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a62:	1c6a      	adds	r2, r5, #1
 8006a64:	9215      	str	r2, [sp, #84]	; 0x54
 8006a66:	786a      	ldrb	r2, [r5, #1]
 8006a68:	2a2b      	cmp	r2, #43	; 0x2b
 8006a6a:	d074      	beq.n	8006b56 <_strtod_l+0x27e>
 8006a6c:	2a2d      	cmp	r2, #45	; 0x2d
 8006a6e:	d078      	beq.n	8006b62 <_strtod_l+0x28a>
 8006a70:	f04f 0c00 	mov.w	ip, #0
 8006a74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a78:	2909      	cmp	r1, #9
 8006a7a:	d97f      	bls.n	8006b7c <_strtod_l+0x2a4>
 8006a7c:	9515      	str	r5, [sp, #84]	; 0x54
 8006a7e:	2700      	movs	r7, #0
 8006a80:	e09e      	b.n	8006bc0 <_strtod_l+0x2e8>
 8006a82:	2300      	movs	r3, #0
 8006a84:	e7c8      	b.n	8006a18 <_strtod_l+0x140>
 8006a86:	f1bb 0f08 	cmp.w	fp, #8
 8006a8a:	bfd8      	it	le
 8006a8c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006a8e:	f100 0001 	add.w	r0, r0, #1
 8006a92:	bfda      	itte	le
 8006a94:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a98:	9309      	strle	r3, [sp, #36]	; 0x24
 8006a9a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006a9e:	f10b 0b01 	add.w	fp, fp, #1
 8006aa2:	9015      	str	r0, [sp, #84]	; 0x54
 8006aa4:	e7c1      	b.n	8006a2a <_strtod_l+0x152>
 8006aa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	9215      	str	r2, [sp, #84]	; 0x54
 8006aac:	785a      	ldrb	r2, [r3, #1]
 8006aae:	f1bb 0f00 	cmp.w	fp, #0
 8006ab2:	d037      	beq.n	8006b24 <_strtod_l+0x24c>
 8006ab4:	9005      	str	r0, [sp, #20]
 8006ab6:	465e      	mov	r6, fp
 8006ab8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d912      	bls.n	8006ae6 <_strtod_l+0x20e>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e7c4      	b.n	8006a4e <_strtod_l+0x176>
 8006ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	9215      	str	r2, [sp, #84]	; 0x54
 8006aca:	785a      	ldrb	r2, [r3, #1]
 8006acc:	3001      	adds	r0, #1
 8006ace:	2a30      	cmp	r2, #48	; 0x30
 8006ad0:	d0f8      	beq.n	8006ac4 <_strtod_l+0x1ec>
 8006ad2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	f200 84c1 	bhi.w	800745e <_strtod_l+0xb86>
 8006adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ade:	9005      	str	r0, [sp, #20]
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	3a30      	subs	r2, #48	; 0x30
 8006ae8:	f100 0301 	add.w	r3, r0, #1
 8006aec:	d014      	beq.n	8006b18 <_strtod_l+0x240>
 8006aee:	9905      	ldr	r1, [sp, #20]
 8006af0:	4419      	add	r1, r3
 8006af2:	9105      	str	r1, [sp, #20]
 8006af4:	4633      	mov	r3, r6
 8006af6:	eb00 0c06 	add.w	ip, r0, r6
 8006afa:	210a      	movs	r1, #10
 8006afc:	4563      	cmp	r3, ip
 8006afe:	d113      	bne.n	8006b28 <_strtod_l+0x250>
 8006b00:	1833      	adds	r3, r6, r0
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	f106 0601 	add.w	r6, r6, #1
 8006b08:	4406      	add	r6, r0
 8006b0a:	dc1a      	bgt.n	8006b42 <_strtod_l+0x26a>
 8006b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0e:	230a      	movs	r3, #10
 8006b10:	fb03 2301 	mla	r3, r3, r1, r2
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
 8006b16:	2300      	movs	r3, #0
 8006b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b1a:	1c51      	adds	r1, r2, #1
 8006b1c:	9115      	str	r1, [sp, #84]	; 0x54
 8006b1e:	7852      	ldrb	r2, [r2, #1]
 8006b20:	4618      	mov	r0, r3
 8006b22:	e7c9      	b.n	8006ab8 <_strtod_l+0x1e0>
 8006b24:	4658      	mov	r0, fp
 8006b26:	e7d2      	b.n	8006ace <_strtod_l+0x1f6>
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	f103 0301 	add.w	r3, r3, #1
 8006b2e:	dc03      	bgt.n	8006b38 <_strtod_l+0x260>
 8006b30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b32:	434f      	muls	r7, r1
 8006b34:	9709      	str	r7, [sp, #36]	; 0x24
 8006b36:	e7e1      	b.n	8006afc <_strtod_l+0x224>
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	bfd8      	it	le
 8006b3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006b40:	e7dc      	b.n	8006afc <_strtod_l+0x224>
 8006b42:	2e10      	cmp	r6, #16
 8006b44:	bfdc      	itt	le
 8006b46:	230a      	movle	r3, #10
 8006b48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006b4c:	e7e3      	b.n	8006b16 <_strtod_l+0x23e>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9305      	str	r3, [sp, #20]
 8006b52:	2301      	movs	r3, #1
 8006b54:	e780      	b.n	8006a58 <_strtod_l+0x180>
 8006b56:	f04f 0c00 	mov.w	ip, #0
 8006b5a:	1caa      	adds	r2, r5, #2
 8006b5c:	9215      	str	r2, [sp, #84]	; 0x54
 8006b5e:	78aa      	ldrb	r2, [r5, #2]
 8006b60:	e788      	b.n	8006a74 <_strtod_l+0x19c>
 8006b62:	f04f 0c01 	mov.w	ip, #1
 8006b66:	e7f8      	b.n	8006b5a <_strtod_l+0x282>
 8006b68:	08009798 	.word	0x08009798
 8006b6c:	08009794 	.word	0x08009794
 8006b70:	7ff00000 	.word	0x7ff00000
 8006b74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b76:	1c51      	adds	r1, r2, #1
 8006b78:	9115      	str	r1, [sp, #84]	; 0x54
 8006b7a:	7852      	ldrb	r2, [r2, #1]
 8006b7c:	2a30      	cmp	r2, #48	; 0x30
 8006b7e:	d0f9      	beq.n	8006b74 <_strtod_l+0x29c>
 8006b80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b84:	2908      	cmp	r1, #8
 8006b86:	f63f af7a 	bhi.w	8006a7e <_strtod_l+0x1a6>
 8006b8a:	3a30      	subs	r2, #48	; 0x30
 8006b8c:	9208      	str	r2, [sp, #32]
 8006b8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b90:	920c      	str	r2, [sp, #48]	; 0x30
 8006b92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b94:	1c57      	adds	r7, r2, #1
 8006b96:	9715      	str	r7, [sp, #84]	; 0x54
 8006b98:	7852      	ldrb	r2, [r2, #1]
 8006b9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006b9e:	f1be 0f09 	cmp.w	lr, #9
 8006ba2:	d938      	bls.n	8006c16 <_strtod_l+0x33e>
 8006ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ba6:	1a7f      	subs	r7, r7, r1
 8006ba8:	2f08      	cmp	r7, #8
 8006baa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006bae:	dc03      	bgt.n	8006bb8 <_strtod_l+0x2e0>
 8006bb0:	9908      	ldr	r1, [sp, #32]
 8006bb2:	428f      	cmp	r7, r1
 8006bb4:	bfa8      	it	ge
 8006bb6:	460f      	movge	r7, r1
 8006bb8:	f1bc 0f00 	cmp.w	ip, #0
 8006bbc:	d000      	beq.n	8006bc0 <_strtod_l+0x2e8>
 8006bbe:	427f      	negs	r7, r7
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d14f      	bne.n	8006c64 <_strtod_l+0x38c>
 8006bc4:	9904      	ldr	r1, [sp, #16]
 8006bc6:	4301      	orrs	r1, r0
 8006bc8:	f47f aec1 	bne.w	800694e <_strtod_l+0x76>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f47f aedb 	bne.w	8006988 <_strtod_l+0xb0>
 8006bd2:	2a69      	cmp	r2, #105	; 0x69
 8006bd4:	d029      	beq.n	8006c2a <_strtod_l+0x352>
 8006bd6:	dc26      	bgt.n	8006c26 <_strtod_l+0x34e>
 8006bd8:	2a49      	cmp	r2, #73	; 0x49
 8006bda:	d026      	beq.n	8006c2a <_strtod_l+0x352>
 8006bdc:	2a4e      	cmp	r2, #78	; 0x4e
 8006bde:	f47f aed3 	bne.w	8006988 <_strtod_l+0xb0>
 8006be2:	499b      	ldr	r1, [pc, #620]	; (8006e50 <_strtod_l+0x578>)
 8006be4:	a815      	add	r0, sp, #84	; 0x54
 8006be6:	f001 fa27 	bl	8008038 <__match>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f43f aecc 	beq.w	8006988 <_strtod_l+0xb0>
 8006bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b28      	cmp	r3, #40	; 0x28
 8006bf6:	d12f      	bne.n	8006c58 <_strtod_l+0x380>
 8006bf8:	4996      	ldr	r1, [pc, #600]	; (8006e54 <_strtod_l+0x57c>)
 8006bfa:	aa18      	add	r2, sp, #96	; 0x60
 8006bfc:	a815      	add	r0, sp, #84	; 0x54
 8006bfe:	f001 fa2f 	bl	8008060 <__hexnan>
 8006c02:	2805      	cmp	r0, #5
 8006c04:	d128      	bne.n	8006c58 <_strtod_l+0x380>
 8006c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006c10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006c14:	e69b      	b.n	800694e <_strtod_l+0x76>
 8006c16:	9f08      	ldr	r7, [sp, #32]
 8006c18:	210a      	movs	r1, #10
 8006c1a:	fb01 2107 	mla	r1, r1, r7, r2
 8006c1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006c22:	9208      	str	r2, [sp, #32]
 8006c24:	e7b5      	b.n	8006b92 <_strtod_l+0x2ba>
 8006c26:	2a6e      	cmp	r2, #110	; 0x6e
 8006c28:	e7d9      	b.n	8006bde <_strtod_l+0x306>
 8006c2a:	498b      	ldr	r1, [pc, #556]	; (8006e58 <_strtod_l+0x580>)
 8006c2c:	a815      	add	r0, sp, #84	; 0x54
 8006c2e:	f001 fa03 	bl	8008038 <__match>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f aea8 	beq.w	8006988 <_strtod_l+0xb0>
 8006c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c3a:	4988      	ldr	r1, [pc, #544]	; (8006e5c <_strtod_l+0x584>)
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	a815      	add	r0, sp, #84	; 0x54
 8006c40:	9315      	str	r3, [sp, #84]	; 0x54
 8006c42:	f001 f9f9 	bl	8008038 <__match>
 8006c46:	b910      	cbnz	r0, 8006c4e <_strtod_l+0x376>
 8006c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	9315      	str	r3, [sp, #84]	; 0x54
 8006c4e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006e6c <_strtod_l+0x594>
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	e67a      	b.n	800694e <_strtod_l+0x76>
 8006c58:	4881      	ldr	r0, [pc, #516]	; (8006e60 <_strtod_l+0x588>)
 8006c5a:	f000 ff09 	bl	8007a70 <nan>
 8006c5e:	ec59 8b10 	vmov	r8, r9, d0
 8006c62:	e674      	b.n	800694e <_strtod_l+0x76>
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c68:	1afb      	subs	r3, r7, r3
 8006c6a:	f1bb 0f00 	cmp.w	fp, #0
 8006c6e:	bf08      	it	eq
 8006c70:	46b3      	moveq	fp, r6
 8006c72:	2e10      	cmp	r6, #16
 8006c74:	9308      	str	r3, [sp, #32]
 8006c76:	4635      	mov	r5, r6
 8006c78:	bfa8      	it	ge
 8006c7a:	2510      	movge	r5, #16
 8006c7c:	f7f9 fc62 	bl	8000544 <__aeabi_ui2d>
 8006c80:	2e09      	cmp	r6, #9
 8006c82:	4680      	mov	r8, r0
 8006c84:	4689      	mov	r9, r1
 8006c86:	dd13      	ble.n	8006cb0 <_strtod_l+0x3d8>
 8006c88:	4b76      	ldr	r3, [pc, #472]	; (8006e64 <_strtod_l+0x58c>)
 8006c8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c92:	f7f9 fcd1 	bl	8000638 <__aeabi_dmul>
 8006c96:	4680      	mov	r8, r0
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4689      	mov	r9, r1
 8006c9c:	f7f9 fc52 	bl	8000544 <__aeabi_ui2d>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	f7f9 fb10 	bl	80002cc <__adddf3>
 8006cac:	4680      	mov	r8, r0
 8006cae:	4689      	mov	r9, r1
 8006cb0:	2e0f      	cmp	r6, #15
 8006cb2:	dc38      	bgt.n	8006d26 <_strtod_l+0x44e>
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f43f ae49 	beq.w	800694e <_strtod_l+0x76>
 8006cbc:	dd24      	ble.n	8006d08 <_strtod_l+0x430>
 8006cbe:	2b16      	cmp	r3, #22
 8006cc0:	dc0b      	bgt.n	8006cda <_strtod_l+0x402>
 8006cc2:	4968      	ldr	r1, [pc, #416]	; (8006e64 <_strtod_l+0x58c>)
 8006cc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	f7f9 fcb2 	bl	8000638 <__aeabi_dmul>
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	4689      	mov	r9, r1
 8006cd8:	e639      	b.n	800694e <_strtod_l+0x76>
 8006cda:	9a08      	ldr	r2, [sp, #32]
 8006cdc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	db20      	blt.n	8006d26 <_strtod_l+0x44e>
 8006ce4:	4c5f      	ldr	r4, [pc, #380]	; (8006e64 <_strtod_l+0x58c>)
 8006ce6:	f1c6 060f 	rsb	r6, r6, #15
 8006cea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006cee:	4642      	mov	r2, r8
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf6:	f7f9 fc9f 	bl	8000638 <__aeabi_dmul>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	1b9e      	subs	r6, r3, r6
 8006cfe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006d02:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d06:	e7e3      	b.n	8006cd0 <_strtod_l+0x3f8>
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	3316      	adds	r3, #22
 8006d0c:	db0b      	blt.n	8006d26 <_strtod_l+0x44e>
 8006d0e:	9b05      	ldr	r3, [sp, #20]
 8006d10:	1bdf      	subs	r7, r3, r7
 8006d12:	4b54      	ldr	r3, [pc, #336]	; (8006e64 <_strtod_l+0x58c>)
 8006d14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 fdb4 	bl	800088c <__aeabi_ddiv>
 8006d24:	e7d6      	b.n	8006cd4 <_strtod_l+0x3fc>
 8006d26:	9b08      	ldr	r3, [sp, #32]
 8006d28:	1b75      	subs	r5, r6, r5
 8006d2a:	441d      	add	r5, r3
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	dd70      	ble.n	8006e12 <_strtod_l+0x53a>
 8006d30:	f015 030f 	ands.w	r3, r5, #15
 8006d34:	d00a      	beq.n	8006d4c <_strtod_l+0x474>
 8006d36:	494b      	ldr	r1, [pc, #300]	; (8006e64 <_strtod_l+0x58c>)
 8006d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d44:	f7f9 fc78 	bl	8000638 <__aeabi_dmul>
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4689      	mov	r9, r1
 8006d4c:	f035 050f 	bics.w	r5, r5, #15
 8006d50:	d04d      	beq.n	8006dee <_strtod_l+0x516>
 8006d52:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006d56:	dd22      	ble.n	8006d9e <_strtod_l+0x4c6>
 8006d58:	2500      	movs	r5, #0
 8006d5a:	46ab      	mov	fp, r5
 8006d5c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d5e:	9505      	str	r5, [sp, #20]
 8006d60:	2322      	movs	r3, #34	; 0x22
 8006d62:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006e6c <_strtod_l+0x594>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	f04f 0800 	mov.w	r8, #0
 8006d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f43f aded 	beq.w	800694e <_strtod_l+0x76>
 8006d74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff f924 	bl	8005fc4 <_Bfree>
 8006d7c:	9905      	ldr	r1, [sp, #20]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff f920 	bl	8005fc4 <_Bfree>
 8006d84:	4659      	mov	r1, fp
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7ff f91c 	bl	8005fc4 <_Bfree>
 8006d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f7ff f918 	bl	8005fc4 <_Bfree>
 8006d94:	4629      	mov	r1, r5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7ff f914 	bl	8005fc4 <_Bfree>
 8006d9c:	e5d7      	b.n	800694e <_strtod_l+0x76>
 8006d9e:	4b32      	ldr	r3, [pc, #200]	; (8006e68 <_strtod_l+0x590>)
 8006da0:	9304      	str	r3, [sp, #16]
 8006da2:	2300      	movs	r3, #0
 8006da4:	112d      	asrs	r5, r5, #4
 8006da6:	4640      	mov	r0, r8
 8006da8:	4649      	mov	r1, r9
 8006daa:	469a      	mov	sl, r3
 8006dac:	2d01      	cmp	r5, #1
 8006dae:	dc21      	bgt.n	8006df4 <_strtod_l+0x51c>
 8006db0:	b10b      	cbz	r3, 8006db6 <_strtod_l+0x4de>
 8006db2:	4680      	mov	r8, r0
 8006db4:	4689      	mov	r9, r1
 8006db6:	492c      	ldr	r1, [pc, #176]	; (8006e68 <_strtod_l+0x590>)
 8006db8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006dbc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dc8:	f7f9 fc36 	bl	8000638 <__aeabi_dmul>
 8006dcc:	4b27      	ldr	r3, [pc, #156]	; (8006e6c <_strtod_l+0x594>)
 8006dce:	460a      	mov	r2, r1
 8006dd0:	400b      	ands	r3, r1
 8006dd2:	4927      	ldr	r1, [pc, #156]	; (8006e70 <_strtod_l+0x598>)
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	d8be      	bhi.n	8006d58 <_strtod_l+0x480>
 8006dda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006dde:	428b      	cmp	r3, r1
 8006de0:	bf86      	itte	hi
 8006de2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006e74 <_strtod_l+0x59c>
 8006de6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006dea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006dee:	2300      	movs	r3, #0
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	e07b      	b.n	8006eec <_strtod_l+0x614>
 8006df4:	07ea      	lsls	r2, r5, #31
 8006df6:	d505      	bpl.n	8006e04 <_strtod_l+0x52c>
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7f9 fc1b 	bl	8000638 <__aeabi_dmul>
 8006e02:	2301      	movs	r3, #1
 8006e04:	9a04      	ldr	r2, [sp, #16]
 8006e06:	3208      	adds	r2, #8
 8006e08:	f10a 0a01 	add.w	sl, sl, #1
 8006e0c:	106d      	asrs	r5, r5, #1
 8006e0e:	9204      	str	r2, [sp, #16]
 8006e10:	e7cc      	b.n	8006dac <_strtod_l+0x4d4>
 8006e12:	d0ec      	beq.n	8006dee <_strtod_l+0x516>
 8006e14:	426d      	negs	r5, r5
 8006e16:	f015 020f 	ands.w	r2, r5, #15
 8006e1a:	d00a      	beq.n	8006e32 <_strtod_l+0x55a>
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <_strtod_l+0x58c>)
 8006e1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fd2f 	bl	800088c <__aeabi_ddiv>
 8006e2e:	4680      	mov	r8, r0
 8006e30:	4689      	mov	r9, r1
 8006e32:	112d      	asrs	r5, r5, #4
 8006e34:	d0db      	beq.n	8006dee <_strtod_l+0x516>
 8006e36:	2d1f      	cmp	r5, #31
 8006e38:	dd1e      	ble.n	8006e78 <_strtod_l+0x5a0>
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	46ab      	mov	fp, r5
 8006e3e:	9509      	str	r5, [sp, #36]	; 0x24
 8006e40:	9505      	str	r5, [sp, #20]
 8006e42:	2322      	movs	r3, #34	; 0x22
 8006e44:	f04f 0800 	mov.w	r8, #0
 8006e48:	f04f 0900 	mov.w	r9, #0
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	e78d      	b.n	8006d6c <_strtod_l+0x494>
 8006e50:	08009585 	.word	0x08009585
 8006e54:	080097ac 	.word	0x080097ac
 8006e58:	0800957d 	.word	0x0800957d
 8006e5c:	080095b4 	.word	0x080095b4
 8006e60:	0800993d 	.word	0x0800993d
 8006e64:	080096c0 	.word	0x080096c0
 8006e68:	08009698 	.word	0x08009698
 8006e6c:	7ff00000 	.word	0x7ff00000
 8006e70:	7ca00000 	.word	0x7ca00000
 8006e74:	7fefffff 	.word	0x7fefffff
 8006e78:	f015 0310 	ands.w	r3, r5, #16
 8006e7c:	bf18      	it	ne
 8006e7e:	236a      	movne	r3, #106	; 0x6a
 8006e80:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007224 <_strtod_l+0x94c>
 8006e84:	9304      	str	r3, [sp, #16]
 8006e86:	4640      	mov	r0, r8
 8006e88:	4649      	mov	r1, r9
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	07ea      	lsls	r2, r5, #31
 8006e8e:	d504      	bpl.n	8006e9a <_strtod_l+0x5c2>
 8006e90:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e94:	f7f9 fbd0 	bl	8000638 <__aeabi_dmul>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	106d      	asrs	r5, r5, #1
 8006e9c:	f10a 0a08 	add.w	sl, sl, #8
 8006ea0:	d1f4      	bne.n	8006e8c <_strtod_l+0x5b4>
 8006ea2:	b10b      	cbz	r3, 8006ea8 <_strtod_l+0x5d0>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	9b04      	ldr	r3, [sp, #16]
 8006eaa:	b1bb      	cbz	r3, 8006edc <_strtod_l+0x604>
 8006eac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006eb0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	dd10      	ble.n	8006edc <_strtod_l+0x604>
 8006eba:	2b1f      	cmp	r3, #31
 8006ebc:	f340 811e 	ble.w	80070fc <_strtod_l+0x824>
 8006ec0:	2b34      	cmp	r3, #52	; 0x34
 8006ec2:	bfde      	ittt	le
 8006ec4:	f04f 33ff 	movle.w	r3, #4294967295
 8006ec8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ecc:	4093      	lslle	r3, r2
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	bfcc      	ite	gt
 8006ed4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ed8:	ea03 0901 	andle.w	r9, r3, r1
 8006edc:	2200      	movs	r2, #0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	f7f9 fe10 	bl	8000b08 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1a6      	bne.n	8006e3a <_strtod_l+0x562>
 8006eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef2:	4633      	mov	r3, r6
 8006ef4:	465a      	mov	r2, fp
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f7ff f8cc 	bl	8006094 <__s2b>
 8006efc:	9009      	str	r0, [sp, #36]	; 0x24
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f43f af2a 	beq.w	8006d58 <_strtod_l+0x480>
 8006f04:	9a08      	ldr	r2, [sp, #32]
 8006f06:	9b05      	ldr	r3, [sp, #20]
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	eba3 0307 	sub.w	r3, r3, r7
 8006f0e:	bfa8      	it	ge
 8006f10:	2300      	movge	r3, #0
 8006f12:	930c      	str	r3, [sp, #48]	; 0x30
 8006f14:	2500      	movs	r5, #0
 8006f16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f1a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f1c:	46ab      	mov	fp, r5
 8006f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f20:	4620      	mov	r0, r4
 8006f22:	6859      	ldr	r1, [r3, #4]
 8006f24:	f7ff f80e 	bl	8005f44 <_Balloc>
 8006f28:	9005      	str	r0, [sp, #20]
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f43f af18 	beq.w	8006d60 <_strtod_l+0x488>
 8006f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	3202      	adds	r2, #2
 8006f36:	f103 010c 	add.w	r1, r3, #12
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	300c      	adds	r0, #12
 8006f3e:	f000 fd87 	bl	8007a50 <memcpy>
 8006f42:	ec49 8b10 	vmov	d0, r8, r9
 8006f46:	aa18      	add	r2, sp, #96	; 0x60
 8006f48:	a917      	add	r1, sp, #92	; 0x5c
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7ff fbd6 	bl	80066fc <__d2b>
 8006f50:	ec49 8b18 	vmov	d8, r8, r9
 8006f54:	9016      	str	r0, [sp, #88]	; 0x58
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f af02 	beq.w	8006d60 <_strtod_l+0x488>
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7ff f930 	bl	80061c4 <__i2b>
 8006f64:	4683      	mov	fp, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f43f aefa 	beq.w	8006d60 <_strtod_l+0x488>
 8006f6c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006f6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	bfab      	itete	ge
 8006f74:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006f76:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006f78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006f7a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006f7e:	bfac      	ite	ge
 8006f80:	eb06 0a03 	addge.w	sl, r6, r3
 8006f84:	1b9f      	sublt	r7, r3, r6
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	1af6      	subs	r6, r6, r3
 8006f8a:	4416      	add	r6, r2
 8006f8c:	4ba0      	ldr	r3, [pc, #640]	; (8007210 <_strtod_l+0x938>)
 8006f8e:	3e01      	subs	r6, #1
 8006f90:	429e      	cmp	r6, r3
 8006f92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f96:	f280 80c4 	bge.w	8007122 <_strtod_l+0x84a>
 8006f9a:	1b9b      	subs	r3, r3, r6
 8006f9c:	2b1f      	cmp	r3, #31
 8006f9e:	eba2 0203 	sub.w	r2, r2, r3
 8006fa2:	f04f 0101 	mov.w	r1, #1
 8006fa6:	f300 80b0 	bgt.w	800710a <_strtod_l+0x832>
 8006faa:	fa01 f303 	lsl.w	r3, r1, r3
 8006fae:	930e      	str	r3, [sp, #56]	; 0x38
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fb4:	eb0a 0602 	add.w	r6, sl, r2
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	45b2      	cmp	sl, r6
 8006fbc:	4417      	add	r7, r2
 8006fbe:	441f      	add	r7, r3
 8006fc0:	4653      	mov	r3, sl
 8006fc2:	bfa8      	it	ge
 8006fc4:	4633      	movge	r3, r6
 8006fc6:	42bb      	cmp	r3, r7
 8006fc8:	bfa8      	it	ge
 8006fca:	463b      	movge	r3, r7
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bfc2      	ittt	gt
 8006fd0:	1af6      	subgt	r6, r6, r3
 8006fd2:	1aff      	subgt	r7, r7, r3
 8006fd4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dd17      	ble.n	800700e <_strtod_l+0x736>
 8006fde:	4659      	mov	r1, fp
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff f9ae 	bl	8006344 <__pow5mult>
 8006fe8:	4683      	mov	fp, r0
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f43f aeb8 	beq.w	8006d60 <_strtod_l+0x488>
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7ff f8fb 	bl	80061f0 <__multiply>
 8006ffa:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f43f aeaf 	beq.w	8006d60 <_strtod_l+0x488>
 8007002:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007004:	4620      	mov	r0, r4
 8007006:	f7fe ffdd 	bl	8005fc4 <_Bfree>
 800700a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700c:	9316      	str	r3, [sp, #88]	; 0x58
 800700e:	2e00      	cmp	r6, #0
 8007010:	f300 808c 	bgt.w	800712c <_strtod_l+0x854>
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	2b00      	cmp	r3, #0
 8007018:	dd08      	ble.n	800702c <_strtod_l+0x754>
 800701a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	4620      	mov	r0, r4
 8007020:	f7ff f990 	bl	8006344 <__pow5mult>
 8007024:	9005      	str	r0, [sp, #20]
 8007026:	2800      	cmp	r0, #0
 8007028:	f43f ae9a 	beq.w	8006d60 <_strtod_l+0x488>
 800702c:	2f00      	cmp	r7, #0
 800702e:	dd08      	ble.n	8007042 <_strtod_l+0x76a>
 8007030:	9905      	ldr	r1, [sp, #20]
 8007032:	463a      	mov	r2, r7
 8007034:	4620      	mov	r0, r4
 8007036:	f7ff f9df 	bl	80063f8 <__lshift>
 800703a:	9005      	str	r0, [sp, #20]
 800703c:	2800      	cmp	r0, #0
 800703e:	f43f ae8f 	beq.w	8006d60 <_strtod_l+0x488>
 8007042:	f1ba 0f00 	cmp.w	sl, #0
 8007046:	dd08      	ble.n	800705a <_strtod_l+0x782>
 8007048:	4659      	mov	r1, fp
 800704a:	4652      	mov	r2, sl
 800704c:	4620      	mov	r0, r4
 800704e:	f7ff f9d3 	bl	80063f8 <__lshift>
 8007052:	4683      	mov	fp, r0
 8007054:	2800      	cmp	r0, #0
 8007056:	f43f ae83 	beq.w	8006d60 <_strtod_l+0x488>
 800705a:	9a05      	ldr	r2, [sp, #20]
 800705c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800705e:	4620      	mov	r0, r4
 8007060:	f7ff fa52 	bl	8006508 <__mdiff>
 8007064:	4605      	mov	r5, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	f43f ae7a 	beq.w	8006d60 <_strtod_l+0x488>
 800706c:	68c3      	ldr	r3, [r0, #12]
 800706e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007070:	2300      	movs	r3, #0
 8007072:	60c3      	str	r3, [r0, #12]
 8007074:	4659      	mov	r1, fp
 8007076:	f7ff fa2b 	bl	80064d0 <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	da60      	bge.n	8007140 <_strtod_l+0x868>
 800707e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007080:	ea53 0308 	orrs.w	r3, r3, r8
 8007084:	f040 8084 	bne.w	8007190 <_strtod_l+0x8b8>
 8007088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800708c:	2b00      	cmp	r3, #0
 800708e:	d17f      	bne.n	8007190 <_strtod_l+0x8b8>
 8007090:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007094:	0d1b      	lsrs	r3, r3, #20
 8007096:	051b      	lsls	r3, r3, #20
 8007098:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800709c:	d978      	bls.n	8007190 <_strtod_l+0x8b8>
 800709e:	696b      	ldr	r3, [r5, #20]
 80070a0:	b913      	cbnz	r3, 80070a8 <_strtod_l+0x7d0>
 80070a2:	692b      	ldr	r3, [r5, #16]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	dd73      	ble.n	8007190 <_strtod_l+0x8b8>
 80070a8:	4629      	mov	r1, r5
 80070aa:	2201      	movs	r2, #1
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7ff f9a3 	bl	80063f8 <__lshift>
 80070b2:	4659      	mov	r1, fp
 80070b4:	4605      	mov	r5, r0
 80070b6:	f7ff fa0b 	bl	80064d0 <__mcmp>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	dd68      	ble.n	8007190 <_strtod_l+0x8b8>
 80070be:	9904      	ldr	r1, [sp, #16]
 80070c0:	4a54      	ldr	r2, [pc, #336]	; (8007214 <_strtod_l+0x93c>)
 80070c2:	464b      	mov	r3, r9
 80070c4:	2900      	cmp	r1, #0
 80070c6:	f000 8084 	beq.w	80071d2 <_strtod_l+0x8fa>
 80070ca:	ea02 0109 	and.w	r1, r2, r9
 80070ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070d2:	dc7e      	bgt.n	80071d2 <_strtod_l+0x8fa>
 80070d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070d8:	f77f aeb3 	ble.w	8006e42 <_strtod_l+0x56a>
 80070dc:	4b4e      	ldr	r3, [pc, #312]	; (8007218 <_strtod_l+0x940>)
 80070de:	4640      	mov	r0, r8
 80070e0:	4649      	mov	r1, r9
 80070e2:	2200      	movs	r2, #0
 80070e4:	f7f9 faa8 	bl	8000638 <__aeabi_dmul>
 80070e8:	4b4a      	ldr	r3, [pc, #296]	; (8007214 <_strtod_l+0x93c>)
 80070ea:	400b      	ands	r3, r1
 80070ec:	4680      	mov	r8, r0
 80070ee:	4689      	mov	r9, r1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f47f ae3f 	bne.w	8006d74 <_strtod_l+0x49c>
 80070f6:	2322      	movs	r3, #34	; 0x22
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	e63b      	b.n	8006d74 <_strtod_l+0x49c>
 80070fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	ea03 0808 	and.w	r8, r3, r8
 8007108:	e6e8      	b.n	8006edc <_strtod_l+0x604>
 800710a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800710e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007112:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007116:	36e2      	adds	r6, #226	; 0xe2
 8007118:	fa01 f306 	lsl.w	r3, r1, r6
 800711c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007120:	e748      	b.n	8006fb4 <_strtod_l+0x6dc>
 8007122:	2100      	movs	r1, #0
 8007124:	2301      	movs	r3, #1
 8007126:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800712a:	e743      	b.n	8006fb4 <_strtod_l+0x6dc>
 800712c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800712e:	4632      	mov	r2, r6
 8007130:	4620      	mov	r0, r4
 8007132:	f7ff f961 	bl	80063f8 <__lshift>
 8007136:	9016      	str	r0, [sp, #88]	; 0x58
 8007138:	2800      	cmp	r0, #0
 800713a:	f47f af6b 	bne.w	8007014 <_strtod_l+0x73c>
 800713e:	e60f      	b.n	8006d60 <_strtod_l+0x488>
 8007140:	46ca      	mov	sl, r9
 8007142:	d171      	bne.n	8007228 <_strtod_l+0x950>
 8007144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007146:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800714a:	b352      	cbz	r2, 80071a2 <_strtod_l+0x8ca>
 800714c:	4a33      	ldr	r2, [pc, #204]	; (800721c <_strtod_l+0x944>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d12a      	bne.n	80071a8 <_strtod_l+0x8d0>
 8007152:	9b04      	ldr	r3, [sp, #16]
 8007154:	4641      	mov	r1, r8
 8007156:	b1fb      	cbz	r3, 8007198 <_strtod_l+0x8c0>
 8007158:	4b2e      	ldr	r3, [pc, #184]	; (8007214 <_strtod_l+0x93c>)
 800715a:	ea09 0303 	and.w	r3, r9, r3
 800715e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007162:	f04f 32ff 	mov.w	r2, #4294967295
 8007166:	d81a      	bhi.n	800719e <_strtod_l+0x8c6>
 8007168:	0d1b      	lsrs	r3, r3, #20
 800716a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	4299      	cmp	r1, r3
 8007174:	d118      	bne.n	80071a8 <_strtod_l+0x8d0>
 8007176:	4b2a      	ldr	r3, [pc, #168]	; (8007220 <_strtod_l+0x948>)
 8007178:	459a      	cmp	sl, r3
 800717a:	d102      	bne.n	8007182 <_strtod_l+0x8aa>
 800717c:	3101      	adds	r1, #1
 800717e:	f43f adef 	beq.w	8006d60 <_strtod_l+0x488>
 8007182:	4b24      	ldr	r3, [pc, #144]	; (8007214 <_strtod_l+0x93c>)
 8007184:	ea0a 0303 	and.w	r3, sl, r3
 8007188:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800718c:	f04f 0800 	mov.w	r8, #0
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1a2      	bne.n	80070dc <_strtod_l+0x804>
 8007196:	e5ed      	b.n	8006d74 <_strtod_l+0x49c>
 8007198:	f04f 33ff 	mov.w	r3, #4294967295
 800719c:	e7e9      	b.n	8007172 <_strtod_l+0x89a>
 800719e:	4613      	mov	r3, r2
 80071a0:	e7e7      	b.n	8007172 <_strtod_l+0x89a>
 80071a2:	ea53 0308 	orrs.w	r3, r3, r8
 80071a6:	d08a      	beq.n	80070be <_strtod_l+0x7e6>
 80071a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071aa:	b1e3      	cbz	r3, 80071e6 <_strtod_l+0x90e>
 80071ac:	ea13 0f0a 	tst.w	r3, sl
 80071b0:	d0ee      	beq.n	8007190 <_strtod_l+0x8b8>
 80071b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b4:	9a04      	ldr	r2, [sp, #16]
 80071b6:	4640      	mov	r0, r8
 80071b8:	4649      	mov	r1, r9
 80071ba:	b1c3      	cbz	r3, 80071ee <_strtod_l+0x916>
 80071bc:	f7ff fb6f 	bl	800689e <sulp>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	ec51 0b18 	vmov	r0, r1, d8
 80071c8:	f7f9 f880 	bl	80002cc <__adddf3>
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	e7de      	b.n	8007190 <_strtod_l+0x8b8>
 80071d2:	4013      	ands	r3, r2
 80071d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071e0:	f04f 38ff 	mov.w	r8, #4294967295
 80071e4:	e7d4      	b.n	8007190 <_strtod_l+0x8b8>
 80071e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e8:	ea13 0f08 	tst.w	r3, r8
 80071ec:	e7e0      	b.n	80071b0 <_strtod_l+0x8d8>
 80071ee:	f7ff fb56 	bl	800689e <sulp>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	ec51 0b18 	vmov	r0, r1, d8
 80071fa:	f7f9 f865 	bl	80002c8 <__aeabi_dsub>
 80071fe:	2200      	movs	r2, #0
 8007200:	2300      	movs	r3, #0
 8007202:	4680      	mov	r8, r0
 8007204:	4689      	mov	r9, r1
 8007206:	f7f9 fc7f 	bl	8000b08 <__aeabi_dcmpeq>
 800720a:	2800      	cmp	r0, #0
 800720c:	d0c0      	beq.n	8007190 <_strtod_l+0x8b8>
 800720e:	e618      	b.n	8006e42 <_strtod_l+0x56a>
 8007210:	fffffc02 	.word	0xfffffc02
 8007214:	7ff00000 	.word	0x7ff00000
 8007218:	39500000 	.word	0x39500000
 800721c:	000fffff 	.word	0x000fffff
 8007220:	7fefffff 	.word	0x7fefffff
 8007224:	080097c0 	.word	0x080097c0
 8007228:	4659      	mov	r1, fp
 800722a:	4628      	mov	r0, r5
 800722c:	f7ff fac0 	bl	80067b0 <__ratio>
 8007230:	ec57 6b10 	vmov	r6, r7, d0
 8007234:	ee10 0a10 	vmov	r0, s0
 8007238:	2200      	movs	r2, #0
 800723a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 fc76 	bl	8000b30 <__aeabi_dcmple>
 8007244:	2800      	cmp	r0, #0
 8007246:	d071      	beq.n	800732c <_strtod_l+0xa54>
 8007248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d17c      	bne.n	8007348 <_strtod_l+0xa70>
 800724e:	f1b8 0f00 	cmp.w	r8, #0
 8007252:	d15a      	bne.n	800730a <_strtod_l+0xa32>
 8007254:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007258:	2b00      	cmp	r3, #0
 800725a:	d15d      	bne.n	8007318 <_strtod_l+0xa40>
 800725c:	4b90      	ldr	r3, [pc, #576]	; (80074a0 <_strtod_l+0xbc8>)
 800725e:	2200      	movs	r2, #0
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f9 fc5a 	bl	8000b1c <__aeabi_dcmplt>
 8007268:	2800      	cmp	r0, #0
 800726a:	d15c      	bne.n	8007326 <_strtod_l+0xa4e>
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	4b8c      	ldr	r3, [pc, #560]	; (80074a4 <_strtod_l+0xbcc>)
 8007272:	2200      	movs	r2, #0
 8007274:	f7f9 f9e0 	bl	8000638 <__aeabi_dmul>
 8007278:	4606      	mov	r6, r0
 800727a:	460f      	mov	r7, r1
 800727c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007280:	9606      	str	r6, [sp, #24]
 8007282:	9307      	str	r3, [sp, #28]
 8007284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007288:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800728c:	4b86      	ldr	r3, [pc, #536]	; (80074a8 <_strtod_l+0xbd0>)
 800728e:	ea0a 0303 	and.w	r3, sl, r3
 8007292:	930d      	str	r3, [sp, #52]	; 0x34
 8007294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007296:	4b85      	ldr	r3, [pc, #532]	; (80074ac <_strtod_l+0xbd4>)
 8007298:	429a      	cmp	r2, r3
 800729a:	f040 8090 	bne.w	80073be <_strtod_l+0xae6>
 800729e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80072a2:	ec49 8b10 	vmov	d0, r8, r9
 80072a6:	f7ff f9b9 	bl	800661c <__ulp>
 80072aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ae:	ec51 0b10 	vmov	r0, r1, d0
 80072b2:	f7f9 f9c1 	bl	8000638 <__aeabi_dmul>
 80072b6:	4642      	mov	r2, r8
 80072b8:	464b      	mov	r3, r9
 80072ba:	f7f9 f807 	bl	80002cc <__adddf3>
 80072be:	460b      	mov	r3, r1
 80072c0:	4979      	ldr	r1, [pc, #484]	; (80074a8 <_strtod_l+0xbd0>)
 80072c2:	4a7b      	ldr	r2, [pc, #492]	; (80074b0 <_strtod_l+0xbd8>)
 80072c4:	4019      	ands	r1, r3
 80072c6:	4291      	cmp	r1, r2
 80072c8:	4680      	mov	r8, r0
 80072ca:	d944      	bls.n	8007356 <_strtod_l+0xa7e>
 80072cc:	ee18 2a90 	vmov	r2, s17
 80072d0:	4b78      	ldr	r3, [pc, #480]	; (80074b4 <_strtod_l+0xbdc>)
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d104      	bne.n	80072e0 <_strtod_l+0xa08>
 80072d6:	ee18 3a10 	vmov	r3, s16
 80072da:	3301      	adds	r3, #1
 80072dc:	f43f ad40 	beq.w	8006d60 <_strtod_l+0x488>
 80072e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80074b4 <_strtod_l+0xbdc>
 80072e4:	f04f 38ff 	mov.w	r8, #4294967295
 80072e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7fe fe6a 	bl	8005fc4 <_Bfree>
 80072f0:	9905      	ldr	r1, [sp, #20]
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7fe fe66 	bl	8005fc4 <_Bfree>
 80072f8:	4659      	mov	r1, fp
 80072fa:	4620      	mov	r0, r4
 80072fc:	f7fe fe62 	bl	8005fc4 <_Bfree>
 8007300:	4629      	mov	r1, r5
 8007302:	4620      	mov	r0, r4
 8007304:	f7fe fe5e 	bl	8005fc4 <_Bfree>
 8007308:	e609      	b.n	8006f1e <_strtod_l+0x646>
 800730a:	f1b8 0f01 	cmp.w	r8, #1
 800730e:	d103      	bne.n	8007318 <_strtod_l+0xa40>
 8007310:	f1b9 0f00 	cmp.w	r9, #0
 8007314:	f43f ad95 	beq.w	8006e42 <_strtod_l+0x56a>
 8007318:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007470 <_strtod_l+0xb98>
 800731c:	4f60      	ldr	r7, [pc, #384]	; (80074a0 <_strtod_l+0xbc8>)
 800731e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007322:	2600      	movs	r6, #0
 8007324:	e7ae      	b.n	8007284 <_strtod_l+0x9ac>
 8007326:	4f5f      	ldr	r7, [pc, #380]	; (80074a4 <_strtod_l+0xbcc>)
 8007328:	2600      	movs	r6, #0
 800732a:	e7a7      	b.n	800727c <_strtod_l+0x9a4>
 800732c:	4b5d      	ldr	r3, [pc, #372]	; (80074a4 <_strtod_l+0xbcc>)
 800732e:	4630      	mov	r0, r6
 8007330:	4639      	mov	r1, r7
 8007332:	2200      	movs	r2, #0
 8007334:	f7f9 f980 	bl	8000638 <__aeabi_dmul>
 8007338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733a:	4606      	mov	r6, r0
 800733c:	460f      	mov	r7, r1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d09c      	beq.n	800727c <_strtod_l+0x9a4>
 8007342:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007346:	e79d      	b.n	8007284 <_strtod_l+0x9ac>
 8007348:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007478 <_strtod_l+0xba0>
 800734c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007350:	ec57 6b17 	vmov	r6, r7, d7
 8007354:	e796      	b.n	8007284 <_strtod_l+0x9ac>
 8007356:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	46ca      	mov	sl, r9
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1c2      	bne.n	80072e8 <_strtod_l+0xa10>
 8007362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007368:	0d1b      	lsrs	r3, r3, #20
 800736a:	051b      	lsls	r3, r3, #20
 800736c:	429a      	cmp	r2, r3
 800736e:	d1bb      	bne.n	80072e8 <_strtod_l+0xa10>
 8007370:	4630      	mov	r0, r6
 8007372:	4639      	mov	r1, r7
 8007374:	f7f9 fcc0 	bl	8000cf8 <__aeabi_d2lz>
 8007378:	f7f9 f930 	bl	80005dc <__aeabi_l2d>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f8 ffa0 	bl	80002c8 <__aeabi_dsub>
 8007388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800738a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800738e:	ea43 0308 	orr.w	r3, r3, r8
 8007392:	4313      	orrs	r3, r2
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1
 8007398:	d054      	beq.n	8007444 <_strtod_l+0xb6c>
 800739a:	a339      	add	r3, pc, #228	; (adr r3, 8007480 <_strtod_l+0xba8>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f9 fbbc 	bl	8000b1c <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f47f ace5 	bne.w	8006d74 <_strtod_l+0x49c>
 80073aa:	a337      	add	r3, pc, #220	; (adr r3, 8007488 <_strtod_l+0xbb0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f9 fbd0 	bl	8000b58 <__aeabi_dcmpgt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d095      	beq.n	80072e8 <_strtod_l+0xa10>
 80073bc:	e4da      	b.n	8006d74 <_strtod_l+0x49c>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	b333      	cbz	r3, 8007410 <_strtod_l+0xb38>
 80073c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073c8:	d822      	bhi.n	8007410 <_strtod_l+0xb38>
 80073ca:	a331      	add	r3, pc, #196	; (adr r3, 8007490 <_strtod_l+0xbb8>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fbac 	bl	8000b30 <__aeabi_dcmple>
 80073d8:	b1a0      	cbz	r0, 8007404 <_strtod_l+0xb2c>
 80073da:	4639      	mov	r1, r7
 80073dc:	4630      	mov	r0, r6
 80073de:	f7f9 fc03 	bl	8000be8 <__aeabi_d2uiz>
 80073e2:	2801      	cmp	r0, #1
 80073e4:	bf38      	it	cc
 80073e6:	2001      	movcc	r0, #1
 80073e8:	f7f9 f8ac 	bl	8000544 <__aeabi_ui2d>
 80073ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	bb23      	cbnz	r3, 800743e <_strtod_l+0xb66>
 80073f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073f8:	9010      	str	r0, [sp, #64]	; 0x40
 80073fa:	9311      	str	r3, [sp, #68]	; 0x44
 80073fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007400:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007408:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007410:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007414:	eeb0 0a48 	vmov.f32	s0, s16
 8007418:	eef0 0a68 	vmov.f32	s1, s17
 800741c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007420:	f7ff f8fc 	bl	800661c <__ulp>
 8007424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007428:	ec53 2b10 	vmov	r2, r3, d0
 800742c:	f7f9 f904 	bl	8000638 <__aeabi_dmul>
 8007430:	ec53 2b18 	vmov	r2, r3, d8
 8007434:	f7f8 ff4a 	bl	80002cc <__adddf3>
 8007438:	4680      	mov	r8, r0
 800743a:	4689      	mov	r9, r1
 800743c:	e78d      	b.n	800735a <_strtod_l+0xa82>
 800743e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007442:	e7db      	b.n	80073fc <_strtod_l+0xb24>
 8007444:	a314      	add	r3, pc, #80	; (adr r3, 8007498 <_strtod_l+0xbc0>)
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f9 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800744e:	e7b3      	b.n	80073b8 <_strtod_l+0xae0>
 8007450:	2300      	movs	r3, #0
 8007452:	930a      	str	r3, [sp, #40]	; 0x28
 8007454:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	f7ff ba7c 	b.w	8006956 <_strtod_l+0x7e>
 800745e:	2a65      	cmp	r2, #101	; 0x65
 8007460:	f43f ab75 	beq.w	8006b4e <_strtod_l+0x276>
 8007464:	2a45      	cmp	r2, #69	; 0x45
 8007466:	f43f ab72 	beq.w	8006b4e <_strtod_l+0x276>
 800746a:	2301      	movs	r3, #1
 800746c:	f7ff bbaa 	b.w	8006bc4 <_strtod_l+0x2ec>
 8007470:	00000000 	.word	0x00000000
 8007474:	bff00000 	.word	0xbff00000
 8007478:	00000000 	.word	0x00000000
 800747c:	3ff00000 	.word	0x3ff00000
 8007480:	94a03595 	.word	0x94a03595
 8007484:	3fdfffff 	.word	0x3fdfffff
 8007488:	35afe535 	.word	0x35afe535
 800748c:	3fe00000 	.word	0x3fe00000
 8007490:	ffc00000 	.word	0xffc00000
 8007494:	41dfffff 	.word	0x41dfffff
 8007498:	94a03595 	.word	0x94a03595
 800749c:	3fcfffff 	.word	0x3fcfffff
 80074a0:	3ff00000 	.word	0x3ff00000
 80074a4:	3fe00000 	.word	0x3fe00000
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	7fe00000 	.word	0x7fe00000
 80074b0:	7c9fffff 	.word	0x7c9fffff
 80074b4:	7fefffff 	.word	0x7fefffff

080074b8 <_strtod_r>:
 80074b8:	4b01      	ldr	r3, [pc, #4]	; (80074c0 <_strtod_r+0x8>)
 80074ba:	f7ff ba0d 	b.w	80068d8 <_strtod_l>
 80074be:	bf00      	nop
 80074c0:	20000070 	.word	0x20000070

080074c4 <_strtol_l.constprop.0>:
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ca:	d001      	beq.n	80074d0 <_strtol_l.constprop.0+0xc>
 80074cc:	2b24      	cmp	r3, #36	; 0x24
 80074ce:	d906      	bls.n	80074de <_strtol_l.constprop.0+0x1a>
 80074d0:	f7fd fd8a 	bl	8004fe8 <__errno>
 80074d4:	2316      	movs	r3, #22
 80074d6:	6003      	str	r3, [r0, #0]
 80074d8:	2000      	movs	r0, #0
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80075c4 <_strtol_l.constprop.0+0x100>
 80074e2:	460d      	mov	r5, r1
 80074e4:	462e      	mov	r6, r5
 80074e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80074ee:	f017 0708 	ands.w	r7, r7, #8
 80074f2:	d1f7      	bne.n	80074e4 <_strtol_l.constprop.0+0x20>
 80074f4:	2c2d      	cmp	r4, #45	; 0x2d
 80074f6:	d132      	bne.n	800755e <_strtol_l.constprop.0+0x9a>
 80074f8:	782c      	ldrb	r4, [r5, #0]
 80074fa:	2701      	movs	r7, #1
 80074fc:	1cb5      	adds	r5, r6, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d05b      	beq.n	80075ba <_strtol_l.constprop.0+0xf6>
 8007502:	2b10      	cmp	r3, #16
 8007504:	d109      	bne.n	800751a <_strtol_l.constprop.0+0x56>
 8007506:	2c30      	cmp	r4, #48	; 0x30
 8007508:	d107      	bne.n	800751a <_strtol_l.constprop.0+0x56>
 800750a:	782c      	ldrb	r4, [r5, #0]
 800750c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007510:	2c58      	cmp	r4, #88	; 0x58
 8007512:	d14d      	bne.n	80075b0 <_strtol_l.constprop.0+0xec>
 8007514:	786c      	ldrb	r4, [r5, #1]
 8007516:	2310      	movs	r3, #16
 8007518:	3502      	adds	r5, #2
 800751a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800751e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007522:	f04f 0e00 	mov.w	lr, #0
 8007526:	fbb8 f9f3 	udiv	r9, r8, r3
 800752a:	4676      	mov	r6, lr
 800752c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007530:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007534:	f1bc 0f09 	cmp.w	ip, #9
 8007538:	d816      	bhi.n	8007568 <_strtol_l.constprop.0+0xa4>
 800753a:	4664      	mov	r4, ip
 800753c:	42a3      	cmp	r3, r4
 800753e:	dd24      	ble.n	800758a <_strtol_l.constprop.0+0xc6>
 8007540:	f1be 3fff 	cmp.w	lr, #4294967295
 8007544:	d008      	beq.n	8007558 <_strtol_l.constprop.0+0x94>
 8007546:	45b1      	cmp	r9, r6
 8007548:	d31c      	bcc.n	8007584 <_strtol_l.constprop.0+0xc0>
 800754a:	d101      	bne.n	8007550 <_strtol_l.constprop.0+0x8c>
 800754c:	45a2      	cmp	sl, r4
 800754e:	db19      	blt.n	8007584 <_strtol_l.constprop.0+0xc0>
 8007550:	fb06 4603 	mla	r6, r6, r3, r4
 8007554:	f04f 0e01 	mov.w	lr, #1
 8007558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800755c:	e7e8      	b.n	8007530 <_strtol_l.constprop.0+0x6c>
 800755e:	2c2b      	cmp	r4, #43	; 0x2b
 8007560:	bf04      	itt	eq
 8007562:	782c      	ldrbeq	r4, [r5, #0]
 8007564:	1cb5      	addeq	r5, r6, #2
 8007566:	e7ca      	b.n	80074fe <_strtol_l.constprop.0+0x3a>
 8007568:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800756c:	f1bc 0f19 	cmp.w	ip, #25
 8007570:	d801      	bhi.n	8007576 <_strtol_l.constprop.0+0xb2>
 8007572:	3c37      	subs	r4, #55	; 0x37
 8007574:	e7e2      	b.n	800753c <_strtol_l.constprop.0+0x78>
 8007576:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800757a:	f1bc 0f19 	cmp.w	ip, #25
 800757e:	d804      	bhi.n	800758a <_strtol_l.constprop.0+0xc6>
 8007580:	3c57      	subs	r4, #87	; 0x57
 8007582:	e7db      	b.n	800753c <_strtol_l.constprop.0+0x78>
 8007584:	f04f 3eff 	mov.w	lr, #4294967295
 8007588:	e7e6      	b.n	8007558 <_strtol_l.constprop.0+0x94>
 800758a:	f1be 3fff 	cmp.w	lr, #4294967295
 800758e:	d105      	bne.n	800759c <_strtol_l.constprop.0+0xd8>
 8007590:	2322      	movs	r3, #34	; 0x22
 8007592:	6003      	str	r3, [r0, #0]
 8007594:	4646      	mov	r6, r8
 8007596:	b942      	cbnz	r2, 80075aa <_strtol_l.constprop.0+0xe6>
 8007598:	4630      	mov	r0, r6
 800759a:	e79e      	b.n	80074da <_strtol_l.constprop.0+0x16>
 800759c:	b107      	cbz	r7, 80075a0 <_strtol_l.constprop.0+0xdc>
 800759e:	4276      	negs	r6, r6
 80075a0:	2a00      	cmp	r2, #0
 80075a2:	d0f9      	beq.n	8007598 <_strtol_l.constprop.0+0xd4>
 80075a4:	f1be 0f00 	cmp.w	lr, #0
 80075a8:	d000      	beq.n	80075ac <_strtol_l.constprop.0+0xe8>
 80075aa:	1e69      	subs	r1, r5, #1
 80075ac:	6011      	str	r1, [r2, #0]
 80075ae:	e7f3      	b.n	8007598 <_strtol_l.constprop.0+0xd4>
 80075b0:	2430      	movs	r4, #48	; 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1b1      	bne.n	800751a <_strtol_l.constprop.0+0x56>
 80075b6:	2308      	movs	r3, #8
 80075b8:	e7af      	b.n	800751a <_strtol_l.constprop.0+0x56>
 80075ba:	2c30      	cmp	r4, #48	; 0x30
 80075bc:	d0a5      	beq.n	800750a <_strtol_l.constprop.0+0x46>
 80075be:	230a      	movs	r3, #10
 80075c0:	e7ab      	b.n	800751a <_strtol_l.constprop.0+0x56>
 80075c2:	bf00      	nop
 80075c4:	080097e9 	.word	0x080097e9

080075c8 <_strtol_r>:
 80075c8:	f7ff bf7c 	b.w	80074c4 <_strtol_l.constprop.0>

080075cc <__ssputs_r>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	688e      	ldr	r6, [r1, #8]
 80075d2:	461f      	mov	r7, r3
 80075d4:	42be      	cmp	r6, r7
 80075d6:	680b      	ldr	r3, [r1, #0]
 80075d8:	4682      	mov	sl, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	4690      	mov	r8, r2
 80075de:	d82c      	bhi.n	800763a <__ssputs_r+0x6e>
 80075e0:	898a      	ldrh	r2, [r1, #12]
 80075e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075e6:	d026      	beq.n	8007636 <__ssputs_r+0x6a>
 80075e8:	6965      	ldr	r5, [r4, #20]
 80075ea:	6909      	ldr	r1, [r1, #16]
 80075ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f0:	eba3 0901 	sub.w	r9, r3, r1
 80075f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075f8:	1c7b      	adds	r3, r7, #1
 80075fa:	444b      	add	r3, r9
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	429d      	cmp	r5, r3
 8007600:	bf38      	it	cc
 8007602:	461d      	movcc	r5, r3
 8007604:	0553      	lsls	r3, r2, #21
 8007606:	d527      	bpl.n	8007658 <__ssputs_r+0x8c>
 8007608:	4629      	mov	r1, r5
 800760a:	f7fe fc0f 	bl	8005e2c <_malloc_r>
 800760e:	4606      	mov	r6, r0
 8007610:	b360      	cbz	r0, 800766c <__ssputs_r+0xa0>
 8007612:	6921      	ldr	r1, [r4, #16]
 8007614:	464a      	mov	r2, r9
 8007616:	f000 fa1b 	bl	8007a50 <memcpy>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	6126      	str	r6, [r4, #16]
 8007628:	6165      	str	r5, [r4, #20]
 800762a:	444e      	add	r6, r9
 800762c:	eba5 0509 	sub.w	r5, r5, r9
 8007630:	6026      	str	r6, [r4, #0]
 8007632:	60a5      	str	r5, [r4, #8]
 8007634:	463e      	mov	r6, r7
 8007636:	42be      	cmp	r6, r7
 8007638:	d900      	bls.n	800763c <__ssputs_r+0x70>
 800763a:	463e      	mov	r6, r7
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	4632      	mov	r2, r6
 8007640:	4641      	mov	r1, r8
 8007642:	f000 f9c9 	bl	80079d8 <memmove>
 8007646:	68a3      	ldr	r3, [r4, #8]
 8007648:	1b9b      	subs	r3, r3, r6
 800764a:	60a3      	str	r3, [r4, #8]
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	4433      	add	r3, r6
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	2000      	movs	r0, #0
 8007654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007658:	462a      	mov	r2, r5
 800765a:	f000 fdae 	bl	80081ba <_realloc_r>
 800765e:	4606      	mov	r6, r0
 8007660:	2800      	cmp	r0, #0
 8007662:	d1e0      	bne.n	8007626 <__ssputs_r+0x5a>
 8007664:	6921      	ldr	r1, [r4, #16]
 8007666:	4650      	mov	r0, sl
 8007668:	f7fe fb6c 	bl	8005d44 <_free_r>
 800766c:	230c      	movs	r3, #12
 800766e:	f8ca 3000 	str.w	r3, [sl]
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	e7e9      	b.n	8007654 <__ssputs_r+0x88>

08007680 <_svfiprintf_r>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	4698      	mov	r8, r3
 8007686:	898b      	ldrh	r3, [r1, #12]
 8007688:	061b      	lsls	r3, r3, #24
 800768a:	b09d      	sub	sp, #116	; 0x74
 800768c:	4607      	mov	r7, r0
 800768e:	460d      	mov	r5, r1
 8007690:	4614      	mov	r4, r2
 8007692:	d50e      	bpl.n	80076b2 <_svfiprintf_r+0x32>
 8007694:	690b      	ldr	r3, [r1, #16]
 8007696:	b963      	cbnz	r3, 80076b2 <_svfiprintf_r+0x32>
 8007698:	2140      	movs	r1, #64	; 0x40
 800769a:	f7fe fbc7 	bl	8005e2c <_malloc_r>
 800769e:	6028      	str	r0, [r5, #0]
 80076a0:	6128      	str	r0, [r5, #16]
 80076a2:	b920      	cbnz	r0, 80076ae <_svfiprintf_r+0x2e>
 80076a4:	230c      	movs	r3, #12
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	e0d0      	b.n	8007850 <_svfiprintf_r+0x1d0>
 80076ae:	2340      	movs	r3, #64	; 0x40
 80076b0:	616b      	str	r3, [r5, #20]
 80076b2:	2300      	movs	r3, #0
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	2320      	movs	r3, #32
 80076b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c0:	2330      	movs	r3, #48	; 0x30
 80076c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007868 <_svfiprintf_r+0x1e8>
 80076c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ca:	f04f 0901 	mov.w	r9, #1
 80076ce:	4623      	mov	r3, r4
 80076d0:	469a      	mov	sl, r3
 80076d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d6:	b10a      	cbz	r2, 80076dc <_svfiprintf_r+0x5c>
 80076d8:	2a25      	cmp	r2, #37	; 0x25
 80076da:	d1f9      	bne.n	80076d0 <_svfiprintf_r+0x50>
 80076dc:	ebba 0b04 	subs.w	fp, sl, r4
 80076e0:	d00b      	beq.n	80076fa <_svfiprintf_r+0x7a>
 80076e2:	465b      	mov	r3, fp
 80076e4:	4622      	mov	r2, r4
 80076e6:	4629      	mov	r1, r5
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7ff ff6f 	bl	80075cc <__ssputs_r>
 80076ee:	3001      	adds	r0, #1
 80076f0:	f000 80a9 	beq.w	8007846 <_svfiprintf_r+0x1c6>
 80076f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f6:	445a      	add	r2, fp
 80076f8:	9209      	str	r2, [sp, #36]	; 0x24
 80076fa:	f89a 3000 	ldrb.w	r3, [sl]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80a1 	beq.w	8007846 <_svfiprintf_r+0x1c6>
 8007704:	2300      	movs	r3, #0
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800770e:	f10a 0a01 	add.w	sl, sl, #1
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	9307      	str	r3, [sp, #28]
 8007716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800771a:	931a      	str	r3, [sp, #104]	; 0x68
 800771c:	4654      	mov	r4, sl
 800771e:	2205      	movs	r2, #5
 8007720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007724:	4850      	ldr	r0, [pc, #320]	; (8007868 <_svfiprintf_r+0x1e8>)
 8007726:	f7f8 fd73 	bl	8000210 <memchr>
 800772a:	9a04      	ldr	r2, [sp, #16]
 800772c:	b9d8      	cbnz	r0, 8007766 <_svfiprintf_r+0xe6>
 800772e:	06d0      	lsls	r0, r2, #27
 8007730:	bf44      	itt	mi
 8007732:	2320      	movmi	r3, #32
 8007734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007738:	0711      	lsls	r1, r2, #28
 800773a:	bf44      	itt	mi
 800773c:	232b      	movmi	r3, #43	; 0x2b
 800773e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007742:	f89a 3000 	ldrb.w	r3, [sl]
 8007746:	2b2a      	cmp	r3, #42	; 0x2a
 8007748:	d015      	beq.n	8007776 <_svfiprintf_r+0xf6>
 800774a:	9a07      	ldr	r2, [sp, #28]
 800774c:	4654      	mov	r4, sl
 800774e:	2000      	movs	r0, #0
 8007750:	f04f 0c0a 	mov.w	ip, #10
 8007754:	4621      	mov	r1, r4
 8007756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775a:	3b30      	subs	r3, #48	; 0x30
 800775c:	2b09      	cmp	r3, #9
 800775e:	d94d      	bls.n	80077fc <_svfiprintf_r+0x17c>
 8007760:	b1b0      	cbz	r0, 8007790 <_svfiprintf_r+0x110>
 8007762:	9207      	str	r2, [sp, #28]
 8007764:	e014      	b.n	8007790 <_svfiprintf_r+0x110>
 8007766:	eba0 0308 	sub.w	r3, r0, r8
 800776a:	fa09 f303 	lsl.w	r3, r9, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	46a2      	mov	sl, r4
 8007774:	e7d2      	b.n	800771c <_svfiprintf_r+0x9c>
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	1d19      	adds	r1, r3, #4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	9103      	str	r1, [sp, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	bfbb      	ittet	lt
 8007782:	425b      	neglt	r3, r3
 8007784:	f042 0202 	orrlt.w	r2, r2, #2
 8007788:	9307      	strge	r3, [sp, #28]
 800778a:	9307      	strlt	r3, [sp, #28]
 800778c:	bfb8      	it	lt
 800778e:	9204      	strlt	r2, [sp, #16]
 8007790:	7823      	ldrb	r3, [r4, #0]
 8007792:	2b2e      	cmp	r3, #46	; 0x2e
 8007794:	d10c      	bne.n	80077b0 <_svfiprintf_r+0x130>
 8007796:	7863      	ldrb	r3, [r4, #1]
 8007798:	2b2a      	cmp	r3, #42	; 0x2a
 800779a:	d134      	bne.n	8007806 <_svfiprintf_r+0x186>
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	9203      	str	r2, [sp, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bfb8      	it	lt
 80077a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ac:	3402      	adds	r4, #2
 80077ae:	9305      	str	r3, [sp, #20]
 80077b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007878 <_svfiprintf_r+0x1f8>
 80077b4:	7821      	ldrb	r1, [r4, #0]
 80077b6:	2203      	movs	r2, #3
 80077b8:	4650      	mov	r0, sl
 80077ba:	f7f8 fd29 	bl	8000210 <memchr>
 80077be:	b138      	cbz	r0, 80077d0 <_svfiprintf_r+0x150>
 80077c0:	9b04      	ldr	r3, [sp, #16]
 80077c2:	eba0 000a 	sub.w	r0, r0, sl
 80077c6:	2240      	movs	r2, #64	; 0x40
 80077c8:	4082      	lsls	r2, r0
 80077ca:	4313      	orrs	r3, r2
 80077cc:	3401      	adds	r4, #1
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	4825      	ldr	r0, [pc, #148]	; (800786c <_svfiprintf_r+0x1ec>)
 80077d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077da:	2206      	movs	r2, #6
 80077dc:	f7f8 fd18 	bl	8000210 <memchr>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d038      	beq.n	8007856 <_svfiprintf_r+0x1d6>
 80077e4:	4b22      	ldr	r3, [pc, #136]	; (8007870 <_svfiprintf_r+0x1f0>)
 80077e6:	bb1b      	cbnz	r3, 8007830 <_svfiprintf_r+0x1b0>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	3307      	adds	r3, #7
 80077ec:	f023 0307 	bic.w	r3, r3, #7
 80077f0:	3308      	adds	r3, #8
 80077f2:	9303      	str	r3, [sp, #12]
 80077f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f6:	4433      	add	r3, r6
 80077f8:	9309      	str	r3, [sp, #36]	; 0x24
 80077fa:	e768      	b.n	80076ce <_svfiprintf_r+0x4e>
 80077fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007800:	460c      	mov	r4, r1
 8007802:	2001      	movs	r0, #1
 8007804:	e7a6      	b.n	8007754 <_svfiprintf_r+0xd4>
 8007806:	2300      	movs	r3, #0
 8007808:	3401      	adds	r4, #1
 800780a:	9305      	str	r3, [sp, #20]
 800780c:	4619      	mov	r1, r3
 800780e:	f04f 0c0a 	mov.w	ip, #10
 8007812:	4620      	mov	r0, r4
 8007814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007818:	3a30      	subs	r2, #48	; 0x30
 800781a:	2a09      	cmp	r2, #9
 800781c:	d903      	bls.n	8007826 <_svfiprintf_r+0x1a6>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0c6      	beq.n	80077b0 <_svfiprintf_r+0x130>
 8007822:	9105      	str	r1, [sp, #20]
 8007824:	e7c4      	b.n	80077b0 <_svfiprintf_r+0x130>
 8007826:	fb0c 2101 	mla	r1, ip, r1, r2
 800782a:	4604      	mov	r4, r0
 800782c:	2301      	movs	r3, #1
 800782e:	e7f0      	b.n	8007812 <_svfiprintf_r+0x192>
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	462a      	mov	r2, r5
 8007836:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <_svfiprintf_r+0x1f4>)
 8007838:	a904      	add	r1, sp, #16
 800783a:	4638      	mov	r0, r7
 800783c:	f7fc fc86 	bl	800414c <_printf_float>
 8007840:	1c42      	adds	r2, r0, #1
 8007842:	4606      	mov	r6, r0
 8007844:	d1d6      	bne.n	80077f4 <_svfiprintf_r+0x174>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	065b      	lsls	r3, r3, #25
 800784a:	f53f af2d 	bmi.w	80076a8 <_svfiprintf_r+0x28>
 800784e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007850:	b01d      	add	sp, #116	; 0x74
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	ab03      	add	r3, sp, #12
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	462a      	mov	r2, r5
 800785c:	4b05      	ldr	r3, [pc, #20]	; (8007874 <_svfiprintf_r+0x1f4>)
 800785e:	a904      	add	r1, sp, #16
 8007860:	4638      	mov	r0, r7
 8007862:	f7fc ff17 	bl	8004694 <_printf_i>
 8007866:	e7eb      	b.n	8007840 <_svfiprintf_r+0x1c0>
 8007868:	080098e9 	.word	0x080098e9
 800786c:	080098f3 	.word	0x080098f3
 8007870:	0800414d 	.word	0x0800414d
 8007874:	080075cd 	.word	0x080075cd
 8007878:	080098ef 	.word	0x080098ef

0800787c <__sflush_r>:
 800787c:	898a      	ldrh	r2, [r1, #12]
 800787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	4605      	mov	r5, r0
 8007884:	0710      	lsls	r0, r2, #28
 8007886:	460c      	mov	r4, r1
 8007888:	d458      	bmi.n	800793c <__sflush_r+0xc0>
 800788a:	684b      	ldr	r3, [r1, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	dc05      	bgt.n	800789c <__sflush_r+0x20>
 8007890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	dc02      	bgt.n	800789c <__sflush_r+0x20>
 8007896:	2000      	movs	r0, #0
 8007898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800789c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800789e:	2e00      	cmp	r6, #0
 80078a0:	d0f9      	beq.n	8007896 <__sflush_r+0x1a>
 80078a2:	2300      	movs	r3, #0
 80078a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078a8:	682f      	ldr	r7, [r5, #0]
 80078aa:	6a21      	ldr	r1, [r4, #32]
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	d032      	beq.n	8007916 <__sflush_r+0x9a>
 80078b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	075a      	lsls	r2, r3, #29
 80078b6:	d505      	bpl.n	80078c4 <__sflush_r+0x48>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	1ac0      	subs	r0, r0, r3
 80078bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078be:	b10b      	cbz	r3, 80078c4 <__sflush_r+0x48>
 80078c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078c2:	1ac0      	subs	r0, r0, r3
 80078c4:	2300      	movs	r3, #0
 80078c6:	4602      	mov	r2, r0
 80078c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078ca:	6a21      	ldr	r1, [r4, #32]
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b0      	blx	r6
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	d106      	bne.n	80078e4 <__sflush_r+0x68>
 80078d6:	6829      	ldr	r1, [r5, #0]
 80078d8:	291d      	cmp	r1, #29
 80078da:	d82b      	bhi.n	8007934 <__sflush_r+0xb8>
 80078dc:	4a29      	ldr	r2, [pc, #164]	; (8007984 <__sflush_r+0x108>)
 80078de:	410a      	asrs	r2, r1
 80078e0:	07d6      	lsls	r6, r2, #31
 80078e2:	d427      	bmi.n	8007934 <__sflush_r+0xb8>
 80078e4:	2200      	movs	r2, #0
 80078e6:	6062      	str	r2, [r4, #4]
 80078e8:	04d9      	lsls	r1, r3, #19
 80078ea:	6922      	ldr	r2, [r4, #16]
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	d504      	bpl.n	80078fa <__sflush_r+0x7e>
 80078f0:	1c42      	adds	r2, r0, #1
 80078f2:	d101      	bne.n	80078f8 <__sflush_r+0x7c>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b903      	cbnz	r3, 80078fa <__sflush_r+0x7e>
 80078f8:	6560      	str	r0, [r4, #84]	; 0x54
 80078fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078fc:	602f      	str	r7, [r5, #0]
 80078fe:	2900      	cmp	r1, #0
 8007900:	d0c9      	beq.n	8007896 <__sflush_r+0x1a>
 8007902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007906:	4299      	cmp	r1, r3
 8007908:	d002      	beq.n	8007910 <__sflush_r+0x94>
 800790a:	4628      	mov	r0, r5
 800790c:	f7fe fa1a 	bl	8005d44 <_free_r>
 8007910:	2000      	movs	r0, #0
 8007912:	6360      	str	r0, [r4, #52]	; 0x34
 8007914:	e7c0      	b.n	8007898 <__sflush_r+0x1c>
 8007916:	2301      	movs	r3, #1
 8007918:	4628      	mov	r0, r5
 800791a:	47b0      	blx	r6
 800791c:	1c41      	adds	r1, r0, #1
 800791e:	d1c8      	bne.n	80078b2 <__sflush_r+0x36>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0c5      	beq.n	80078b2 <__sflush_r+0x36>
 8007926:	2b1d      	cmp	r3, #29
 8007928:	d001      	beq.n	800792e <__sflush_r+0xb2>
 800792a:	2b16      	cmp	r3, #22
 800792c:	d101      	bne.n	8007932 <__sflush_r+0xb6>
 800792e:	602f      	str	r7, [r5, #0]
 8007930:	e7b1      	b.n	8007896 <__sflush_r+0x1a>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	e7ad      	b.n	8007898 <__sflush_r+0x1c>
 800793c:	690f      	ldr	r7, [r1, #16]
 800793e:	2f00      	cmp	r7, #0
 8007940:	d0a9      	beq.n	8007896 <__sflush_r+0x1a>
 8007942:	0793      	lsls	r3, r2, #30
 8007944:	680e      	ldr	r6, [r1, #0]
 8007946:	bf08      	it	eq
 8007948:	694b      	ldreq	r3, [r1, #20]
 800794a:	600f      	str	r7, [r1, #0]
 800794c:	bf18      	it	ne
 800794e:	2300      	movne	r3, #0
 8007950:	eba6 0807 	sub.w	r8, r6, r7
 8007954:	608b      	str	r3, [r1, #8]
 8007956:	f1b8 0f00 	cmp.w	r8, #0
 800795a:	dd9c      	ble.n	8007896 <__sflush_r+0x1a>
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007960:	4643      	mov	r3, r8
 8007962:	463a      	mov	r2, r7
 8007964:	4628      	mov	r0, r5
 8007966:	47b0      	blx	r6
 8007968:	2800      	cmp	r0, #0
 800796a:	dc06      	bgt.n	800797a <__sflush_r+0xfe>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e78e      	b.n	8007898 <__sflush_r+0x1c>
 800797a:	4407      	add	r7, r0
 800797c:	eba8 0800 	sub.w	r8, r8, r0
 8007980:	e7e9      	b.n	8007956 <__sflush_r+0xda>
 8007982:	bf00      	nop
 8007984:	dfbffffe 	.word	0xdfbffffe

08007988 <_fflush_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	690b      	ldr	r3, [r1, #16]
 800798c:	4605      	mov	r5, r0
 800798e:	460c      	mov	r4, r1
 8007990:	b913      	cbnz	r3, 8007998 <_fflush_r+0x10>
 8007992:	2500      	movs	r5, #0
 8007994:	4628      	mov	r0, r5
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	b118      	cbz	r0, 80079a2 <_fflush_r+0x1a>
 800799a:	6a03      	ldr	r3, [r0, #32]
 800799c:	b90b      	cbnz	r3, 80079a2 <_fflush_r+0x1a>
 800799e:	f7fd fa37 	bl	8004e10 <__sinit>
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f3      	beq.n	8007992 <_fflush_r+0xa>
 80079aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079ac:	07d0      	lsls	r0, r2, #31
 80079ae:	d404      	bmi.n	80079ba <_fflush_r+0x32>
 80079b0:	0599      	lsls	r1, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_fflush_r+0x32>
 80079b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b6:	f7fd fb42 	bl	800503e <__retarget_lock_acquire_recursive>
 80079ba:	4628      	mov	r0, r5
 80079bc:	4621      	mov	r1, r4
 80079be:	f7ff ff5d 	bl	800787c <__sflush_r>
 80079c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	4605      	mov	r5, r0
 80079c8:	d4e4      	bmi.n	8007994 <_fflush_r+0xc>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	059b      	lsls	r3, r3, #22
 80079ce:	d4e1      	bmi.n	8007994 <_fflush_r+0xc>
 80079d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079d2:	f7fd fb35 	bl	8005040 <__retarget_lock_release_recursive>
 80079d6:	e7dd      	b.n	8007994 <_fflush_r+0xc>

080079d8 <memmove>:
 80079d8:	4288      	cmp	r0, r1
 80079da:	b510      	push	{r4, lr}
 80079dc:	eb01 0402 	add.w	r4, r1, r2
 80079e0:	d902      	bls.n	80079e8 <memmove+0x10>
 80079e2:	4284      	cmp	r4, r0
 80079e4:	4623      	mov	r3, r4
 80079e6:	d807      	bhi.n	80079f8 <memmove+0x20>
 80079e8:	1e43      	subs	r3, r0, #1
 80079ea:	42a1      	cmp	r1, r4
 80079ec:	d008      	beq.n	8007a00 <memmove+0x28>
 80079ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079f6:	e7f8      	b.n	80079ea <memmove+0x12>
 80079f8:	4402      	add	r2, r0
 80079fa:	4601      	mov	r1, r0
 80079fc:	428a      	cmp	r2, r1
 80079fe:	d100      	bne.n	8007a02 <memmove+0x2a>
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a0a:	e7f7      	b.n	80079fc <memmove+0x24>

08007a0c <strncmp>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	b16a      	cbz	r2, 8007a2c <strncmp+0x20>
 8007a10:	3901      	subs	r1, #1
 8007a12:	1884      	adds	r4, r0, r2
 8007a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d103      	bne.n	8007a28 <strncmp+0x1c>
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d001      	beq.n	8007a28 <strncmp+0x1c>
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d1f5      	bne.n	8007a14 <strncmp+0x8>
 8007a28:	1ad0      	subs	r0, r2, r3
 8007a2a:	bd10      	pop	{r4, pc}
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	e7fc      	b.n	8007a2a <strncmp+0x1e>

08007a30 <_sbrk_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d06      	ldr	r5, [pc, #24]	; (8007a4c <_sbrk_r+0x1c>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	f7fa f8a0 	bl	8001b80 <_sbrk>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_sbrk_r+0x1a>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_sbrk_r+0x1a>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	200007f4 	.word	0x200007f4

08007a50 <memcpy>:
 8007a50:	440a      	add	r2, r1
 8007a52:	4291      	cmp	r1, r2
 8007a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a58:	d100      	bne.n	8007a5c <memcpy+0xc>
 8007a5a:	4770      	bx	lr
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a66:	4291      	cmp	r1, r2
 8007a68:	d1f9      	bne.n	8007a5e <memcpy+0xe>
 8007a6a:	bd10      	pop	{r4, pc}
 8007a6c:	0000      	movs	r0, r0
	...

08007a70 <nan>:
 8007a70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007a78 <nan+0x8>
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	00000000 	.word	0x00000000
 8007a7c:	7ff80000 	.word	0x7ff80000

08007a80 <__assert_func>:
 8007a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a82:	4614      	mov	r4, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__assert_func+0x2c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	68d8      	ldr	r0, [r3, #12]
 8007a8e:	b14c      	cbz	r4, 8007aa4 <__assert_func+0x24>
 8007a90:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <__assert_func+0x30>)
 8007a92:	9100      	str	r1, [sp, #0]
 8007a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a98:	4906      	ldr	r1, [pc, #24]	; (8007ab4 <__assert_func+0x34>)
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	f000 fbca 	bl	8008234 <fiprintf>
 8007aa0:	f000 fbda 	bl	8008258 <abort>
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <__assert_func+0x38>)
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	e7f3      	b.n	8007a92 <__assert_func+0x12>
 8007aaa:	bf00      	nop
 8007aac:	2000006c 	.word	0x2000006c
 8007ab0:	08009902 	.word	0x08009902
 8007ab4:	0800990f 	.word	0x0800990f
 8007ab8:	0800993d 	.word	0x0800993d

08007abc <_calloc_r>:
 8007abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007abe:	fba1 2402 	umull	r2, r4, r1, r2
 8007ac2:	b94c      	cbnz	r4, 8007ad8 <_calloc_r+0x1c>
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	9201      	str	r2, [sp, #4]
 8007ac8:	f7fe f9b0 	bl	8005e2c <_malloc_r>
 8007acc:	9a01      	ldr	r2, [sp, #4]
 8007ace:	4605      	mov	r5, r0
 8007ad0:	b930      	cbnz	r0, 8007ae0 <_calloc_r+0x24>
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	b003      	add	sp, #12
 8007ad6:	bd30      	pop	{r4, r5, pc}
 8007ad8:	220c      	movs	r2, #12
 8007ada:	6002      	str	r2, [r0, #0]
 8007adc:	2500      	movs	r5, #0
 8007ade:	e7f8      	b.n	8007ad2 <_calloc_r+0x16>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	f7fd fa2e 	bl	8004f42 <memset>
 8007ae6:	e7f4      	b.n	8007ad2 <_calloc_r+0x16>

08007ae8 <rshift>:
 8007ae8:	6903      	ldr	r3, [r0, #16]
 8007aea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007af2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007af6:	f100 0414 	add.w	r4, r0, #20
 8007afa:	dd45      	ble.n	8007b88 <rshift+0xa0>
 8007afc:	f011 011f 	ands.w	r1, r1, #31
 8007b00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b08:	d10c      	bne.n	8007b24 <rshift+0x3c>
 8007b0a:	f100 0710 	add.w	r7, r0, #16
 8007b0e:	4629      	mov	r1, r5
 8007b10:	42b1      	cmp	r1, r6
 8007b12:	d334      	bcc.n	8007b7e <rshift+0x96>
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	1eea      	subs	r2, r5, #3
 8007b1a:	4296      	cmp	r6, r2
 8007b1c:	bf38      	it	cc
 8007b1e:	2300      	movcc	r3, #0
 8007b20:	4423      	add	r3, r4
 8007b22:	e015      	b.n	8007b50 <rshift+0x68>
 8007b24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b28:	f1c1 0820 	rsb	r8, r1, #32
 8007b2c:	40cf      	lsrs	r7, r1
 8007b2e:	f105 0e04 	add.w	lr, r5, #4
 8007b32:	46a1      	mov	r9, r4
 8007b34:	4576      	cmp	r6, lr
 8007b36:	46f4      	mov	ip, lr
 8007b38:	d815      	bhi.n	8007b66 <rshift+0x7e>
 8007b3a:	1a9a      	subs	r2, r3, r2
 8007b3c:	0092      	lsls	r2, r2, #2
 8007b3e:	3a04      	subs	r2, #4
 8007b40:	3501      	adds	r5, #1
 8007b42:	42ae      	cmp	r6, r5
 8007b44:	bf38      	it	cc
 8007b46:	2200      	movcc	r2, #0
 8007b48:	18a3      	adds	r3, r4, r2
 8007b4a:	50a7      	str	r7, [r4, r2]
 8007b4c:	b107      	cbz	r7, 8007b50 <rshift+0x68>
 8007b4e:	3304      	adds	r3, #4
 8007b50:	1b1a      	subs	r2, r3, r4
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b58:	bf08      	it	eq
 8007b5a:	2300      	moveq	r3, #0
 8007b5c:	6102      	str	r2, [r0, #16]
 8007b5e:	bf08      	it	eq
 8007b60:	6143      	streq	r3, [r0, #20]
 8007b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b66:	f8dc c000 	ldr.w	ip, [ip]
 8007b6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b6e:	ea4c 0707 	orr.w	r7, ip, r7
 8007b72:	f849 7b04 	str.w	r7, [r9], #4
 8007b76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b7a:	40cf      	lsrs	r7, r1
 8007b7c:	e7da      	b.n	8007b34 <rshift+0x4c>
 8007b7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b82:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b86:	e7c3      	b.n	8007b10 <rshift+0x28>
 8007b88:	4623      	mov	r3, r4
 8007b8a:	e7e1      	b.n	8007b50 <rshift+0x68>

08007b8c <__hexdig_fun>:
 8007b8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b90:	2b09      	cmp	r3, #9
 8007b92:	d802      	bhi.n	8007b9a <__hexdig_fun+0xe>
 8007b94:	3820      	subs	r0, #32
 8007b96:	b2c0      	uxtb	r0, r0
 8007b98:	4770      	bx	lr
 8007b9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	d801      	bhi.n	8007ba6 <__hexdig_fun+0x1a>
 8007ba2:	3847      	subs	r0, #71	; 0x47
 8007ba4:	e7f7      	b.n	8007b96 <__hexdig_fun+0xa>
 8007ba6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d801      	bhi.n	8007bb2 <__hexdig_fun+0x26>
 8007bae:	3827      	subs	r0, #39	; 0x27
 8007bb0:	e7f1      	b.n	8007b96 <__hexdig_fun+0xa>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	4770      	bx	lr
	...

08007bb8 <__gethex>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	4617      	mov	r7, r2
 8007bbe:	680a      	ldr	r2, [r1, #0]
 8007bc0:	b085      	sub	sp, #20
 8007bc2:	f102 0b02 	add.w	fp, r2, #2
 8007bc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007bca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007bce:	4681      	mov	r9, r0
 8007bd0:	468a      	mov	sl, r1
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	32fe      	adds	r2, #254	; 0xfe
 8007bd6:	eb02 030b 	add.w	r3, r2, fp
 8007bda:	46d8      	mov	r8, fp
 8007bdc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	2830      	cmp	r0, #48	; 0x30
 8007be4:	d0f7      	beq.n	8007bd6 <__gethex+0x1e>
 8007be6:	f7ff ffd1 	bl	8007b8c <__hexdig_fun>
 8007bea:	4604      	mov	r4, r0
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d138      	bne.n	8007c62 <__gethex+0xaa>
 8007bf0:	49a7      	ldr	r1, [pc, #668]	; (8007e90 <__gethex+0x2d8>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	f7ff ff09 	bl	8007a0c <strncmp>
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d169      	bne.n	8007cd4 <__gethex+0x11c>
 8007c00:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007c04:	465d      	mov	r5, fp
 8007c06:	f7ff ffc1 	bl	8007b8c <__hexdig_fun>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d064      	beq.n	8007cd8 <__gethex+0x120>
 8007c0e:	465a      	mov	r2, fp
 8007c10:	7810      	ldrb	r0, [r2, #0]
 8007c12:	2830      	cmp	r0, #48	; 0x30
 8007c14:	4690      	mov	r8, r2
 8007c16:	f102 0201 	add.w	r2, r2, #1
 8007c1a:	d0f9      	beq.n	8007c10 <__gethex+0x58>
 8007c1c:	f7ff ffb6 	bl	8007b8c <__hexdig_fun>
 8007c20:	2301      	movs	r3, #1
 8007c22:	fab0 f480 	clz	r4, r0
 8007c26:	0964      	lsrs	r4, r4, #5
 8007c28:	465e      	mov	r6, fp
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	4615      	mov	r5, r2
 8007c30:	3201      	adds	r2, #1
 8007c32:	7828      	ldrb	r0, [r5, #0]
 8007c34:	f7ff ffaa 	bl	8007b8c <__hexdig_fun>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d1f8      	bne.n	8007c2e <__gethex+0x76>
 8007c3c:	4994      	ldr	r1, [pc, #592]	; (8007e90 <__gethex+0x2d8>)
 8007c3e:	2201      	movs	r2, #1
 8007c40:	4628      	mov	r0, r5
 8007c42:	f7ff fee3 	bl	8007a0c <strncmp>
 8007c46:	b978      	cbnz	r0, 8007c68 <__gethex+0xb0>
 8007c48:	b946      	cbnz	r6, 8007c5c <__gethex+0xa4>
 8007c4a:	1c6e      	adds	r6, r5, #1
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	4615      	mov	r5, r2
 8007c50:	3201      	adds	r2, #1
 8007c52:	7828      	ldrb	r0, [r5, #0]
 8007c54:	f7ff ff9a 	bl	8007b8c <__hexdig_fun>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d1f8      	bne.n	8007c4e <__gethex+0x96>
 8007c5c:	1b73      	subs	r3, r6, r5
 8007c5e:	009e      	lsls	r6, r3, #2
 8007c60:	e004      	b.n	8007c6c <__gethex+0xb4>
 8007c62:	2400      	movs	r4, #0
 8007c64:	4626      	mov	r6, r4
 8007c66:	e7e1      	b.n	8007c2c <__gethex+0x74>
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	d1f7      	bne.n	8007c5c <__gethex+0xa4>
 8007c6c:	782b      	ldrb	r3, [r5, #0]
 8007c6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c72:	2b50      	cmp	r3, #80	; 0x50
 8007c74:	d13d      	bne.n	8007cf2 <__gethex+0x13a>
 8007c76:	786b      	ldrb	r3, [r5, #1]
 8007c78:	2b2b      	cmp	r3, #43	; 0x2b
 8007c7a:	d02f      	beq.n	8007cdc <__gethex+0x124>
 8007c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8007c7e:	d031      	beq.n	8007ce4 <__gethex+0x12c>
 8007c80:	1c69      	adds	r1, r5, #1
 8007c82:	f04f 0b00 	mov.w	fp, #0
 8007c86:	7808      	ldrb	r0, [r1, #0]
 8007c88:	f7ff ff80 	bl	8007b8c <__hexdig_fun>
 8007c8c:	1e42      	subs	r2, r0, #1
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	2a18      	cmp	r2, #24
 8007c92:	d82e      	bhi.n	8007cf2 <__gethex+0x13a>
 8007c94:	f1a0 0210 	sub.w	r2, r0, #16
 8007c98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c9c:	f7ff ff76 	bl	8007b8c <__hexdig_fun>
 8007ca0:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ca4:	fa5f fc8c 	uxtb.w	ip, ip
 8007ca8:	f1bc 0f18 	cmp.w	ip, #24
 8007cac:	d91d      	bls.n	8007cea <__gethex+0x132>
 8007cae:	f1bb 0f00 	cmp.w	fp, #0
 8007cb2:	d000      	beq.n	8007cb6 <__gethex+0xfe>
 8007cb4:	4252      	negs	r2, r2
 8007cb6:	4416      	add	r6, r2
 8007cb8:	f8ca 1000 	str.w	r1, [sl]
 8007cbc:	b1dc      	cbz	r4, 8007cf6 <__gethex+0x13e>
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf14      	ite	ne
 8007cc4:	f04f 0800 	movne.w	r8, #0
 8007cc8:	f04f 0806 	moveq.w	r8, #6
 8007ccc:	4640      	mov	r0, r8
 8007cce:	b005      	add	sp, #20
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	4645      	mov	r5, r8
 8007cd6:	4626      	mov	r6, r4
 8007cd8:	2401      	movs	r4, #1
 8007cda:	e7c7      	b.n	8007c6c <__gethex+0xb4>
 8007cdc:	f04f 0b00 	mov.w	fp, #0
 8007ce0:	1ca9      	adds	r1, r5, #2
 8007ce2:	e7d0      	b.n	8007c86 <__gethex+0xce>
 8007ce4:	f04f 0b01 	mov.w	fp, #1
 8007ce8:	e7fa      	b.n	8007ce0 <__gethex+0x128>
 8007cea:	230a      	movs	r3, #10
 8007cec:	fb03 0002 	mla	r0, r3, r2, r0
 8007cf0:	e7d0      	b.n	8007c94 <__gethex+0xdc>
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	e7e0      	b.n	8007cb8 <__gethex+0x100>
 8007cf6:	eba5 0308 	sub.w	r3, r5, r8
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	2b07      	cmp	r3, #7
 8007d00:	dc0a      	bgt.n	8007d18 <__gethex+0x160>
 8007d02:	4648      	mov	r0, r9
 8007d04:	f7fe f91e 	bl	8005f44 <_Balloc>
 8007d08:	4604      	mov	r4, r0
 8007d0a:	b940      	cbnz	r0, 8007d1e <__gethex+0x166>
 8007d0c:	4b61      	ldr	r3, [pc, #388]	; (8007e94 <__gethex+0x2dc>)
 8007d0e:	4602      	mov	r2, r0
 8007d10:	21e4      	movs	r1, #228	; 0xe4
 8007d12:	4861      	ldr	r0, [pc, #388]	; (8007e98 <__gethex+0x2e0>)
 8007d14:	f7ff feb4 	bl	8007a80 <__assert_func>
 8007d18:	3101      	adds	r1, #1
 8007d1a:	105b      	asrs	r3, r3, #1
 8007d1c:	e7ef      	b.n	8007cfe <__gethex+0x146>
 8007d1e:	f100 0a14 	add.w	sl, r0, #20
 8007d22:	2300      	movs	r3, #0
 8007d24:	495a      	ldr	r1, [pc, #360]	; (8007e90 <__gethex+0x2d8>)
 8007d26:	f8cd a004 	str.w	sl, [sp, #4]
 8007d2a:	469b      	mov	fp, r3
 8007d2c:	45a8      	cmp	r8, r5
 8007d2e:	d342      	bcc.n	8007db6 <__gethex+0x1fe>
 8007d30:	9801      	ldr	r0, [sp, #4]
 8007d32:	f840 bb04 	str.w	fp, [r0], #4
 8007d36:	eba0 000a 	sub.w	r0, r0, sl
 8007d3a:	1080      	asrs	r0, r0, #2
 8007d3c:	6120      	str	r0, [r4, #16]
 8007d3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007d42:	4658      	mov	r0, fp
 8007d44:	f7fe f9f0 	bl	8006128 <__hi0bits>
 8007d48:	683d      	ldr	r5, [r7, #0]
 8007d4a:	eba8 0000 	sub.w	r0, r8, r0
 8007d4e:	42a8      	cmp	r0, r5
 8007d50:	dd59      	ble.n	8007e06 <__gethex+0x24e>
 8007d52:	eba0 0805 	sub.w	r8, r0, r5
 8007d56:	4641      	mov	r1, r8
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7fe fd7f 	bl	800685c <__any_on>
 8007d5e:	4683      	mov	fp, r0
 8007d60:	b1b8      	cbz	r0, 8007d92 <__gethex+0x1da>
 8007d62:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d66:	1159      	asrs	r1, r3, #5
 8007d68:	f003 021f 	and.w	r2, r3, #31
 8007d6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d70:	f04f 0b01 	mov.w	fp, #1
 8007d74:	fa0b f202 	lsl.w	r2, fp, r2
 8007d78:	420a      	tst	r2, r1
 8007d7a:	d00a      	beq.n	8007d92 <__gethex+0x1da>
 8007d7c:	455b      	cmp	r3, fp
 8007d7e:	dd06      	ble.n	8007d8e <__gethex+0x1d6>
 8007d80:	f1a8 0102 	sub.w	r1, r8, #2
 8007d84:	4620      	mov	r0, r4
 8007d86:	f7fe fd69 	bl	800685c <__any_on>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d138      	bne.n	8007e00 <__gethex+0x248>
 8007d8e:	f04f 0b02 	mov.w	fp, #2
 8007d92:	4641      	mov	r1, r8
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7ff fea7 	bl	8007ae8 <rshift>
 8007d9a:	4446      	add	r6, r8
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	42b3      	cmp	r3, r6
 8007da0:	da41      	bge.n	8007e26 <__gethex+0x26e>
 8007da2:	4621      	mov	r1, r4
 8007da4:	4648      	mov	r0, r9
 8007da6:	f7fe f90d 	bl	8005fc4 <_Bfree>
 8007daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dac:	2300      	movs	r3, #0
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007db4:	e78a      	b.n	8007ccc <__gethex+0x114>
 8007db6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007dba:	2a2e      	cmp	r2, #46	; 0x2e
 8007dbc:	d014      	beq.n	8007de8 <__gethex+0x230>
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d106      	bne.n	8007dd0 <__gethex+0x218>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	f843 bb04 	str.w	fp, [r3], #4
 8007dc8:	f04f 0b00 	mov.w	fp, #0
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	465b      	mov	r3, fp
 8007dd0:	7828      	ldrb	r0, [r5, #0]
 8007dd2:	9303      	str	r3, [sp, #12]
 8007dd4:	f7ff feda 	bl	8007b8c <__hexdig_fun>
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	f000 000f 	and.w	r0, r0, #15
 8007dde:	4098      	lsls	r0, r3
 8007de0:	ea4b 0b00 	orr.w	fp, fp, r0
 8007de4:	3304      	adds	r3, #4
 8007de6:	e7a1      	b.n	8007d2c <__gethex+0x174>
 8007de8:	45a8      	cmp	r8, r5
 8007dea:	d8e8      	bhi.n	8007dbe <__gethex+0x206>
 8007dec:	2201      	movs	r2, #1
 8007dee:	4628      	mov	r0, r5
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	f7ff fe0b 	bl	8007a0c <strncmp>
 8007df6:	4926      	ldr	r1, [pc, #152]	; (8007e90 <__gethex+0x2d8>)
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d1df      	bne.n	8007dbe <__gethex+0x206>
 8007dfe:	e795      	b.n	8007d2c <__gethex+0x174>
 8007e00:	f04f 0b03 	mov.w	fp, #3
 8007e04:	e7c5      	b.n	8007d92 <__gethex+0x1da>
 8007e06:	da0b      	bge.n	8007e20 <__gethex+0x268>
 8007e08:	eba5 0800 	sub.w	r8, r5, r0
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4642      	mov	r2, r8
 8007e10:	4648      	mov	r0, r9
 8007e12:	f7fe faf1 	bl	80063f8 <__lshift>
 8007e16:	eba6 0608 	sub.w	r6, r6, r8
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	f100 0a14 	add.w	sl, r0, #20
 8007e20:	f04f 0b00 	mov.w	fp, #0
 8007e24:	e7ba      	b.n	8007d9c <__gethex+0x1e4>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	42b3      	cmp	r3, r6
 8007e2a:	dd73      	ble.n	8007f14 <__gethex+0x35c>
 8007e2c:	1b9e      	subs	r6, r3, r6
 8007e2e:	42b5      	cmp	r5, r6
 8007e30:	dc34      	bgt.n	8007e9c <__gethex+0x2e4>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d023      	beq.n	8007e80 <__gethex+0x2c8>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d025      	beq.n	8007e88 <__gethex+0x2d0>
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d115      	bne.n	8007e6c <__gethex+0x2b4>
 8007e40:	42b5      	cmp	r5, r6
 8007e42:	d113      	bne.n	8007e6c <__gethex+0x2b4>
 8007e44:	2d01      	cmp	r5, #1
 8007e46:	d10b      	bne.n	8007e60 <__gethex+0x2a8>
 8007e48:	9a02      	ldr	r2, [sp, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	6123      	str	r3, [r4, #16]
 8007e52:	f8ca 3000 	str.w	r3, [sl]
 8007e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e58:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007e5c:	601c      	str	r4, [r3, #0]
 8007e5e:	e735      	b.n	8007ccc <__gethex+0x114>
 8007e60:	1e69      	subs	r1, r5, #1
 8007e62:	4620      	mov	r0, r4
 8007e64:	f7fe fcfa 	bl	800685c <__any_on>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1ed      	bne.n	8007e48 <__gethex+0x290>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4648      	mov	r0, r9
 8007e70:	f7fe f8a8 	bl	8005fc4 <_Bfree>
 8007e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e76:	2300      	movs	r3, #0
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007e7e:	e725      	b.n	8007ccc <__gethex+0x114>
 8007e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f2      	bne.n	8007e6c <__gethex+0x2b4>
 8007e86:	e7df      	b.n	8007e48 <__gethex+0x290>
 8007e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1dc      	bne.n	8007e48 <__gethex+0x290>
 8007e8e:	e7ed      	b.n	8007e6c <__gethex+0x2b4>
 8007e90:	08009794 	.word	0x08009794
 8007e94:	0800962d 	.word	0x0800962d
 8007e98:	0800993e 	.word	0x0800993e
 8007e9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007ea0:	f1bb 0f00 	cmp.w	fp, #0
 8007ea4:	d133      	bne.n	8007f0e <__gethex+0x356>
 8007ea6:	f1b8 0f00 	cmp.w	r8, #0
 8007eaa:	d004      	beq.n	8007eb6 <__gethex+0x2fe>
 8007eac:	4641      	mov	r1, r8
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7fe fcd4 	bl	800685c <__any_on>
 8007eb4:	4683      	mov	fp, r0
 8007eb6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ec0:	f008 081f 	and.w	r8, r8, #31
 8007ec4:	fa03 f308 	lsl.w	r3, r3, r8
 8007ec8:	4213      	tst	r3, r2
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4620      	mov	r0, r4
 8007ece:	bf18      	it	ne
 8007ed0:	f04b 0b02 	orrne.w	fp, fp, #2
 8007ed4:	1bad      	subs	r5, r5, r6
 8007ed6:	f7ff fe07 	bl	8007ae8 <rshift>
 8007eda:	687e      	ldr	r6, [r7, #4]
 8007edc:	f04f 0802 	mov.w	r8, #2
 8007ee0:	f1bb 0f00 	cmp.w	fp, #0
 8007ee4:	d04a      	beq.n	8007f7c <__gethex+0x3c4>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d016      	beq.n	8007f1a <__gethex+0x362>
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d018      	beq.n	8007f22 <__gethex+0x36a>
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d109      	bne.n	8007f08 <__gethex+0x350>
 8007ef4:	f01b 0f02 	tst.w	fp, #2
 8007ef8:	d006      	beq.n	8007f08 <__gethex+0x350>
 8007efa:	f8da 3000 	ldr.w	r3, [sl]
 8007efe:	ea4b 0b03 	orr.w	fp, fp, r3
 8007f02:	f01b 0f01 	tst.w	fp, #1
 8007f06:	d10f      	bne.n	8007f28 <__gethex+0x370>
 8007f08:	f048 0810 	orr.w	r8, r8, #16
 8007f0c:	e036      	b.n	8007f7c <__gethex+0x3c4>
 8007f0e:	f04f 0b01 	mov.w	fp, #1
 8007f12:	e7d0      	b.n	8007eb6 <__gethex+0x2fe>
 8007f14:	f04f 0801 	mov.w	r8, #1
 8007f18:	e7e2      	b.n	8007ee0 <__gethex+0x328>
 8007f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f1c:	f1c3 0301 	rsb	r3, r3, #1
 8007f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0ef      	beq.n	8007f08 <__gethex+0x350>
 8007f28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f2c:	f104 0214 	add.w	r2, r4, #20
 8007f30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4694      	mov	ip, r2
 8007f3e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007f42:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007f46:	d01e      	beq.n	8007f86 <__gethex+0x3ce>
 8007f48:	3101      	adds	r1, #1
 8007f4a:	f8cc 1000 	str.w	r1, [ip]
 8007f4e:	f1b8 0f02 	cmp.w	r8, #2
 8007f52:	f104 0214 	add.w	r2, r4, #20
 8007f56:	d13d      	bne.n	8007fd4 <__gethex+0x41c>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	42ab      	cmp	r3, r5
 8007f5e:	d10b      	bne.n	8007f78 <__gethex+0x3c0>
 8007f60:	1169      	asrs	r1, r5, #5
 8007f62:	2301      	movs	r3, #1
 8007f64:	f005 051f 	and.w	r5, r5, #31
 8007f68:	fa03 f505 	lsl.w	r5, r3, r5
 8007f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f70:	421d      	tst	r5, r3
 8007f72:	bf18      	it	ne
 8007f74:	f04f 0801 	movne.w	r8, #1
 8007f78:	f048 0820 	orr.w	r8, r8, #32
 8007f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f7e:	601c      	str	r4, [r3, #0]
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	601e      	str	r6, [r3, #0]
 8007f84:	e6a2      	b.n	8007ccc <__gethex+0x114>
 8007f86:	4290      	cmp	r0, r2
 8007f88:	f842 3c04 	str.w	r3, [r2, #-4]
 8007f8c:	d8d6      	bhi.n	8007f3c <__gethex+0x384>
 8007f8e:	68a2      	ldr	r2, [r4, #8]
 8007f90:	4593      	cmp	fp, r2
 8007f92:	db17      	blt.n	8007fc4 <__gethex+0x40c>
 8007f94:	6861      	ldr	r1, [r4, #4]
 8007f96:	4648      	mov	r0, r9
 8007f98:	3101      	adds	r1, #1
 8007f9a:	f7fd ffd3 	bl	8005f44 <_Balloc>
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	b918      	cbnz	r0, 8007faa <__gethex+0x3f2>
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <__gethex+0x458>)
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	2184      	movs	r1, #132	; 0x84
 8007fa8:	e6b3      	b.n	8007d12 <__gethex+0x15a>
 8007faa:	6922      	ldr	r2, [r4, #16]
 8007fac:	3202      	adds	r2, #2
 8007fae:	f104 010c 	add.w	r1, r4, #12
 8007fb2:	0092      	lsls	r2, r2, #2
 8007fb4:	300c      	adds	r0, #12
 8007fb6:	f7ff fd4b 	bl	8007a50 <memcpy>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4648      	mov	r0, r9
 8007fbe:	f7fe f801 	bl	8005fc4 <_Bfree>
 8007fc2:	4654      	mov	r4, sl
 8007fc4:	6922      	ldr	r2, [r4, #16]
 8007fc6:	1c51      	adds	r1, r2, #1
 8007fc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007fcc:	6121      	str	r1, [r4, #16]
 8007fce:	2101      	movs	r1, #1
 8007fd0:	6151      	str	r1, [r2, #20]
 8007fd2:	e7bc      	b.n	8007f4e <__gethex+0x396>
 8007fd4:	6921      	ldr	r1, [r4, #16]
 8007fd6:	4559      	cmp	r1, fp
 8007fd8:	dd0b      	ble.n	8007ff2 <__gethex+0x43a>
 8007fda:	2101      	movs	r1, #1
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff fd83 	bl	8007ae8 <rshift>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	42b3      	cmp	r3, r6
 8007fe8:	f6ff aedb 	blt.w	8007da2 <__gethex+0x1ea>
 8007fec:	f04f 0801 	mov.w	r8, #1
 8007ff0:	e7c2      	b.n	8007f78 <__gethex+0x3c0>
 8007ff2:	f015 051f 	ands.w	r5, r5, #31
 8007ff6:	d0f9      	beq.n	8007fec <__gethex+0x434>
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	f1c5 0520 	rsb	r5, r5, #32
 8008000:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008004:	f7fe f890 	bl	8006128 <__hi0bits>
 8008008:	42a8      	cmp	r0, r5
 800800a:	dbe6      	blt.n	8007fda <__gethex+0x422>
 800800c:	e7ee      	b.n	8007fec <__gethex+0x434>
 800800e:	bf00      	nop
 8008010:	0800962d 	.word	0x0800962d

08008014 <L_shift>:
 8008014:	f1c2 0208 	rsb	r2, r2, #8
 8008018:	0092      	lsls	r2, r2, #2
 800801a:	b570      	push	{r4, r5, r6, lr}
 800801c:	f1c2 0620 	rsb	r6, r2, #32
 8008020:	6843      	ldr	r3, [r0, #4]
 8008022:	6804      	ldr	r4, [r0, #0]
 8008024:	fa03 f506 	lsl.w	r5, r3, r6
 8008028:	432c      	orrs	r4, r5
 800802a:	40d3      	lsrs	r3, r2
 800802c:	6004      	str	r4, [r0, #0]
 800802e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008032:	4288      	cmp	r0, r1
 8008034:	d3f4      	bcc.n	8008020 <L_shift+0xc>
 8008036:	bd70      	pop	{r4, r5, r6, pc}

08008038 <__match>:
 8008038:	b530      	push	{r4, r5, lr}
 800803a:	6803      	ldr	r3, [r0, #0]
 800803c:	3301      	adds	r3, #1
 800803e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008042:	b914      	cbnz	r4, 800804a <__match+0x12>
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	2001      	movs	r0, #1
 8008048:	bd30      	pop	{r4, r5, pc}
 800804a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800804e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008052:	2d19      	cmp	r5, #25
 8008054:	bf98      	it	ls
 8008056:	3220      	addls	r2, #32
 8008058:	42a2      	cmp	r2, r4
 800805a:	d0f0      	beq.n	800803e <__match+0x6>
 800805c:	2000      	movs	r0, #0
 800805e:	e7f3      	b.n	8008048 <__match+0x10>

08008060 <__hexnan>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	680b      	ldr	r3, [r1, #0]
 8008066:	6801      	ldr	r1, [r0, #0]
 8008068:	115e      	asrs	r6, r3, #5
 800806a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800806e:	f013 031f 	ands.w	r3, r3, #31
 8008072:	b087      	sub	sp, #28
 8008074:	bf18      	it	ne
 8008076:	3604      	addne	r6, #4
 8008078:	2500      	movs	r5, #0
 800807a:	1f37      	subs	r7, r6, #4
 800807c:	4682      	mov	sl, r0
 800807e:	4690      	mov	r8, r2
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	f846 5c04 	str.w	r5, [r6, #-4]
 8008086:	46b9      	mov	r9, r7
 8008088:	463c      	mov	r4, r7
 800808a:	9502      	str	r5, [sp, #8]
 800808c:	46ab      	mov	fp, r5
 800808e:	784a      	ldrb	r2, [r1, #1]
 8008090:	1c4b      	adds	r3, r1, #1
 8008092:	9303      	str	r3, [sp, #12]
 8008094:	b342      	cbz	r2, 80080e8 <__hexnan+0x88>
 8008096:	4610      	mov	r0, r2
 8008098:	9105      	str	r1, [sp, #20]
 800809a:	9204      	str	r2, [sp, #16]
 800809c:	f7ff fd76 	bl	8007b8c <__hexdig_fun>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d14f      	bne.n	8008144 <__hexnan+0xe4>
 80080a4:	9a04      	ldr	r2, [sp, #16]
 80080a6:	9905      	ldr	r1, [sp, #20]
 80080a8:	2a20      	cmp	r2, #32
 80080aa:	d818      	bhi.n	80080de <__hexnan+0x7e>
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	459b      	cmp	fp, r3
 80080b0:	dd13      	ble.n	80080da <__hexnan+0x7a>
 80080b2:	454c      	cmp	r4, r9
 80080b4:	d206      	bcs.n	80080c4 <__hexnan+0x64>
 80080b6:	2d07      	cmp	r5, #7
 80080b8:	dc04      	bgt.n	80080c4 <__hexnan+0x64>
 80080ba:	462a      	mov	r2, r5
 80080bc:	4649      	mov	r1, r9
 80080be:	4620      	mov	r0, r4
 80080c0:	f7ff ffa8 	bl	8008014 <L_shift>
 80080c4:	4544      	cmp	r4, r8
 80080c6:	d950      	bls.n	800816a <__hexnan+0x10a>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f1a4 0904 	sub.w	r9, r4, #4
 80080ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80080d2:	f8cd b008 	str.w	fp, [sp, #8]
 80080d6:	464c      	mov	r4, r9
 80080d8:	461d      	mov	r5, r3
 80080da:	9903      	ldr	r1, [sp, #12]
 80080dc:	e7d7      	b.n	800808e <__hexnan+0x2e>
 80080de:	2a29      	cmp	r2, #41	; 0x29
 80080e0:	d155      	bne.n	800818e <__hexnan+0x12e>
 80080e2:	3102      	adds	r1, #2
 80080e4:	f8ca 1000 	str.w	r1, [sl]
 80080e8:	f1bb 0f00 	cmp.w	fp, #0
 80080ec:	d04f      	beq.n	800818e <__hexnan+0x12e>
 80080ee:	454c      	cmp	r4, r9
 80080f0:	d206      	bcs.n	8008100 <__hexnan+0xa0>
 80080f2:	2d07      	cmp	r5, #7
 80080f4:	dc04      	bgt.n	8008100 <__hexnan+0xa0>
 80080f6:	462a      	mov	r2, r5
 80080f8:	4649      	mov	r1, r9
 80080fa:	4620      	mov	r0, r4
 80080fc:	f7ff ff8a 	bl	8008014 <L_shift>
 8008100:	4544      	cmp	r4, r8
 8008102:	d934      	bls.n	800816e <__hexnan+0x10e>
 8008104:	f1a8 0204 	sub.w	r2, r8, #4
 8008108:	4623      	mov	r3, r4
 800810a:	f853 1b04 	ldr.w	r1, [r3], #4
 800810e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008112:	429f      	cmp	r7, r3
 8008114:	d2f9      	bcs.n	800810a <__hexnan+0xaa>
 8008116:	1b3b      	subs	r3, r7, r4
 8008118:	f023 0303 	bic.w	r3, r3, #3
 800811c:	3304      	adds	r3, #4
 800811e:	3e03      	subs	r6, #3
 8008120:	3401      	adds	r4, #1
 8008122:	42a6      	cmp	r6, r4
 8008124:	bf38      	it	cc
 8008126:	2304      	movcc	r3, #4
 8008128:	4443      	add	r3, r8
 800812a:	2200      	movs	r2, #0
 800812c:	f843 2b04 	str.w	r2, [r3], #4
 8008130:	429f      	cmp	r7, r3
 8008132:	d2fb      	bcs.n	800812c <__hexnan+0xcc>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	b91b      	cbnz	r3, 8008140 <__hexnan+0xe0>
 8008138:	4547      	cmp	r7, r8
 800813a:	d126      	bne.n	800818a <__hexnan+0x12a>
 800813c:	2301      	movs	r3, #1
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	2005      	movs	r0, #5
 8008142:	e025      	b.n	8008190 <__hexnan+0x130>
 8008144:	3501      	adds	r5, #1
 8008146:	2d08      	cmp	r5, #8
 8008148:	f10b 0b01 	add.w	fp, fp, #1
 800814c:	dd06      	ble.n	800815c <__hexnan+0xfc>
 800814e:	4544      	cmp	r4, r8
 8008150:	d9c3      	bls.n	80080da <__hexnan+0x7a>
 8008152:	2300      	movs	r3, #0
 8008154:	f844 3c04 	str.w	r3, [r4, #-4]
 8008158:	2501      	movs	r5, #1
 800815a:	3c04      	subs	r4, #4
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	f000 000f 	and.w	r0, r0, #15
 8008162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	e7b7      	b.n	80080da <__hexnan+0x7a>
 800816a:	2508      	movs	r5, #8
 800816c:	e7b5      	b.n	80080da <__hexnan+0x7a>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0df      	beq.n	8008134 <__hexnan+0xd4>
 8008174:	f1c3 0320 	rsb	r3, r3, #32
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	40da      	lsrs	r2, r3
 800817e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008182:	4013      	ands	r3, r2
 8008184:	f846 3c04 	str.w	r3, [r6, #-4]
 8008188:	e7d4      	b.n	8008134 <__hexnan+0xd4>
 800818a:	3f04      	subs	r7, #4
 800818c:	e7d2      	b.n	8008134 <__hexnan+0xd4>
 800818e:	2004      	movs	r0, #4
 8008190:	b007      	add	sp, #28
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008196 <__ascii_mbtowc>:
 8008196:	b082      	sub	sp, #8
 8008198:	b901      	cbnz	r1, 800819c <__ascii_mbtowc+0x6>
 800819a:	a901      	add	r1, sp, #4
 800819c:	b142      	cbz	r2, 80081b0 <__ascii_mbtowc+0x1a>
 800819e:	b14b      	cbz	r3, 80081b4 <__ascii_mbtowc+0x1e>
 80081a0:	7813      	ldrb	r3, [r2, #0]
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	1e10      	subs	r0, r2, #0
 80081a8:	bf18      	it	ne
 80081aa:	2001      	movne	r0, #1
 80081ac:	b002      	add	sp, #8
 80081ae:	4770      	bx	lr
 80081b0:	4610      	mov	r0, r2
 80081b2:	e7fb      	b.n	80081ac <__ascii_mbtowc+0x16>
 80081b4:	f06f 0001 	mvn.w	r0, #1
 80081b8:	e7f8      	b.n	80081ac <__ascii_mbtowc+0x16>

080081ba <_realloc_r>:
 80081ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081be:	4680      	mov	r8, r0
 80081c0:	4614      	mov	r4, r2
 80081c2:	460e      	mov	r6, r1
 80081c4:	b921      	cbnz	r1, 80081d0 <_realloc_r+0x16>
 80081c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081ca:	4611      	mov	r1, r2
 80081cc:	f7fd be2e 	b.w	8005e2c <_malloc_r>
 80081d0:	b92a      	cbnz	r2, 80081de <_realloc_r+0x24>
 80081d2:	f7fd fdb7 	bl	8005d44 <_free_r>
 80081d6:	4625      	mov	r5, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081de:	f000 f842 	bl	8008266 <_malloc_usable_size_r>
 80081e2:	4284      	cmp	r4, r0
 80081e4:	4607      	mov	r7, r0
 80081e6:	d802      	bhi.n	80081ee <_realloc_r+0x34>
 80081e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081ec:	d812      	bhi.n	8008214 <_realloc_r+0x5a>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4640      	mov	r0, r8
 80081f2:	f7fd fe1b 	bl	8005e2c <_malloc_r>
 80081f6:	4605      	mov	r5, r0
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d0ed      	beq.n	80081d8 <_realloc_r+0x1e>
 80081fc:	42bc      	cmp	r4, r7
 80081fe:	4622      	mov	r2, r4
 8008200:	4631      	mov	r1, r6
 8008202:	bf28      	it	cs
 8008204:	463a      	movcs	r2, r7
 8008206:	f7ff fc23 	bl	8007a50 <memcpy>
 800820a:	4631      	mov	r1, r6
 800820c:	4640      	mov	r0, r8
 800820e:	f7fd fd99 	bl	8005d44 <_free_r>
 8008212:	e7e1      	b.n	80081d8 <_realloc_r+0x1e>
 8008214:	4635      	mov	r5, r6
 8008216:	e7df      	b.n	80081d8 <_realloc_r+0x1e>

08008218 <__ascii_wctomb>:
 8008218:	b149      	cbz	r1, 800822e <__ascii_wctomb+0x16>
 800821a:	2aff      	cmp	r2, #255	; 0xff
 800821c:	bf85      	ittet	hi
 800821e:	238a      	movhi	r3, #138	; 0x8a
 8008220:	6003      	strhi	r3, [r0, #0]
 8008222:	700a      	strbls	r2, [r1, #0]
 8008224:	f04f 30ff 	movhi.w	r0, #4294967295
 8008228:	bf98      	it	ls
 800822a:	2001      	movls	r0, #1
 800822c:	4770      	bx	lr
 800822e:	4608      	mov	r0, r1
 8008230:	4770      	bx	lr
	...

08008234 <fiprintf>:
 8008234:	b40e      	push	{r1, r2, r3}
 8008236:	b503      	push	{r0, r1, lr}
 8008238:	4601      	mov	r1, r0
 800823a:	ab03      	add	r3, sp, #12
 800823c:	4805      	ldr	r0, [pc, #20]	; (8008254 <fiprintf+0x20>)
 800823e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008242:	6800      	ldr	r0, [r0, #0]
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	f000 f83f 	bl	80082c8 <_vfiprintf_r>
 800824a:	b002      	add	sp, #8
 800824c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008250:	b003      	add	sp, #12
 8008252:	4770      	bx	lr
 8008254:	2000006c 	.word	0x2000006c

08008258 <abort>:
 8008258:	b508      	push	{r3, lr}
 800825a:	2006      	movs	r0, #6
 800825c:	f000 fa0c 	bl	8008678 <raise>
 8008260:	2001      	movs	r0, #1
 8008262:	f7f9 fc15 	bl	8001a90 <_exit>

08008266 <_malloc_usable_size_r>:
 8008266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826a:	1f18      	subs	r0, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfbc      	itt	lt
 8008270:	580b      	ldrlt	r3, [r1, r0]
 8008272:	18c0      	addlt	r0, r0, r3
 8008274:	4770      	bx	lr

08008276 <__sfputc_r>:
 8008276:	6893      	ldr	r3, [r2, #8]
 8008278:	3b01      	subs	r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	b410      	push	{r4}
 800827e:	6093      	str	r3, [r2, #8]
 8008280:	da08      	bge.n	8008294 <__sfputc_r+0x1e>
 8008282:	6994      	ldr	r4, [r2, #24]
 8008284:	42a3      	cmp	r3, r4
 8008286:	db01      	blt.n	800828c <__sfputc_r+0x16>
 8008288:	290a      	cmp	r1, #10
 800828a:	d103      	bne.n	8008294 <__sfputc_r+0x1e>
 800828c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008290:	f000 b934 	b.w	80084fc <__swbuf_r>
 8008294:	6813      	ldr	r3, [r2, #0]
 8008296:	1c58      	adds	r0, r3, #1
 8008298:	6010      	str	r0, [r2, #0]
 800829a:	7019      	strb	r1, [r3, #0]
 800829c:	4608      	mov	r0, r1
 800829e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <__sfputs_r>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	4606      	mov	r6, r0
 80082a8:	460f      	mov	r7, r1
 80082aa:	4614      	mov	r4, r2
 80082ac:	18d5      	adds	r5, r2, r3
 80082ae:	42ac      	cmp	r4, r5
 80082b0:	d101      	bne.n	80082b6 <__sfputs_r+0x12>
 80082b2:	2000      	movs	r0, #0
 80082b4:	e007      	b.n	80082c6 <__sfputs_r+0x22>
 80082b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ba:	463a      	mov	r2, r7
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff ffda 	bl	8008276 <__sfputc_r>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d1f3      	bne.n	80082ae <__sfputs_r+0xa>
 80082c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082c8 <_vfiprintf_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	460d      	mov	r5, r1
 80082ce:	b09d      	sub	sp, #116	; 0x74
 80082d0:	4614      	mov	r4, r2
 80082d2:	4698      	mov	r8, r3
 80082d4:	4606      	mov	r6, r0
 80082d6:	b118      	cbz	r0, 80082e0 <_vfiprintf_r+0x18>
 80082d8:	6a03      	ldr	r3, [r0, #32]
 80082da:	b90b      	cbnz	r3, 80082e0 <_vfiprintf_r+0x18>
 80082dc:	f7fc fd98 	bl	8004e10 <__sinit>
 80082e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_vfiprintf_r+0x2a>
 80082e6:	89ab      	ldrh	r3, [r5, #12]
 80082e8:	059a      	lsls	r2, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_vfiprintf_r+0x2a>
 80082ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ee:	f7fc fea6 	bl	800503e <__retarget_lock_acquire_recursive>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	071b      	lsls	r3, r3, #28
 80082f6:	d501      	bpl.n	80082fc <_vfiprintf_r+0x34>
 80082f8:	692b      	ldr	r3, [r5, #16]
 80082fa:	b99b      	cbnz	r3, 8008324 <_vfiprintf_r+0x5c>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4630      	mov	r0, r6
 8008300:	f000 f93a 	bl	8008578 <__swsetup_r>
 8008304:	b170      	cbz	r0, 8008324 <_vfiprintf_r+0x5c>
 8008306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008308:	07dc      	lsls	r4, r3, #31
 800830a:	d504      	bpl.n	8008316 <_vfiprintf_r+0x4e>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	b01d      	add	sp, #116	; 0x74
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	0598      	lsls	r0, r3, #22
 800831a:	d4f7      	bmi.n	800830c <_vfiprintf_r+0x44>
 800831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831e:	f7fc fe8f 	bl	8005040 <__retarget_lock_release_recursive>
 8008322:	e7f3      	b.n	800830c <_vfiprintf_r+0x44>
 8008324:	2300      	movs	r3, #0
 8008326:	9309      	str	r3, [sp, #36]	; 0x24
 8008328:	2320      	movs	r3, #32
 800832a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800832e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008332:	2330      	movs	r3, #48	; 0x30
 8008334:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084e8 <_vfiprintf_r+0x220>
 8008338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833c:	f04f 0901 	mov.w	r9, #1
 8008340:	4623      	mov	r3, r4
 8008342:	469a      	mov	sl, r3
 8008344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008348:	b10a      	cbz	r2, 800834e <_vfiprintf_r+0x86>
 800834a:	2a25      	cmp	r2, #37	; 0x25
 800834c:	d1f9      	bne.n	8008342 <_vfiprintf_r+0x7a>
 800834e:	ebba 0b04 	subs.w	fp, sl, r4
 8008352:	d00b      	beq.n	800836c <_vfiprintf_r+0xa4>
 8008354:	465b      	mov	r3, fp
 8008356:	4622      	mov	r2, r4
 8008358:	4629      	mov	r1, r5
 800835a:	4630      	mov	r0, r6
 800835c:	f7ff ffa2 	bl	80082a4 <__sfputs_r>
 8008360:	3001      	adds	r0, #1
 8008362:	f000 80a9 	beq.w	80084b8 <_vfiprintf_r+0x1f0>
 8008366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008368:	445a      	add	r2, fp
 800836a:	9209      	str	r2, [sp, #36]	; 0x24
 800836c:	f89a 3000 	ldrb.w	r3, [sl]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80a1 	beq.w	80084b8 <_vfiprintf_r+0x1f0>
 8008376:	2300      	movs	r3, #0
 8008378:	f04f 32ff 	mov.w	r2, #4294967295
 800837c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008380:	f10a 0a01 	add.w	sl, sl, #1
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800838c:	931a      	str	r3, [sp, #104]	; 0x68
 800838e:	4654      	mov	r4, sl
 8008390:	2205      	movs	r2, #5
 8008392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008396:	4854      	ldr	r0, [pc, #336]	; (80084e8 <_vfiprintf_r+0x220>)
 8008398:	f7f7 ff3a 	bl	8000210 <memchr>
 800839c:	9a04      	ldr	r2, [sp, #16]
 800839e:	b9d8      	cbnz	r0, 80083d8 <_vfiprintf_r+0x110>
 80083a0:	06d1      	lsls	r1, r2, #27
 80083a2:	bf44      	itt	mi
 80083a4:	2320      	movmi	r3, #32
 80083a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083aa:	0713      	lsls	r3, r2, #28
 80083ac:	bf44      	itt	mi
 80083ae:	232b      	movmi	r3, #43	; 0x2b
 80083b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b4:	f89a 3000 	ldrb.w	r3, [sl]
 80083b8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ba:	d015      	beq.n	80083e8 <_vfiprintf_r+0x120>
 80083bc:	9a07      	ldr	r2, [sp, #28]
 80083be:	4654      	mov	r4, sl
 80083c0:	2000      	movs	r0, #0
 80083c2:	f04f 0c0a 	mov.w	ip, #10
 80083c6:	4621      	mov	r1, r4
 80083c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083cc:	3b30      	subs	r3, #48	; 0x30
 80083ce:	2b09      	cmp	r3, #9
 80083d0:	d94d      	bls.n	800846e <_vfiprintf_r+0x1a6>
 80083d2:	b1b0      	cbz	r0, 8008402 <_vfiprintf_r+0x13a>
 80083d4:	9207      	str	r2, [sp, #28]
 80083d6:	e014      	b.n	8008402 <_vfiprintf_r+0x13a>
 80083d8:	eba0 0308 	sub.w	r3, r0, r8
 80083dc:	fa09 f303 	lsl.w	r3, r9, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	46a2      	mov	sl, r4
 80083e6:	e7d2      	b.n	800838e <_vfiprintf_r+0xc6>
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	1d19      	adds	r1, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	9103      	str	r1, [sp, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bfbb      	ittet	lt
 80083f4:	425b      	neglt	r3, r3
 80083f6:	f042 0202 	orrlt.w	r2, r2, #2
 80083fa:	9307      	strge	r3, [sp, #28]
 80083fc:	9307      	strlt	r3, [sp, #28]
 80083fe:	bfb8      	it	lt
 8008400:	9204      	strlt	r2, [sp, #16]
 8008402:	7823      	ldrb	r3, [r4, #0]
 8008404:	2b2e      	cmp	r3, #46	; 0x2e
 8008406:	d10c      	bne.n	8008422 <_vfiprintf_r+0x15a>
 8008408:	7863      	ldrb	r3, [r4, #1]
 800840a:	2b2a      	cmp	r3, #42	; 0x2a
 800840c:	d134      	bne.n	8008478 <_vfiprintf_r+0x1b0>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	1d1a      	adds	r2, r3, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	9203      	str	r2, [sp, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb8      	it	lt
 800841a:	f04f 33ff 	movlt.w	r3, #4294967295
 800841e:	3402      	adds	r4, #2
 8008420:	9305      	str	r3, [sp, #20]
 8008422:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084f8 <_vfiprintf_r+0x230>
 8008426:	7821      	ldrb	r1, [r4, #0]
 8008428:	2203      	movs	r2, #3
 800842a:	4650      	mov	r0, sl
 800842c:	f7f7 fef0 	bl	8000210 <memchr>
 8008430:	b138      	cbz	r0, 8008442 <_vfiprintf_r+0x17a>
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	eba0 000a 	sub.w	r0, r0, sl
 8008438:	2240      	movs	r2, #64	; 0x40
 800843a:	4082      	lsls	r2, r0
 800843c:	4313      	orrs	r3, r2
 800843e:	3401      	adds	r4, #1
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008446:	4829      	ldr	r0, [pc, #164]	; (80084ec <_vfiprintf_r+0x224>)
 8008448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800844c:	2206      	movs	r2, #6
 800844e:	f7f7 fedf 	bl	8000210 <memchr>
 8008452:	2800      	cmp	r0, #0
 8008454:	d03f      	beq.n	80084d6 <_vfiprintf_r+0x20e>
 8008456:	4b26      	ldr	r3, [pc, #152]	; (80084f0 <_vfiprintf_r+0x228>)
 8008458:	bb1b      	cbnz	r3, 80084a2 <_vfiprintf_r+0x1da>
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	3307      	adds	r3, #7
 800845e:	f023 0307 	bic.w	r3, r3, #7
 8008462:	3308      	adds	r3, #8
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	443b      	add	r3, r7
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	e768      	b.n	8008340 <_vfiprintf_r+0x78>
 800846e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008472:	460c      	mov	r4, r1
 8008474:	2001      	movs	r0, #1
 8008476:	e7a6      	b.n	80083c6 <_vfiprintf_r+0xfe>
 8008478:	2300      	movs	r3, #0
 800847a:	3401      	adds	r4, #1
 800847c:	9305      	str	r3, [sp, #20]
 800847e:	4619      	mov	r1, r3
 8008480:	f04f 0c0a 	mov.w	ip, #10
 8008484:	4620      	mov	r0, r4
 8008486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800848a:	3a30      	subs	r2, #48	; 0x30
 800848c:	2a09      	cmp	r2, #9
 800848e:	d903      	bls.n	8008498 <_vfiprintf_r+0x1d0>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0c6      	beq.n	8008422 <_vfiprintf_r+0x15a>
 8008494:	9105      	str	r1, [sp, #20]
 8008496:	e7c4      	b.n	8008422 <_vfiprintf_r+0x15a>
 8008498:	fb0c 2101 	mla	r1, ip, r1, r2
 800849c:	4604      	mov	r4, r0
 800849e:	2301      	movs	r3, #1
 80084a0:	e7f0      	b.n	8008484 <_vfiprintf_r+0x1bc>
 80084a2:	ab03      	add	r3, sp, #12
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	462a      	mov	r2, r5
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <_vfiprintf_r+0x22c>)
 80084aa:	a904      	add	r1, sp, #16
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7fb fe4d 	bl	800414c <_printf_float>
 80084b2:	4607      	mov	r7, r0
 80084b4:	1c78      	adds	r0, r7, #1
 80084b6:	d1d6      	bne.n	8008466 <_vfiprintf_r+0x19e>
 80084b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ba:	07d9      	lsls	r1, r3, #31
 80084bc:	d405      	bmi.n	80084ca <_vfiprintf_r+0x202>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	059a      	lsls	r2, r3, #22
 80084c2:	d402      	bmi.n	80084ca <_vfiprintf_r+0x202>
 80084c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c6:	f7fc fdbb 	bl	8005040 <__retarget_lock_release_recursive>
 80084ca:	89ab      	ldrh	r3, [r5, #12]
 80084cc:	065b      	lsls	r3, r3, #25
 80084ce:	f53f af1d 	bmi.w	800830c <_vfiprintf_r+0x44>
 80084d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d4:	e71c      	b.n	8008310 <_vfiprintf_r+0x48>
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	462a      	mov	r2, r5
 80084dc:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <_vfiprintf_r+0x22c>)
 80084de:	a904      	add	r1, sp, #16
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7fc f8d7 	bl	8004694 <_printf_i>
 80084e6:	e7e4      	b.n	80084b2 <_vfiprintf_r+0x1ea>
 80084e8:	080098e9 	.word	0x080098e9
 80084ec:	080098f3 	.word	0x080098f3
 80084f0:	0800414d 	.word	0x0800414d
 80084f4:	080082a5 	.word	0x080082a5
 80084f8:	080098ef 	.word	0x080098ef

080084fc <__swbuf_r>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	460e      	mov	r6, r1
 8008500:	4614      	mov	r4, r2
 8008502:	4605      	mov	r5, r0
 8008504:	b118      	cbz	r0, 800850e <__swbuf_r+0x12>
 8008506:	6a03      	ldr	r3, [r0, #32]
 8008508:	b90b      	cbnz	r3, 800850e <__swbuf_r+0x12>
 800850a:	f7fc fc81 	bl	8004e10 <__sinit>
 800850e:	69a3      	ldr	r3, [r4, #24]
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	071a      	lsls	r2, r3, #28
 8008516:	d525      	bpl.n	8008564 <__swbuf_r+0x68>
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	b31b      	cbz	r3, 8008564 <__swbuf_r+0x68>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	6922      	ldr	r2, [r4, #16]
 8008520:	1a98      	subs	r0, r3, r2
 8008522:	6963      	ldr	r3, [r4, #20]
 8008524:	b2f6      	uxtb	r6, r6
 8008526:	4283      	cmp	r3, r0
 8008528:	4637      	mov	r7, r6
 800852a:	dc04      	bgt.n	8008536 <__swbuf_r+0x3a>
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f7ff fa2a 	bl	8007988 <_fflush_r>
 8008534:	b9e0      	cbnz	r0, 8008570 <__swbuf_r+0x74>
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	3b01      	subs	r3, #1
 800853a:	60a3      	str	r3, [r4, #8]
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	6022      	str	r2, [r4, #0]
 8008542:	701e      	strb	r6, [r3, #0]
 8008544:	6962      	ldr	r2, [r4, #20]
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	429a      	cmp	r2, r3
 800854a:	d004      	beq.n	8008556 <__swbuf_r+0x5a>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	07db      	lsls	r3, r3, #31
 8008550:	d506      	bpl.n	8008560 <__swbuf_r+0x64>
 8008552:	2e0a      	cmp	r6, #10
 8008554:	d104      	bne.n	8008560 <__swbuf_r+0x64>
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f7ff fa15 	bl	8007988 <_fflush_r>
 800855e:	b938      	cbnz	r0, 8008570 <__swbuf_r+0x74>
 8008560:	4638      	mov	r0, r7
 8008562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008564:	4621      	mov	r1, r4
 8008566:	4628      	mov	r0, r5
 8008568:	f000 f806 	bl	8008578 <__swsetup_r>
 800856c:	2800      	cmp	r0, #0
 800856e:	d0d5      	beq.n	800851c <__swbuf_r+0x20>
 8008570:	f04f 37ff 	mov.w	r7, #4294967295
 8008574:	e7f4      	b.n	8008560 <__swbuf_r+0x64>
	...

08008578 <__swsetup_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4b2a      	ldr	r3, [pc, #168]	; (8008624 <__swsetup_r+0xac>)
 800857c:	4605      	mov	r5, r0
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	460c      	mov	r4, r1
 8008582:	b118      	cbz	r0, 800858c <__swsetup_r+0x14>
 8008584:	6a03      	ldr	r3, [r0, #32]
 8008586:	b90b      	cbnz	r3, 800858c <__swsetup_r+0x14>
 8008588:	f7fc fc42 	bl	8004e10 <__sinit>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008592:	0718      	lsls	r0, r3, #28
 8008594:	d422      	bmi.n	80085dc <__swsetup_r+0x64>
 8008596:	06d9      	lsls	r1, r3, #27
 8008598:	d407      	bmi.n	80085aa <__swsetup_r+0x32>
 800859a:	2309      	movs	r3, #9
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e034      	b.n	8008614 <__swsetup_r+0x9c>
 80085aa:	0758      	lsls	r0, r3, #29
 80085ac:	d512      	bpl.n	80085d4 <__swsetup_r+0x5c>
 80085ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b0:	b141      	cbz	r1, 80085c4 <__swsetup_r+0x4c>
 80085b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b6:	4299      	cmp	r1, r3
 80085b8:	d002      	beq.n	80085c0 <__swsetup_r+0x48>
 80085ba:	4628      	mov	r0, r5
 80085bc:	f7fd fbc2 	bl	8005d44 <_free_r>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6363      	str	r3, [r4, #52]	; 0x34
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	2300      	movs	r3, #0
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f043 0308 	orr.w	r3, r3, #8
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	b94b      	cbnz	r3, 80085f4 <__swsetup_r+0x7c>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ea:	d003      	beq.n	80085f4 <__swsetup_r+0x7c>
 80085ec:	4621      	mov	r1, r4
 80085ee:	4628      	mov	r0, r5
 80085f0:	f000 f884 	bl	80086fc <__smakebuf_r>
 80085f4:	89a0      	ldrh	r0, [r4, #12]
 80085f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085fa:	f010 0301 	ands.w	r3, r0, #1
 80085fe:	d00a      	beq.n	8008616 <__swsetup_r+0x9e>
 8008600:	2300      	movs	r3, #0
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	6963      	ldr	r3, [r4, #20]
 8008606:	425b      	negs	r3, r3
 8008608:	61a3      	str	r3, [r4, #24]
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	b943      	cbnz	r3, 8008620 <__swsetup_r+0xa8>
 800860e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008612:	d1c4      	bne.n	800859e <__swsetup_r+0x26>
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	0781      	lsls	r1, r0, #30
 8008618:	bf58      	it	pl
 800861a:	6963      	ldrpl	r3, [r4, #20]
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	e7f4      	b.n	800860a <__swsetup_r+0x92>
 8008620:	2000      	movs	r0, #0
 8008622:	e7f7      	b.n	8008614 <__swsetup_r+0x9c>
 8008624:	2000006c 	.word	0x2000006c

08008628 <_raise_r>:
 8008628:	291f      	cmp	r1, #31
 800862a:	b538      	push	{r3, r4, r5, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	460d      	mov	r5, r1
 8008630:	d904      	bls.n	800863c <_raise_r+0x14>
 8008632:	2316      	movs	r3, #22
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	f04f 30ff 	mov.w	r0, #4294967295
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800863e:	b112      	cbz	r2, 8008646 <_raise_r+0x1e>
 8008640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008644:	b94b      	cbnz	r3, 800865a <_raise_r+0x32>
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f830 	bl	80086ac <_getpid_r>
 800864c:	462a      	mov	r2, r5
 800864e:	4601      	mov	r1, r0
 8008650:	4620      	mov	r0, r4
 8008652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008656:	f000 b817 	b.w	8008688 <_kill_r>
 800865a:	2b01      	cmp	r3, #1
 800865c:	d00a      	beq.n	8008674 <_raise_r+0x4c>
 800865e:	1c59      	adds	r1, r3, #1
 8008660:	d103      	bne.n	800866a <_raise_r+0x42>
 8008662:	2316      	movs	r3, #22
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	2001      	movs	r0, #1
 8008668:	e7e7      	b.n	800863a <_raise_r+0x12>
 800866a:	2400      	movs	r4, #0
 800866c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008670:	4628      	mov	r0, r5
 8008672:	4798      	blx	r3
 8008674:	2000      	movs	r0, #0
 8008676:	e7e0      	b.n	800863a <_raise_r+0x12>

08008678 <raise>:
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <raise+0xc>)
 800867a:	4601      	mov	r1, r0
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	f7ff bfd3 	b.w	8008628 <_raise_r>
 8008682:	bf00      	nop
 8008684:	2000006c 	.word	0x2000006c

08008688 <_kill_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	; (80086a8 <_kill_r+0x20>)
 800868c:	2300      	movs	r3, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	602b      	str	r3, [r5, #0]
 8008696:	f7f9 f9eb 	bl	8001a70 <_kill>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d102      	bne.n	80086a4 <_kill_r+0x1c>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	b103      	cbz	r3, 80086a4 <_kill_r+0x1c>
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
 80086a6:	bf00      	nop
 80086a8:	200007f4 	.word	0x200007f4

080086ac <_getpid_r>:
 80086ac:	f7f9 b9d8 	b.w	8001a60 <_getpid>

080086b0 <__swhatbuf_r>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b8:	2900      	cmp	r1, #0
 80086ba:	b096      	sub	sp, #88	; 0x58
 80086bc:	4615      	mov	r5, r2
 80086be:	461e      	mov	r6, r3
 80086c0:	da0d      	bge.n	80086de <__swhatbuf_r+0x2e>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80086c8:	f04f 0100 	mov.w	r1, #0
 80086cc:	bf0c      	ite	eq
 80086ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80086d2:	2340      	movne	r3, #64	; 0x40
 80086d4:	2000      	movs	r0, #0
 80086d6:	6031      	str	r1, [r6, #0]
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	b016      	add	sp, #88	; 0x58
 80086dc:	bd70      	pop	{r4, r5, r6, pc}
 80086de:	466a      	mov	r2, sp
 80086e0:	f000 f848 	bl	8008774 <_fstat_r>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	dbec      	blt.n	80086c2 <__swhatbuf_r+0x12>
 80086e8:	9901      	ldr	r1, [sp, #4]
 80086ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80086ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80086f2:	4259      	negs	r1, r3
 80086f4:	4159      	adcs	r1, r3
 80086f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fa:	e7eb      	b.n	80086d4 <__swhatbuf_r+0x24>

080086fc <__smakebuf_r>:
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008700:	079d      	lsls	r5, r3, #30
 8008702:	4606      	mov	r6, r0
 8008704:	460c      	mov	r4, r1
 8008706:	d507      	bpl.n	8008718 <__smakebuf_r+0x1c>
 8008708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	2301      	movs	r3, #1
 8008712:	6163      	str	r3, [r4, #20]
 8008714:	b002      	add	sp, #8
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	ab01      	add	r3, sp, #4
 800871a:	466a      	mov	r2, sp
 800871c:	f7ff ffc8 	bl	80086b0 <__swhatbuf_r>
 8008720:	9900      	ldr	r1, [sp, #0]
 8008722:	4605      	mov	r5, r0
 8008724:	4630      	mov	r0, r6
 8008726:	f7fd fb81 	bl	8005e2c <_malloc_r>
 800872a:	b948      	cbnz	r0, 8008740 <__smakebuf_r+0x44>
 800872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d4ef      	bmi.n	8008714 <__smakebuf_r+0x18>
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	e7e3      	b.n	8008708 <__smakebuf_r+0xc>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	6163      	str	r3, [r4, #20]
 800874e:	9b01      	ldr	r3, [sp, #4]
 8008750:	6120      	str	r0, [r4, #16]
 8008752:	b15b      	cbz	r3, 800876c <__smakebuf_r+0x70>
 8008754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008758:	4630      	mov	r0, r6
 800875a:	f000 f81d 	bl	8008798 <_isatty_r>
 800875e:	b128      	cbz	r0, 800876c <__smakebuf_r+0x70>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	431d      	orrs	r5, r3
 8008770:	81a5      	strh	r5, [r4, #12]
 8008772:	e7cf      	b.n	8008714 <__smakebuf_r+0x18>

08008774 <_fstat_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	; (8008794 <_fstat_r+0x20>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	f7f9 f9d4 	bl	8001b2e <_fstat>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d102      	bne.n	8008790 <_fstat_r+0x1c>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	b103      	cbz	r3, 8008790 <_fstat_r+0x1c>
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	200007f4 	.word	0x200007f4

08008798 <_isatty_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_isatty_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 f9d3 	bl	8001b4e <_isatty>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_isatty_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_isatty_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200007f4 	.word	0x200007f4

080087b8 <_init>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	bf00      	nop
 80087bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087be:	bc08      	pop	{r3}
 80087c0:	469e      	mov	lr, r3
 80087c2:	4770      	bx	lr

080087c4 <_fini>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	bf00      	nop
 80087c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ca:	bc08      	pop	{r3}
 80087cc:	469e      	mov	lr, r3
 80087ce:	4770      	bx	lr
